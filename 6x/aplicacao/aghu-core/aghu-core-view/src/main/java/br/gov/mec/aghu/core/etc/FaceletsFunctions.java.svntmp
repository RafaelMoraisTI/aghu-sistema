package br.gov.mec.ebserh.core.etc;


public final class FaceletsFunctions {

	/**
	 * Retorna um valor padrão caso o valor informado seja nulo.
	 * 
	 * @param valueToTest
	 *            valor a ser informado
	 * @param defaultValue
	 *            valor padrão
	 * @return retorna o valor padrão se o valor informado for nulo
	 */
	public static Object getDefaultValue(Object valueToTest, Object defaultValue) {
		return valueToTest == null ? defaultValue : valueToTest;
	}

	/**
	 * getDominioItens
	 * 
	 * @param dominioPath
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public static Enum[] getEnumItens(String enumPath, String enumName) {
		if (enumName==null || enumName.isEmpty()){
			return null;
		}
		try {
			Class<Enum> dominio;
			StringBuffer enumClass=new StringBuffer();
			if (enumPath!=null && !enumPath.isEmpty() && !enumName.contains(".")){
				enumClass.append(enumPath).append('.');
			}
			enumClass.append(enumName);
			dominio = (Class<Enum>) Class.forName(enumClass.toString());
			return (Enum[]) dominio.getDeclaredMethod("values").invoke(null);			
		} catch (Exception e) {
			return null;
		}
	}
	
	
	/**
	 * customPrefixAjaxRender
	 * 
	 * @param ids
	 * @return
	 */	
	public static String customPrefixAjaxRender(String ids){
		if (ids==null || ids.isEmpty()){
			return "";
		}
		String separator=" ";
		String result="";
		if (ids.contains(",")){
			separator=",";
		}
		for (String nid : ids.split(separator)){
			String var=" @(#".concat(nid.trim()).concat(")");
			result+=result.concat(var);
		}
		return result.trim();
	}	
	
	/**
	 * hasPermission
	 * 
	 * @param action
	 * @param permission
	 * @return
	 */
//	public static boolean hasPermission(Object action, String permission){
//		return ((SecurityController)action).usuarioTemPermissao(permission);
//	}
}