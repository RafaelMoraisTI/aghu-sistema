package br.gov.mec.aghu.model;

// Generated 09/04/2012 16:32:53 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * MciParamReportGrupo generated by hbm2java
 */
@Entity
@Table(name = "MCI_PARAM_REPORT_GRUPOS", schema = "AGH")
public class MciParamReportGrupo extends BaseEntityId<MciParamReportGrupoId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -4915208641924351927L;
	private MciParamReportGrupoId id;
	private Integer version;
	private MciGrupoReportRotinaCci mciGrupoReportRotinaCci;
	private RapServidores rapServidores;
	private RapServidores rapServidorMovimentado;
	private MciExportacaoDado mciExportacaoDado;
	private MciParamReportUsuario mciParamReportUsuario;
	private Date criadoEm;
	private Date alteradoEm;
	private Short ordemEmissao;
	private Short nroCopias;
	private Boolean indImpressao;

	public MciParamReportGrupo() {
	}

	public MciParamReportGrupo(MciParamReportGrupoId id, MciGrupoReportRotinaCci mciGrupoReportRotinaCci,
			RapServidores rapServidores, RapServidores rapServidorMovimentado, MciParamReportUsuario mciParamReportUsuario, Date criadoEm, Short ordemEmissao,
			Boolean indImpressao) {
		this.id = id;
		this.mciGrupoReportRotinaCci = mciGrupoReportRotinaCci;
		this.rapServidores = rapServidores;
		this.rapServidorMovimentado = rapServidorMovimentado;
		this.mciParamReportUsuario = mciParamReportUsuario;
		this.criadoEm = criadoEm;
		this.ordemEmissao = ordemEmissao;
		this.indImpressao = indImpressao;
	}

	public MciParamReportGrupo(MciParamReportGrupoId id, MciGrupoReportRotinaCci mciGrupoReportRotinaCci,
			RapServidores rapServidores, RapServidores rapServidorMovimentado, MciExportacaoDado mciExportacaoDado, MciParamReportUsuario mciParamReportUsuario,
			Date criadoEm, Short ordemEmissao, Short nroCopias, Boolean indImpressao) {
		this.id = id;
		this.mciGrupoReportRotinaCci = mciGrupoReportRotinaCci;
		this.rapServidores = rapServidores;
		this.rapServidorMovimentado = rapServidorMovimentado;
		this.mciExportacaoDado = mciExportacaoDado;
		this.mciParamReportUsuario = mciParamReportUsuario;
		this.criadoEm = criadoEm;
		this.ordemEmissao = ordemEmissao;
		this.nroCopias = nroCopias;
		this.indImpressao = indImpressao;
	}

	@EmbeddedId
	@AttributeOverrides({ @AttributeOverride(name = "pruSeq", column = @Column(name = "PRU_SEQ", nullable = false)),
			@AttributeOverride(name = "grrSeq", column = @Column(name = "GRR_SEQ", nullable = false)) })
	public MciParamReportGrupoId getId() {
		return this.id;
	}

	public void setId(MciParamReportGrupoId id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "GRR_SEQ", nullable = false, insertable = false, updatable = false)
	public MciGrupoReportRotinaCci getMciGrupoReportRotinaCci() {
		return this.mciGrupoReportRotinaCci;
	}

	public void setMciGrupoReportRotinaCci(MciGrupoReportRotinaCci mciGrupoReportRotinaCci) {
		this.mciGrupoReportRotinaCci = mciGrupoReportRotinaCci;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getRapServidores() {
		return this.rapServidores;
	}

	public void setRapServidores(RapServidores rapServidores) {
		this.rapServidores = rapServidores;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA_MOVIMENTADO", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO_MOVIMENTADO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getRapServidorMovimentado() {
		return this.rapServidorMovimentado;
	}

	public void setRapServidorMovimentado(RapServidores rapServidorMovimentado) {
		this.rapServidorMovimentado = rapServidorMovimentado;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EDA_SEQ")
	public MciExportacaoDado getMciExportacaoDado() {
		return this.mciExportacaoDado;
	}

	public void setMciExportacaoDado(MciExportacaoDado mciExportacaoDado) {
		this.mciExportacaoDado = mciExportacaoDado;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PRU_SEQ", nullable = false, insertable = false, updatable = false)
	public MciParamReportUsuario getMciParamReportUsuario() {
		return this.mciParamReportUsuario;
	}

	public void setMciParamReportUsuario(MciParamReportUsuario mciParamReportUsuario) {
		this.mciParamReportUsuario = mciParamReportUsuario;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 29)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ALTERADO_EM", nullable = false, length = 29)
	public Date getAlteradoEm() {
		return this.alteradoEm;
	}

	public void setAlteradoEm(Date alteradoEm) {
		this.alteradoEm = alteradoEm;
	}

	@Column(name = "ORDEM_EMISSAO", nullable = false)
	public Short getOrdemEmissao() {
		return this.ordemEmissao;
	}

	public void setOrdemEmissao(Short ordemEmissao) {
		this.ordemEmissao = ordemEmissao;
	}

	@Column(name = "NRO_COPIAS")
	public Short getNroCopias() {
		return this.nroCopias;
	}

	public void setNroCopias(Short nroCopias) {
		this.nroCopias = nroCopias;
	}

	@Column(name = "IND_IMPRESSAO", nullable = false, length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndImpressao() {
		return this.indImpressao;
	}

	public void setIndImpressao(Boolean indImpressao) {
		this.indImpressao = indImpressao;
	}

	public enum Fields {

		ID("id"),
		PRU_SEQ("id.pruSeq"),
		GRR_SEQ("id.grrSeq"),
		VERSION("version"),
		MCI_GRUPO_REPORT_ROTINA_CCIS("mciGrupoReportRotinaCci"),
		MCI_GRUPO_REPORT_ROTINA_CCIS_SEQ("mciGrupoReportRotinaCci.seq"),
		RAP_SERVIDORES("rapServidores"),
		MCI_EXPORTACAO_DADOS("mciExportacaoDado"),
		MCI_PARAM_REPORT_USUARIOS("mciParamReportUsuario"),
		CRIADO_EM("criadoEm"),
		ORDEM_EMISSAO("ordemEmissao"),
		NRO_COPIAS("nroCopias"),
		IND_IMPRESSAO("indImpressao");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		HashCodeBuilder umHashCodeBuilder = new HashCodeBuilder();
		umHashCodeBuilder.append(id);
		umHashCodeBuilder.append(mciExportacaoDado);
		umHashCodeBuilder.append(criadoEm);
		umHashCodeBuilder.append(ordemEmissao);
		umHashCodeBuilder.append(nroCopias);
		umHashCodeBuilder.append(indImpressao);
		return umHashCodeBuilder.toHashCode();
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MciParamReportGrupo)) {
			return false;
		}
		MciParamReportGrupo other = (MciParamReportGrupo) obj;
		
		EqualsBuilder equalsBuilder = new EqualsBuilder();
		equalsBuilder.append(this.id, other.getId());
		equalsBuilder.append(this.mciExportacaoDado, other.getMciExportacaoDado());
		equalsBuilder.append(this.criadoEm, other.getCriadoEm());
		equalsBuilder.append(this.ordemEmissao, other.getOrdemEmissao());
		equalsBuilder.append(this.nroCopias, other.getNroCopias());
		equalsBuilder.append(this.indImpressao, other.getIndImpressao());
		return equalsBuilder.isEquals();
	}
	// ##### GeradorEqualsHashCodeMain #####

}