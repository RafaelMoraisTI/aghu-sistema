package br.gov.mec.aghu.model;

// Generated 20/07/2011 15:14:11 by Hibernate Tools 3.4.0.CR1

import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.persistence.BaseEntitySeq;

/**
 * SceLoteDocImpressoes generated by hbm2java
 */

@Entity
@Table(name = "SCE_LOTE_DOC_IMPRESSOES", schema = "AGH")
@SequenceGenerator(name = "sceLoteDocImpressaoSeq", sequenceName = "AGH.SCE_LDI_SQ1", allocationSize = 1)
public class SceLoteDocImpressao extends BaseEntitySeq<Long> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -4094408656294855551L;
	private Long seq;
	private Integer version;
	private Integer qtde;
	private Date solicitadoEm;
	private Integer nroInicial;
	private Integer nroFinal;
	private ScoMarcaComercial marcaComercial;
	private Date dtValidade;
	private Integer nroNfEntrada;
	private BigDecimal concentracao;
	private String ummDescricao;
	private Integer inrNrsSeq;
	private RapServidores servidor;
	private ScoMaterial material;
	private SceLoteDocumento loteDocumento;
	//private SceLote lote;
	private String loteCodigo;
	
	public SceLoteDocImpressao() {
	}

	@Id
	@Column(name = "SEQ", unique = true, nullable = false)
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "sceLoteDocImpressaoSeq")
	public Long getSeq() {
		return this.seq;
	}

	public void setSeq(Long seq) {
		this.seq = seq;
	}

	@Version
	@Column(name = "VERSION")
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@Column(name = "QTDE")
	public Integer getQtde() {
		return this.qtde;
	}

	public void setQtde(Integer qtde) {
		this.qtde = qtde;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SOLICITADO_EM", length = 29)
	public Date getSolicitadoEm() {
		return this.solicitadoEm;
	}

	public void setSolicitadoEm(Date solicitadoEm) {
		this.solicitadoEm = solicitadoEm;
	}

	@Column(name = "NRO_INICIAL")
	public Integer getNroInicial() {
		return this.nroInicial;
	}

	public void setNroInicial(Integer nroInicial) {
		this.nroInicial = nroInicial;
	}

	@Column(name = "NRO_FINAL")
	public Integer getNroFinal() {
		return this.nroFinal;
	}

	public void setNroFinal(Integer nroFinal) {
		this.nroFinal = nroFinal;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_VALIDADE", length = 29)
	public Date getDtValidade() {
		return this.dtValidade;
	}

	public void setDtValidade(Date dtValidade) {
		this.dtValidade = dtValidade;
	}

	@Column(name = "NRO_NF_ENTRADA")
	public Integer getNroNfEntrada() {
		return this.nroNfEntrada;
	}

	public void setNroNfEntrada(Integer nroNfEntrada) {
		this.nroNfEntrada = nroNfEntrada;
	}

	@Column(name = "CONCENTRACAO", precision = 17, scale = 17)
	public BigDecimal getConcentracao() {
		return this.concentracao;
	}

	public void setConcentracao(BigDecimal concentracao) {
		this.concentracao = concentracao;
	}

	@Column(name = "UMM_DESCRICAO", length = 15)
	@Length(max = 15)
	public String getUmmDescricao() {
		return this.ummDescricao;
	}

	public void setUmmDescricao(String ummDescricao) {
		this.ummDescricao = ummDescricao;
	}

	@Column(name = "INR_NRS_SEQ")
	public Integer getInrNrsSeq() {
		return this.inrNrsSeq;
	}

	public void setInrNrsSeq(Integer inrNrsSeq) {
		this.inrNrsSeq = inrNrsSeq;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
		@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA"),
		@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO")})
	public RapServidores getServidor() {
		return servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "LOT_MAT_CODIGO", referencedColumnName="CODIGO")
	public ScoMaterial getMaterial() {
		return material;
	}

	public void setMaterial(ScoMaterial material) {
		this.material = material;
	}
	
	@Override
	public int hashCode() {
		return new HashCodeBuilder().append(this.seq).toHashCode();
	}

	@Override
	public boolean equals(Object other) {
		if (!(other instanceof SceLoteDocImpressao)) {
			return false;
		}
		SceLoteDocImpressao castOther = (SceLoteDocImpressao) other;
		return new EqualsBuilder().append(this.getSeq(), castOther.getSeq())
				.isEquals();
	}

	@Override
	public String toString() {
		return new ToStringBuilder(this).append("seq", this.seq).toString();
	}
	
	public enum Fields {
		SEQUENCIAL("seq"),
		QTDE("qtde"),
		SOLICITADO_EM("solicitadoEm"),
		NRO_INICIAL("nroInicial"),
		NRO_FINAL("nroFinal"),
		MARCA_COMERCIAL("marcaComercial"),
		DT_VALIDADE("dtValidade"),
		NRO_NF_ENTRADA("nroNfEntrada"),
		CONCENTRACAO("concentracao"),
		UMM_DESCRICAO("ummDescricao"),
		INS_NRS_SEQ("inrNrsSeq"),
		SERVIDOR("servidor"),
		MATERIAL("material"),
		LOTE_X_DOCUMENTO("loteDocumento"),
		LOTE_X_DOCUMENTO_SEQ("loteDocumento.seq"),
		//LOTE("lote"),
		LOTE_CODIGO("loteCodigo")
		;
		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "LOT_MCM_CODIGO", referencedColumnName="CODIGO")
	public ScoMarcaComercial getMarcaComercial() {
		return marcaComercial;
	}

	public void setMarcaComercial(ScoMarcaComercial marcaComercial) {
		this.marcaComercial = marcaComercial;
	}
	
/*	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
		@JoinColumn(name = "LOT_CODIGO", referencedColumnName = "CODIGO"),
		@JoinColumn(name = "LOT_MAT_CODIGO", referencedColumnName = "MAT_CODIGO"),
		@JoinColumn(name = "LOT_MCM_CODIGO", referencedColumnName = "MCM_CODIGO")})
	public SceLote getLote() {
		return lote;
	}

	public void setLote(SceLote lote) {
		this.lote = lote;
	}*/
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "LDC_SEQ", referencedColumnName="SEQ")
	public SceLoteDocumento getLoteDocumento() {
		return loteDocumento;
	}

	public void setLoteDocumento(SceLoteDocumento loteDocumento) {
		this.loteDocumento = loteDocumento;
	}
	
	@Column(name="LOT_CODIGO")
	public String getLoteCodigo() {
		return loteCodigo;
	}

	public void setLoteCodigo(String loteCodigo) {
		this.loteCodigo = loteCodigo;
	}
}
