package br.gov.mec.aghu.model;

// Generated 09/04/2012 16:32:53 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * MciMicroorgPatologiaExame generated by hbm2java
 */
@Entity
@Table(name = "MCI_MICROORG_PATOLOGIA_EXAMES", schema = "AGH")
public class MciMicroorgPatologiaExame extends BaseEntityId<MciMicroorgPatologiaExameId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -3641346351937694790L;
	private MciMicroorgPatologiaExameId id;
	private Integer version;
	private AelResultadoCodificado aelResultadoCodificado;
	private MciMicroorganismoPatologia mciMicroorganismoPatologia;
	private RapServidores rapServidores;
	private Date criadoEm;
	private DominioSituacao indSituacao;	
	private RapServidores rapServidoresMov;
	private Date alteradoEm;
	
	

	public MciMicroorgPatologiaExame() {
	}

	public MciMicroorgPatologiaExame(MciMicroorgPatologiaExameId id, AelResultadoCodificado aelResultadoCodificado,
			MciMicroorganismoPatologia mciMicroorganismoPatologia, RapServidores rapServidores, Date criadoEm, DominioSituacao indSituacao) {
		this.id = id;
		this.aelResultadoCodificado = aelResultadoCodificado;
		this.mciMicroorganismoPatologia = mciMicroorganismoPatologia;
		this.rapServidores = rapServidores;
		this.criadoEm = criadoEm;
		this.indSituacao = indSituacao;
	}

	@EmbeddedId
	@AttributeOverrides({ @AttributeOverride(name = "mptPaiSeq", column = @Column(name = "MPT_PAI_SEQ", nullable = false)),
			@AttributeOverride(name = "mptSeqp", column = @Column(name = "MPT_SEQP", nullable = false)),
			@AttributeOverride(name = "rcdSeqp", column = @Column(name = "RCD_SEQP", nullable = false)),
			@AttributeOverride(name = "rcdGtcSeq", column = @Column(name = "RCD_GTC_SEQ", nullable = false)) })
	public MciMicroorgPatologiaExameId getId() {
		return this.id;
	}

	public void setId(MciMicroorgPatologiaExameId id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	

	public void setAelResultadoCodificado(AelResultadoCodificado aelResultadoCodificado) {
		this.aelResultadoCodificado = aelResultadoCodificado;
	}

	

	public void setMciMicroorganismoPatologia(MciMicroorganismoPatologia mciMicroorganismoPatologia) {
		this.mciMicroorganismoPatologia = mciMicroorganismoPatologia;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getRapServidores() {
		return this.rapServidores;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "RCD_GTC_SEQ", referencedColumnName = "GTC_SEQ", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "RCD_SEQP", referencedColumnName = "SEQP", nullable = false, insertable = false, updatable = false) })
	public AelResultadoCodificado getAelResultadoCodificado() {
		return this.aelResultadoCodificado;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "MPT_PAI_SEQ", referencedColumnName = "PAI_SEQ", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "MPT_SEQP", referencedColumnName = "SEQP", nullable = false, insertable = false, updatable = false) })
	public MciMicroorganismoPatologia getMciMicroorganismoPatologia() {
		return this.mciMicroorganismoPatologia;
	}

	public void setRapServidores(RapServidores rapServidores) {
		this.rapServidores = rapServidores;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 29)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Column(name = "IND_SITUACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getIndSituacao() {
		return this.indSituacao;
	}

	public void setIndSituacao(DominioSituacao indSituacao) {
		this.indSituacao = indSituacao;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA_MOVIMENTADO", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO_MOVIMENTADO", referencedColumnName = "VIN_CODIGO") })
	public RapServidores getRapServidoresMov() {
		return rapServidoresMov;
	}

	public void setRapServidoresMov(RapServidores rapServidoresMov) {
		this.rapServidoresMov = rapServidoresMov;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ALTERADO_EM", length = 29)
	public Date getAlteradoEm() {
		return alteradoEm;
	}

	public void setAlteradoEm(Date alteradoEm) {
		this.alteradoEm = alteradoEm;
	}
	

	public enum Fields {

		ID("id"),
		MPT_PAI_SEQ("id.mptPaiSeq"),
		MPT_SEQP("id.mptSeqp"),
		RCD_SEQP("id.rcdSeqp"),		
		RCD_GTC_SEQ("id.rcdGtcSeq"),
		VERSION("version"),
		AEL_RESULTADO_CODIFICADO("aelResultadoCodificado"),
		MCI_MICROORGANISMO_PATOLOGIAS("mciMicroorganismoPatologia"),
		RAP_SERVIDORES("rapServidores"),
		CRIADO_EM("criadoEm"),
		IND_SITUACAO("indSituacao"),
		ALTERADO_EM("alteradoEm"),
		RAP_SERVIDORES_MOV("rapServidoresMov")
		;

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MciMicroorgPatologiaExame)) {
			return false;
		}
		MciMicroorgPatologiaExame other = (MciMicroorgPatologiaExame) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####



}
