package br.gov.mec.aghu.model;

// Generated 09/04/2012 16:32:53 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * MbcMaterialPorCirurgia generated by hbm2java
 */
@Entity
@Table(name = "MBC_MATERIAL_POR_CIRURGIAS", schema = "AGH")
public class MbcMaterialPorCirurgia extends BaseEntityId<MbcMaterialPorCirurgiaId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8126754493023985014L;
	private MbcMaterialPorCirurgiaId id;
	private Integer version;
	private MbcCirurgias mbcCirurgias;
	private RapServidores rapServidores;
	private ScoUnidadeMedida scoUnidadeMedida;
	private ScoMaterial scoMaterial;
	private Double quantidade;
	private Date criadoEm;

	public MbcMaterialPorCirurgia() {
	}

	public MbcMaterialPorCirurgia(MbcMaterialPorCirurgiaId id, MbcCirurgias mbcCirurgias, RapServidores rapServidores,
			ScoUnidadeMedida scoUnidadeMedida, ScoMaterial scoMaterial, Double quantidade, Date criadoEm) {
		this.id = id;
		this.mbcCirurgias = mbcCirurgias;
		this.rapServidores = rapServidores;
		this.scoUnidadeMedida = scoUnidadeMedida;
		this.scoMaterial = scoMaterial;
		this.quantidade = quantidade;
		this.criadoEm = criadoEm;
	}

	@EmbeddedId
	@AttributeOverrides({ @AttributeOverride(name = "crgSeq", column = @Column(name = "CRG_SEQ", nullable = false)),
			@AttributeOverride(name = "matCodigo", column = @Column(name = "MAT_CODIGO", nullable = false)) })
	public MbcMaterialPorCirurgiaId getId() {
		return this.id;
	}

	public void setId(MbcMaterialPorCirurgiaId id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CRG_SEQ", nullable = false, insertable = false, updatable = false)
	public MbcCirurgias getMbcCirurgias() {
		return this.mbcCirurgias;
	}

	public void setMbcCirurgias(MbcCirurgias mbcCirurgias) {
		this.mbcCirurgias = mbcCirurgias;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getRapServidores() {
		return this.rapServidores;
	}

	public void setRapServidores(RapServidores rapServidores) {
		this.rapServidores = rapServidores;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UMD_CODIGO", nullable = false)
	public ScoUnidadeMedida getScoUnidadeMedida() {
		return this.scoUnidadeMedida;
	}

	public void setScoUnidadeMedida(ScoUnidadeMedida scoUnidadeMedida) {
		this.scoUnidadeMedida = scoUnidadeMedida;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MAT_CODIGO", nullable = false, insertable = false, updatable = false)
	public ScoMaterial getScoMaterial() {
		return this.scoMaterial;
	}

	public void setScoMaterial(ScoMaterial scoMaterial) {
		this.scoMaterial = scoMaterial;
	}

	@Column(name = "QUANTIDADE", nullable = false, precision = 17, scale = 17)
	public Double getQuantidade() {
		return this.quantidade;
	}

	public void setQuantidade(Double quantidade) {
		this.quantidade = quantidade;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 29)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	public enum Fields {

		ID("id"),
		CRG_SEQ("id.crgSeq"),
		VERSION("version"),
		MBC_CIRURGIAS("mbcCirurgias"),
		MBC_CIRURGIAS_SEQ("mbcCirurgias.seq"),
		RAP_SERVIDORES("rapServidores"),
		SCO_UNIDADE_MEDIDA("scoUnidadeMedida"),
		SCO_MATERIAL("scoMaterial"),
		QUANTIDADE("quantidade"),
		CRIADO_EM("criadoEm");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MbcMaterialPorCirurgia)) {
			return false;
		}
		MbcMaterialPorCirurgia other = (MbcMaterialPorCirurgia) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		if(getScoMaterial() == null){
			if (other.getScoMaterial() != null){
				return false;
			}
		} else if(!getScoMaterial().equals(other.getScoMaterial())){
			return false;
		}
		return true;
	}
	
	/**
	 * Método utilizado para comparar lista de itens já gravado em BD com itens a serem gravados,
	 * desconsiderando ID do mesmo. 
	 * */
	public boolean equalsSemId(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MbcMaterialPorCirurgia)) {
			return false;
		}
		MbcMaterialPorCirurgia other = (MbcMaterialPorCirurgia) obj;
		if(getScoMaterial() == null){
			if (other.getScoMaterial() != null){
				return false;
			}
		} else if(!getScoMaterial().equals(other.getScoMaterial())){
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
