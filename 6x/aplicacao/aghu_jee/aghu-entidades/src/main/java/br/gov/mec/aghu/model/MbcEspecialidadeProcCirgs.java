package br.gov.mec.aghu.model;

// Generated 19/03/2010 12:41:50 by Hibernate Tools 3.2.5.Beta

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * MbcEspecialidadeProcCirgs generated by hbm2java
 */

@Entity
@Table(name = "MBC_ESPECIALIDADE_PROC_CIRGS", schema = "AGH")
public class MbcEspecialidadeProcCirgs extends BaseEntityId<MbcEspecialidadeProcCirgsId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -430804846250147731L;
	private MbcEspecialidadeProcCirgsId id;
	private DominioSituacao situacao;
	private Date criadoEm;
	private RapServidores servidor;
	private String achadosOperPadrao;

	private MbcProcedimentoCirurgicos mbcProcedimentoCirurgicos;
	
	private AghEspecialidades especialidade;

	public MbcEspecialidadeProcCirgs() {
	}

	public MbcEspecialidadeProcCirgs(MbcEspecialidadeProcCirgsId id,
			DominioSituacao situacao) {
		this.id = id;
		this.situacao = situacao;
	}

	public MbcEspecialidadeProcCirgs(MbcEspecialidadeProcCirgsId id,
			DominioSituacao situacao, Date criadoEm,
			RapServidores servidor, String achadosOperPadrao) {
		this.id = id;
		this.situacao = situacao;
		this.criadoEm = criadoEm;
		this.servidor = servidor;
		this.achadosOperPadrao = achadosOperPadrao;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "pciSeq", column = @Column(name = "PCI_SEQ", nullable = false, precision = 5, scale = 0)),
			@AttributeOverride(name = "espSeq", column = @Column(name = "ESP_SEQ", nullable = false, precision = 4, scale = 0)) })
	public MbcEspecialidadeProcCirgsId getId() {
		return this.id;
	}

	public void setId(MbcEspecialidadeProcCirgsId id) {
		this.id = id;
	}

	@Column(name = "SITUACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getSituacao() {
		return this.situacao;
	}

	public void setSituacao(DominioSituacao situacao) {
		this.situacao = situacao;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "CRIADO_EM", length = 7)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Column(name = "ACHADOS_OPER_PADRAO", length = 4000)
	@Length(max = 4000)
	public String getAchadosOperPadrao() {
		return this.achadosOperPadrao;
	}

	public void setAchadosOperPadrao(String achadosOperPadrao) {
		this.achadosOperPadrao = achadosOperPadrao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PCI_SEQ", insertable = false, updatable = false) 
	public MbcProcedimentoCirurgicos getMbcProcedimentoCirurgicos() {
		return mbcProcedimentoCirurgicos;
	}

	public void setMbcProcedimentoCirurgicos(
			MbcProcedimentoCirurgicos mbcProcedimentoCirurgicos) {
		this.mbcProcedimentoCirurgicos = mbcProcedimentoCirurgicos;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ESP_SEQ", referencedColumnName = "SEQ", insertable=false, updatable=false)
	public AghEspecialidades getEspecialidade() {
		return especialidade;
	}

	public void setEspecialidade(AghEspecialidades especialidade) {
		this.especialidade = especialidade;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidor() {
		return servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}
	
	public enum Fields {

		ID("id"),
		PCI_SEQ("id.pciSeq"),
		ESP_SEQ("id.espSeq"),
		PROCEDIMENTO_CIRURGICOS("mbcProcedimentoCirurgicos"), 
		SITUACAO("situacao"),
		ESPECIALIDADE("especialidade"),
		ACHADOS_OPER_PADRAO("achadosOperPadrao");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return fields;
		}
	}

	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MbcEspecialidadeProcCirgs)) {
			return false;
		}
		MbcEspecialidadeProcCirgs other = (MbcEspecialidadeProcCirgs) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		return true;
	}
}
