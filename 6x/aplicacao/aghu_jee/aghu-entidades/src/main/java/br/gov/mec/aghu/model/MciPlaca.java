package br.gov.mec.aghu.model;

// Generated 11/06/2010 10:31:39 by Hibernate Tools 3.2.5.Beta

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.persistence.BaseEntityNumero;

/**
 * MciPlacas generated by hbm2java
 */
@Entity
@Table(name = "MCI_PLACAS", schema = "AGH")

public class MciPlaca extends BaseEntityNumero<Short> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2187889791872842132L;
	private Short numero;
	private RapServidores servidor;
	private RapServidores servidorMovimentado;
	private DominioSituacao situacao;
	private Date criadoEm;
	private Date alteradoEm;
	private String observacao;
	private Set<MciPatologiaInfeccao> patologiaInfeccoes = new HashSet<MciPatologiaInfeccao>(
			0);
	
	// TODO Implementar version quando usado POJO para persistencia.
	// JÃ¡ existe o getter e setter comentado no final da classe.
	/* private Integer version; */

	public MciPlaca() {
	}

	public MciPlaca(Short numero, RapServidores servidor,
			DominioSituacao situacao, Date criadoEm) {
		this.numero = numero;
		this.servidor = servidor;
		this.situacao = situacao;
		this.criadoEm = criadoEm;
	}

	public MciPlaca(Short numero, RapServidores servidor,
			RapServidores servidorMovimentado, DominioSituacao situacao,
			Date criadoEm, Date alteradoEm, String observacao,
			Set<MciPatologiaInfeccao> patologiaInfeccoes) {
		this.numero = numero;
		this.servidor = servidor;
		this.servidorMovimentado = servidorMovimentado;
		this.situacao = situacao;
		this.criadoEm = criadoEm;
		this.alteradoEm = alteradoEm;
		this.observacao = observacao;
		this.patologiaInfeccoes = patologiaInfeccoes;
	}

	@Id
	@Column(name = "NUMERO", nullable = false, precision = 3, scale = 0)
	public Short getNumero() {
		return this.numero;
	}

	public void setNumero(Short numero) {
		this.numero = numero;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidor() {
		return this.servidor;
	}

	public void setServidor(
			RapServidores servidor) {
		this.servidor = servidor;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA_MOVIMENTADO", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO_MOVIMENTADO", referencedColumnName = "VIN_CODIGO") })
	public RapServidores getServidorMovimentado() {
		return this.servidorMovimentado;
	}

	public void setServidorMovimentado(
			RapServidores servidorMovimentado) {
		this.servidorMovimentado = servidorMovimentado;
	}

	@Column(name = "IND_SITUACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getSituacao() {
		return this.situacao;
	}

	public void setSituacao(DominioSituacao situacao) {
		this.situacao = situacao;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "CRIADO_EM", nullable = false, length = 7)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "ALTERADO_EM", length = 7)
	public Date getAlteradoEm() {
		return this.alteradoEm;
	}

	public void setAlteradoEm(Date alteradoEm) {
		this.alteradoEm = alteradoEm;
	}

	@Column(name = "OBSERVACAO", length = 500)
	@Length(max = 500)
	public String getObservacao() {
		return this.observacao;
	}

	public void setObservacao(String observacao) {
		this.observacao = observacao;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "placa")
	public Set<MciPatologiaInfeccao> getPatologiaInfeccoes() {
		return this.patologiaInfeccoes;
	}

	public void setPatologiaInfeccoes(
			Set<MciPatologiaInfeccao> patologiaInfeccoes) {
		this.patologiaInfeccoes = patologiaInfeccoes;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((numero == null) ? 0 : numero.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		MciPlaca other = (MciPlaca) obj;
		if (numero == null) {
			if (other.numero != null) {
				return false;
			}
		} else if (!numero.equals(other.numero)) {
			return false;
		}
		return true;
	}

	
	/*
	 @Version
	  
	 @Column(name = "VERSION", nullable = false) 
	 public Integer getVersion() {
	 	return this.version; 
	 }
	  
	 public void setVersion(Integer version) { 
	 	this.version = version; 
	}
	 */
	public enum Fields {

		NUMERO("numero"),
		SERVIDOR("servidor"),
		SERVIDOR_MOVIMENTADO("servidorMovimentado"),
		SITUACAO("situacao"),
		CRIADO_EM("criadoEm"),
		ALTERADO_EM("alteradoEm"),
		OBSERVACAO("observacao"),
		PATOLOGIA_INFECCOES("patologiaInfeccoes");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}

}
