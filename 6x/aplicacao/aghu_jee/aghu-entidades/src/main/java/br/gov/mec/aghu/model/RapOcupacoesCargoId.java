package br.gov.mec.aghu.model;

// Generated 02/02/2010 13:37:04 by Hibernate Tools 3.2.5.Beta

import javax.persistence.Column;
import javax.persistence.Embeddable;


import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.persistence.EntityCompositeId;

/**
 * RapOcupacoesCargoId generated by hbm2java
 */
@Embeddable
public class RapOcupacoesCargoId implements EntityCompositeId {

	/**
	 * 
	 */
	private static final long serialVersionUID = 6725758434147853132L;

	/**
	 * Código do cargo
	 */
	private String cargoCodigo;

	/**
	 * código da ocupacao do cargo.
	 */
	private Integer codigo;

	public RapOcupacoesCargoId() {
	}

	public RapOcupacoesCargoId(String carCodigo, Integer codigo) {
		this.cargoCodigo = carCodigo;
		this.codigo = codigo;
	}

	@Column(name = "CAR_CODIGO", nullable = false, length = 10)
	@Length(max = 10)
	public String getCargoCodigo() {
		return this.cargoCodigo;
	}

	public void setCargoCodigo(String carCodigo) {
		this.cargoCodigo = carCodigo;
	}

	@Column(name = "CODIGO", nullable = false, precision = 5, scale = 0)
	public Integer getCodigo() {
		return this.codigo;
	}

	public void setCodigo(Integer codigo) {
		this.codigo = codigo;
	}

	@Override
	public String toString() {
		return new ToStringBuilder(this)
				.append("cargoCodigo", this.cargoCodigo).append("codigo",
						this.codigo).toString();
	}

	@Override
	public boolean equals(Object other) {
		if (!(other instanceof RapOcupacoesCargoId)) {
			return false;
		}
		RapOcupacoesCargoId castOther = (RapOcupacoesCargoId) other;
		return new EqualsBuilder().append(this.cargoCodigo,
				castOther.getCargoCodigo()).append(this.codigo,
				castOther.getCodigo()).isEquals();
	}

	@Override
	public int hashCode() {
		return new HashCodeBuilder().append(this.cargoCodigo).append(
				this.codigo).toHashCode();
	}

}
