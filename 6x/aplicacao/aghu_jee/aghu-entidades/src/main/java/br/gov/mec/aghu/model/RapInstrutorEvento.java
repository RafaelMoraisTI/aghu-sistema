package br.gov.mec.aghu.model;

// Generated 09/04/2012 16:32:53 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * RapInstrutorEvento generated by hbm2java
 */
@Entity
@Table(name = "RAP_INSTRUTORES_EVENTO", schema = "AGH", uniqueConstraints = @UniqueConstraint(columnNames = { "evt_seq",
		"ser_vin_codigo", "ser_matricula", "nome_instrutor" }))
public class RapInstrutorEvento extends BaseEntityId<RapInstrutorEventoId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6657715666700272977L;
	private RapInstrutorEventoId id;
	private Integer version;
	private RapServidores rapServidoresByRapIneSerFk2;
	private RapServidores rapServidoresByRapIneSerFk1;
	private RapProgramacaoEvento rapProgramacaoEvento;
	private String nomeInstrutor;
	private Integer cargaHoraria;
	private String indRealizacao;
	private Date confirmadoEm;

	public RapInstrutorEvento() {
	}

	public RapInstrutorEvento(RapInstrutorEventoId id, RapProgramacaoEvento rapProgramacaoEvento) {
		this.id = id;
		this.rapProgramacaoEvento = rapProgramacaoEvento;
	}

	public RapInstrutorEvento(RapInstrutorEventoId id, RapServidores rapServidoresByRapIneSerFk2,
			RapServidores rapServidoresByRapIneSerFk1, RapProgramacaoEvento rapProgramacaoEvento, String nomeInstrutor,
			Integer cargaHoraria, String indRealizacao, Date confirmadoEm) {
		this.id = id;
		this.rapServidoresByRapIneSerFk2 = rapServidoresByRapIneSerFk2;
		this.rapServidoresByRapIneSerFk1 = rapServidoresByRapIneSerFk1;
		this.rapProgramacaoEvento = rapProgramacaoEvento;
		this.nomeInstrutor = nomeInstrutor;
		this.cargaHoraria = cargaHoraria;
		this.indRealizacao = indRealizacao;
		this.confirmadoEm = confirmadoEm;
	}

	@EmbeddedId
	@AttributeOverrides({ @AttributeOverride(name = "evtSeq", column = @Column(name = "EVT_SEQ", nullable = false)),
			@AttributeOverride(name = "seqp", column = @Column(name = "SEQP", nullable = false)) })
	public RapInstrutorEventoId getId() {
		return this.id;
	}

	public void setId(RapInstrutorEventoId id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA_CONF_POR", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO_CONF_POR", referencedColumnName = "VIN_CODIGO") })
	public RapServidores getRapServidoresByRapIneSerFk2() {
		return this.rapServidoresByRapIneSerFk2;
	}

	public void setRapServidoresByRapIneSerFk2(RapServidores rapServidoresByRapIneSerFk2) {
		this.rapServidoresByRapIneSerFk2 = rapServidoresByRapIneSerFk2;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO") })
	public RapServidores getRapServidoresByRapIneSerFk1() {
		return this.rapServidoresByRapIneSerFk1;
	}

	public void setRapServidoresByRapIneSerFk1(RapServidores rapServidoresByRapIneSerFk1) {
		this.rapServidoresByRapIneSerFk1 = rapServidoresByRapIneSerFk1;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EVT_SEQ", nullable = false, insertable = false, updatable = false)
	public RapProgramacaoEvento getRapProgramacaoEvento() {
		return this.rapProgramacaoEvento;
	}

	public void setRapProgramacaoEvento(RapProgramacaoEvento rapProgramacaoEvento) {
		this.rapProgramacaoEvento = rapProgramacaoEvento;
	}

	@Column(name = "NOME_INSTRUTOR", length = 60)
	@Length(max = 60)
	public String getNomeInstrutor() {
		return this.nomeInstrutor;
	}

	public void setNomeInstrutor(String nomeInstrutor) {
		this.nomeInstrutor = nomeInstrutor;
	}

	@Column(name = "CARGA_HORARIA")
	public Integer getCargaHoraria() {
		return this.cargaHoraria;
	}

	public void setCargaHoraria(Integer cargaHoraria) {
		this.cargaHoraria = cargaHoraria;
	}

	@Column(name = "IND_REALIZACAO", length = 1)
	@Length(max = 1)
	public String getIndRealizacao() {
		return this.indRealizacao;
	}

	public void setIndRealizacao(String indRealizacao) {
		this.indRealizacao = indRealizacao;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CONFIRMADO_EM", length = 29)
	public Date getConfirmadoEm() {
		return this.confirmadoEm;
	}

	public void setConfirmadoEm(Date confirmadoEm) {
		this.confirmadoEm = confirmadoEm;
	}

	public enum Fields {

		ID("id"),
		VERSION("version"),
		RAP_SERVIDORES_BY_RAP_INE_SER_FK2("rapServidoresByRapIneSerFk2"),
		RAP_SERVIDORES_BY_RAP_INE_SER_FK1("rapServidoresByRapIneSerFk1"),
		RAP_PROGRAMACAO_EVENTOS("rapProgramacaoEvento"),
		NOME_INSTRUTOR("nomeInstrutor"),
		CARGA_HORARIA("cargaHoraria"),
		IND_REALIZACAO("indRealizacao"),
		CONFIRMADO_EM("confirmadoEm");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof RapInstrutorEvento)) {
			return false;
		}
		RapInstrutorEvento other = (RapInstrutorEvento) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
