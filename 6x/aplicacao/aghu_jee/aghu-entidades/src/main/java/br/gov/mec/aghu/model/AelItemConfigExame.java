package br.gov.mec.aghu.model;

// Generated 09/04/2012 13:17:38 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AelItemConfigExames generated by hbm2java
 */
@Entity
@Table(name = "AEL_ITEM_CONFIG_EXAMES")
public class AelItemConfigExame extends BaseEntityId<AelItemConfigExameId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 42210741360701876L;

	private AelItemConfigExameId id;
	private AelConfigExLaudoUnico configExLaudoUnico;
	private AelUnfExecutaExames unidadeExecutaExame;
	private Date criadoEm;
	private RapServidores servidor;

	public AelItemConfigExame() {
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "lu2Seq", column = @Column(name = "LU2_SEQ", nullable = false, precision = 5, scale = 0)),
			@AttributeOverride(name = "ufeEmaExaSigla", column = @Column(name = "UFE_EMA_EXA_SIGLA", nullable = false, length = 5)),
			@AttributeOverride(name = "ufeEmaManSeq", column = @Column(name = "UFE_EMA_MAN_SEQ", nullable = false, precision = 5, scale = 0)),
			@AttributeOverride(name = "ufeUnfSeq", column = @Column(name = "UFE_UNF_SEQ", nullable = false, precision = 4, scale = 0)) })
	public AelItemConfigExameId getId() {
		return this.id;
	}

	public void setId(AelItemConfigExameId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "LU2_SEQ", nullable = false, insertable = false, updatable = false)
	public AelConfigExLaudoUnico getConfigExLaudoUnico() {
		return configExLaudoUnico;
	}

	public void setConfigExLaudoUnico(AelConfigExLaudoUnico configExLaudoUnico) {
		this.configExLaudoUnico = configExLaudoUnico;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 7)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
		@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
		@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidor() {
		return servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}

	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
		@JoinColumn(name = "UFE_EMA_EXA_SIGLA", referencedColumnName = "EMA_EXA_SIGLA", nullable = false, insertable = false, updatable = false),
		@JoinColumn(name = "UFE_EMA_MAN_SEQ", referencedColumnName = "EMA_MAN_SEQ", nullable = false, insertable = false, updatable = false),
		@JoinColumn(name = "UFE_UNF_SEQ", referencedColumnName = "UNF_SEQ", nullable = false, insertable = false, updatable = false) })
	public AelUnfExecutaExames getUnidadeExecutaExame() {
		return unidadeExecutaExame;
	}

	public void setUnidadeExecutaExame(AelUnfExecutaExames unidadeExecutaExame) {
		this.unidadeExecutaExame = unidadeExecutaExame;
	}

	public enum Fields {

		LU2SEQ("id.lu2Seq"),
		UFE_EMA_EXA_SILGA("id.ufeEmaExaSigla"),
		UFE_EMA_MAN_SEQ("id.ufeEmaManSeq"),
		UFE_UNF_SEQ("id.ufeUnfSeq"),
		CONF_EX_LAUDO_UNICO("configExLaudoUnico"),
		UNIDADE_EX_EXAME("unidadeExecutaExame"),
		CRIADO_EM("criadoEm"),
		SERVIDOR("servidor");
		
		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		AelItemConfigExame other = (AelItemConfigExame) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		return true;
	}

}
