package br.gov.mec.aghu.model;

// Generated 09/04/2012 16:32:53 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.persistence.BaseEntitySeq;

/**
 * EceKitComponente generated by hbm2java
 */
@Entity
@SequenceGenerator(name="eceKcoSq1", sequenceName="AGH.ECE_KCO_SQ1", allocationSize = 1)
@Table(name = "ECE_KIT_COMPONENTES", schema = "AGH")
public class EceKitComponente extends BaseEntitySeq<Integer> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6105529500352715408L;
	private Integer seq;
	private Integer version;
	private FatProcedHospInternos fatProcedHospInternos;
	private RapServidores rapServidores;
	private EceKitComponente eceKitComponente;
	private EceViaDoKit eceViaDoKit;
	private EceKit eceKit;
	private Double quantidade;
	private String tipo;
	private String impressoPrescricao;
	private String situacao;
	private Double concentracao;
	private String tempoInfusao;
	private String estabilidade;
	private String incompatibilidades;
	private String observacoes;
	private Date criadoEm;
	private String unidade;
	private Set<EceMaterialEmpregado> eceMaterialEmpregadoes = new HashSet<EceMaterialEmpregado>(0);
	private Set<EceKitComponente> eceKitComponentees = new HashSet<EceKitComponente>(0);

	public EceKitComponente() {
	}

	public EceKitComponente(Integer seq, FatProcedHospInternos fatProcedHospInternos, RapServidores rapServidores, EceKit eceKit,
			Date criadoEm) {
		this.seq = seq;
		this.fatProcedHospInternos = fatProcedHospInternos;
		this.rapServidores = rapServidores;
		this.eceKit = eceKit;
		this.criadoEm = criadoEm;
	}

	public EceKitComponente(Integer seq, FatProcedHospInternos fatProcedHospInternos, RapServidores rapServidores,
			EceKitComponente eceKitComponente, EceViaDoKit eceViaDoKit, EceKit eceKit, Double quantidade, String tipo,
			String impressoPrescricao, String situacao, Double concentracao, String tempoInfusao, String estabilidade,
			String incompatibilidades, String observacoes, Date criadoEm, String unidade,
			Set<EceMaterialEmpregado> eceMaterialEmpregadoes, Set<EceKitComponente> eceKitComponentees) {
		this.seq = seq;
		this.fatProcedHospInternos = fatProcedHospInternos;
		this.rapServidores = rapServidores;
		this.eceKitComponente = eceKitComponente;
		this.eceViaDoKit = eceViaDoKit;
		this.eceKit = eceKit;
		this.quantidade = quantidade;
		this.tipo = tipo;
		this.impressoPrescricao = impressoPrescricao;
		this.situacao = situacao;
		this.concentracao = concentracao;
		this.tempoInfusao = tempoInfusao;
		this.estabilidade = estabilidade;
		this.incompatibilidades = incompatibilidades;
		this.observacoes = observacoes;
		this.criadoEm = criadoEm;
		this.unidade = unidade;
		this.eceMaterialEmpregadoes = eceMaterialEmpregadoes;
		this.eceKitComponentees = eceKitComponentees;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "eceKcoSq1")
	@Column(name = "SEQ", unique = true, nullable = false)
	public Integer getSeq() {
		return this.seq;
	}

	public void setSeq(Integer seq) {
		this.seq = seq;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PHI_SEQ", nullable = false)
	public FatProcedHospInternos getFatProcedHospInternos() {
		return this.fatProcedHospInternos;
	}

	public void setFatProcedHospInternos(FatProcedHospInternos fatProcedHospInternos) {
		this.fatProcedHospInternos = fatProcedHospInternos;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getRapServidores() {
		return this.rapServidores;
	}

	public void setRapServidores(RapServidores rapServidores) {
		this.rapServidores = rapServidores;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "KCO_SEQ_USUAL")
	public EceKitComponente getEceKitComponente() {
		return this.eceKitComponente;
	}

	public void setEceKitComponente(EceKitComponente eceKitComponente) {
		this.eceKitComponente = eceKitComponente;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "VDK_SEQ")
	public EceViaDoKit getEceViaDoKit() {
		return this.eceViaDoKit;
	}

	public void setEceViaDoKit(EceViaDoKit eceViaDoKit) {
		this.eceViaDoKit = eceViaDoKit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "KTS_SEQ", nullable = false)
	public EceKit getEceKit() {
		return this.eceKit;
	}

	public void setEceKit(EceKit eceKit) {
		this.eceKit = eceKit;
	}

	@Column(name = "QUANTIDADE", precision = 17, scale = 17)
	public Double getQuantidade() {
		return this.quantidade;
	}

	public void setQuantidade(Double quantidade) {
		this.quantidade = quantidade;
	}

	@Column(name = "TIPO", length = 1)
	@Length(max = 1)
	public String getTipo() {
		return this.tipo;
	}

	public void setTipo(String tipo) {
		this.tipo = tipo;
	}

	@Column(name = "IMPRESSO_PRESCRICAO", length = 1)
	@Length(max = 1)
	public String getImpressoPrescricao() {
		return this.impressoPrescricao;
	}

	public void setImpressoPrescricao(String impressoPrescricao) {
		this.impressoPrescricao = impressoPrescricao;
	}

	@Column(name = "SITUACAO", length = 1)
	@Length(max = 1)
	public String getSituacao() {
		return this.situacao;
	}

	public void setSituacao(String situacao) {
		this.situacao = situacao;
	}

	@Column(name = "CONCENTRACAO", precision = 17, scale = 17)
	public Double getConcentracao() {
		return this.concentracao;
	}

	public void setConcentracao(Double concentracao) {
		this.concentracao = concentracao;
	}

	@Column(name = "TEMPO_INFUSAO", length = 8)
	@Length(max = 8)
	public String getTempoInfusao() {
		return this.tempoInfusao;
	}

	public void setTempoInfusao(String tempoInfusao) {
		this.tempoInfusao = tempoInfusao;
	}

	@Column(name = "ESTABILIDADE", length = 30)
	@Length(max = 30)
	public String getEstabilidade() {
		return this.estabilidade;
	}

	public void setEstabilidade(String estabilidade) {
		this.estabilidade = estabilidade;
	}

	@Column(name = "INCOMPATIBILIDADES", length = 100)
	@Length(max = 100)
	public String getIncompatibilidades() {
		return this.incompatibilidades;
	}

	public void setIncompatibilidades(String incompatibilidades) {
		this.incompatibilidades = incompatibilidades;
	}

	@Column(name = "OBSERVACOES", length = 4000)
	@Length(max = 4000)
	public String getObservacoes() {
		return this.observacoes;
	}

	public void setObservacoes(String observacoes) {
		this.observacoes = observacoes;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 29)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Column(name = "UNIDADE", length = 15)
	@Length(max = 15)
	public String getUnidade() {
		return this.unidade;
	}

	public void setUnidade(String unidade) {
		this.unidade = unidade;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "eceKitComponente")
	public Set<EceMaterialEmpregado> getEceMaterialEmpregadoes() {
		return this.eceMaterialEmpregadoes;
	}

	public void setEceMaterialEmpregadoes(Set<EceMaterialEmpregado> eceMaterialEmpregadoes) {
		this.eceMaterialEmpregadoes = eceMaterialEmpregadoes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "eceKitComponente")
	public Set<EceKitComponente> getEceKitComponentees() {
		return this.eceKitComponentees;
	}

	public void setEceKitComponentees(Set<EceKitComponente> eceKitComponentees) {
		this.eceKitComponentees = eceKitComponentees;
	}

	public enum Fields {

		SEQ("seq"),
		VERSION("version"),
		FAT_PROCED_HOSP_INTERNOS("fatProcedHospInternos"),
		RAP_SERVIDORES("rapServidores"),
		ECE_KIT_COMPONENTES("eceKitComponente"),
		ECE_VIA_DO_KITS("eceViaDoKit"),
		ECE_KITS("eceKit"),
		QUANTIDADE("quantidade"),
		TIPO("tipo"),
		IMPRESSO_PRESCRICAO("impressoPrescricao"),
		SITUACAO("situacao"),
		CONCENTRACAO("concentracao"),
		TEMPO_INFUSAO("tempoInfusao"),
		ESTABILIDADE("estabilidade"),
		INCOMPATIBILIDADES("incompatibilidades"),
		OBSERVACOES("observacoes"),
		CRIADO_EM("criadoEm"),
		UNIDADE("unidade"),
		ECE_MATERIAL_EMPREGADOES("eceMaterialEmpregadoes"),
		ECE_KIT_COMPONENTEES("eceKitComponentees");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getSeq() == null) ? 0 : getSeq().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof EceKitComponente)) {
			return false;
		}
		EceKitComponente other = (EceKitComponente) obj;
		if (getSeq() == null) {
			if (other.getSeq() != null) {
				return false;
			}
		} else if (!getSeq().equals(other.getSeq())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
