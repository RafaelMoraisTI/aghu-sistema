package br.gov.mec.aghu.model;

// Generated 03/06/2011 16:09:49 by Hibernate Tools 3.4.0.CR1

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Version;


import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AelLoteExames generated by hbm2java
 */

@Entity
@Table(name = "AEL_LOTE_EXAMES", schema = "AGH")
public class AelLoteExame extends BaseEntityId<AelLoteExameId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7633868165924452618L;
	private AelLoteExameId id;
	private Integer version;
	private AelLoteExameUsual aelLoteExamesUsuais;
	private AelExamesMaterialAnalise examesMaterialAnalise;

	public AelLoteExame() {
	}

	public AelLoteExame(AelLoteExameId id,
			AelLoteExameUsual aelLoteExamesUsuais) {
		this.id = id;
		this.aelLoteExamesUsuais = aelLoteExamesUsuais;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "leuSeq", column = @Column(name = "LEU_SEQ", nullable = false)),
			@AttributeOverride(name = "emaExaSigla", column = @Column(name = "EMA_EXA_SIGLA", nullable = false, length = 5)),
			@AttributeOverride(name = "emaManSeq", column = @Column(name = "EMA_MAN_SEQ", nullable = false)) })
	public AelLoteExameId getId() {
		return this.id;
	}

	public void setId(AelLoteExameId id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "LEU_SEQ", nullable = false, insertable = false, updatable = false)
	public AelLoteExameUsual getAelLoteExamesUsuais() {
		return this.aelLoteExamesUsuais;
	}

	public void setAelLoteExamesUsuais(AelLoteExameUsual aelLoteExamesUsuais) {
		this.aelLoteExamesUsuais = aelLoteExamesUsuais;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
		@JoinColumn(name = "EMA_MAN_SEQ",referencedColumnName = "MAN_SEQ", nullable = false,insertable=false, updatable=false),
		@JoinColumn(name = "EMA_EXA_SIGLA",referencedColumnName = "EXA_SIGLA", nullable = false,insertable=false, updatable=false)})
	public AelExamesMaterialAnalise getExamesMaterialAnalise() {
		return examesMaterialAnalise;
	}

	public void setExamesMaterialAnalise(
			AelExamesMaterialAnalise examesMaterialAnalise) {
		this.examesMaterialAnalise = examesMaterialAnalise;
	}
	
	public enum Fields {
		LEUSEQ("id.leuSeq"), 
		EMA_EXA_SIGLA("id.emaExaSigla"), 
		EMA_MAN_SEQ("id.emaManSeq"), 
		EMA("examesMaterialAnalise"),
		EMA_EXA_NOME_USUAL("examesMaterialAnalise.aelExames.descricaoUsual");
		
		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}
		@Override
		public String toString() {
			return this.fields;
		}
	}	


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof AelLoteExame)) {
			return false;
		}
		AelLoteExame other = (AelLoteExame) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
