package br.gov.mec.aghu.model;

// Generated 09/04/2012 16:32:53 by Hibernate Tools 3.4.0.CR1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;


import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import br.gov.mec.aghu.core.persistence.BaseEntitySeq;

/**
 * MamImagemAnamnese generated by hbm2java
 */
@Entity
@Table(name = "MAM_IMAGEM_ANAMNESES", schema = "AGH")
public class MamImagemAnamnese extends BaseEntitySeq<Long> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8863748263048325222L;
	private Long fanSeq;
	private Integer version;
	private MamFiguraAnamnese mamFiguraAnamnese;
	private byte[] imagem;

	public MamImagemAnamnese() {
	}

	public MamImagemAnamnese(MamFiguraAnamnese mamFiguraAnamnese, byte[] imagem) {
		this.mamFiguraAnamnese = mamFiguraAnamnese;
		this.imagem = imagem;
	}

	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "mamFiguraAnamnese"))
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "FAN_SEQ", unique = true, nullable = false)
	public Long getFanSeq() {
		return this.fanSeq;
	}

	public void setFanSeq(Long fanSeq) {
		this.fanSeq = fanSeq;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public MamFiguraAnamnese getMamFiguraAnamnese() {
		return this.mamFiguraAnamnese;
	}

	public void setMamFiguraAnamnese(MamFiguraAnamnese mamFiguraAnamnese) {
		this.mamFiguraAnamnese = mamFiguraAnamnese;
	}

	@Column(name = "IMAGEM", nullable = false)
	public byte[] getImagem() {
		return this.imagem;
	}

	public void setImagem(byte[] imagem) {
		this.imagem = imagem;
	}

	public enum Fields {

		FAN_SEQ("fanSeq"),
		VERSION("version"),
		MAM_FIGURA_ANAMNESES("mamFiguraAnamnese"),
		IMAGEM("imagem");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getFanSeq() == null) ? 0 : getFanSeq().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MamImagemAnamnese)) {
			return false;
		}
		MamImagemAnamnese other = (MamImagemAnamnese) obj;
		if (getFanSeq() == null) {
			if (other.getFanSeq() != null) {
				return false;
			}
		} else if (!getFanSeq().equals(other.getFanSeq())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####
 
 @Transient public Long getSeq(){ return this.getFanSeq();} 
 public void setSeq(Long seq){ this.setFanSeq(seq);}
}
