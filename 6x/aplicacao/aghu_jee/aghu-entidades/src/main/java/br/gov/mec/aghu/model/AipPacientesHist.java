package br.gov.mec.aghu.model;

// Generated 10/02/2010 11:06:00 by Hibernate Tools 3.2.5.Beta

import java.math.BigInteger;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.Version;


import org.hibernate.annotations.Parameter;
import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioCor;
import br.gov.mec.aghu.dominio.DominioEstadoCivil;
import br.gov.mec.aghu.dominio.DominioGrauInstrucao;
import br.gov.mec.aghu.dominio.DominioSexo;
import br.gov.mec.aghu.dominio.DominioSimNao;
import br.gov.mec.aghu.dominio.DominioTipoDataObito;
import br.gov.mec.aghu.dominio.DominioTipoProntuario;
import br.gov.mec.aghu.core.persistence.BaseEntityCodigo;

/**
 * AipPacientesHist generated by hbm2java
 */
@SuppressWarnings({"PMD.AghuUsoIndevidoDaEnumDominioSimNaoEntity"})
@Entity
@Table(name = "AIP_PACIENTES_HIST", schema = "AGH")
public class AipPacientesHist extends BaseEntityCodigo<Integer> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6556529568322008836L;
	private Integer codigo;
	private FccCentroCustos centroCusto; // cctCodigoCadastro;
	private RapServidores servidor; // serMatriculaCadastro,
									// serVinCodigoCadastro
	private String nome;
	private String nomeMae;
	private Date dtNascimento;
	private Date dtIdentificacao;
	private FccCentroCustos centroCustoRecadastro; // cctCodigoRecadastro
	private AipCidades cidade; // cddCodigo
	private AipNacionalidades nacionalidade; // nacCodigo
	private AipOcupacoes ocupacao; // ocpCodigo
	private AipUfs uf; // ufSigla
	private RapServidores servidorRecadastro; // serMatriculaRecadastro,
												// serVinCodigoRecadastro
	private DominioCor cor;
	private DominioSexo sexo;
	private DominioGrauInstrucao grauInstrucao;
	private String nomePai;
	private String naturalidade;
	private Short dddFoneResidencial;
	private Long foneResidencial;
	private Short dddFoneRecado;
	private String foneRecado;
	private DominioEstadoCivil estadoCivil;
	private Long cpf;
	private Integer prontuario;
	private Date dtObito;
	private String rg;
	private String orgaoEmisRg;
	private String observacao;
	private DominioTipoProntuario prntAtivo;
	private DominioSimNao cadConfirmado;
	private DominioSimNao indGeraProntuario;
	private Date dtUltInternacao;
	private Date dtUltAlta;
	private Date dtUltConsulta;
	private Date dtUltProcedimento;
	private Date dtUltAtendHospDia;
	private Date dtUltAltaHospDia;
	private AinQuartos quarto; // qrtNumero
	private AghUnidadesFuncionais unidadeFuncional; // unfSeq
	private AinLeitos leito; // ltoLtoId
	private String regNascimento;
	private BigInteger nroCartaoSaude;
	private Date dtRecadastro;
	private DominioSimNao indPacienteVip;
	private AipPacientes pacienteMae; // pacCodigoMae
	private DominioTipoDataObito tipoDataObito;
	private Date dtObitoExterno;
	private McoRecemNascidos recemNascido;
	private Long numeroPis;
	private Short volumes;
	private DominioSimNao indPacProtegido;
	private Date criadoEm;
	private DominioSexo sexoBiologico;
	private DominioSimNao indPacAgfa;
	private Integer version;
	private Integer idade;
	private AipEtnia etnia;

	public AipPacientesHist() {
	}

	public AipPacientesHist(Integer codigo, FccCentroCustos centroCusto,
			RapServidores servidor, String nome, String nomeMae,
			Date dtNascimento, Date dtIdentificacao,
			DominioSimNao cadConfirmado, DominioSimNao indGeraProntuario) {
		this.codigo = codigo;
		this.centroCusto = centroCusto;
		this.servidor = servidor;
		this.nome = nome;
		this.nomeMae = nomeMae;
		this.dtNascimento = dtNascimento;
		this.dtIdentificacao = dtIdentificacao;
		this.cadConfirmado = cadConfirmado;
		this.indGeraProntuario = indGeraProntuario;
	}

	@SuppressWarnings({"PMD.ExcessiveParameterList"})
	public AipPacientesHist(Integer codigo, FccCentroCustos centroCusto,
			RapServidores servidor, String nome, String nomeMae,
			Date dtNascimento, Date dtIdentificacao,
			FccCentroCustos centroCustoRecadastro, AipCidades cidade,
			AipNacionalidades nacionalidade, AipOcupacoes ocupacao, AipUfs uf,
			RapServidores servidorRecadastro, DominioCor cor, DominioSexo sexo,
			DominioGrauInstrucao grauInstrucao, String nomePai,
			String naturalidade, Short dddFoneResidencial,
			Long foneResidencial, Short dddFoneRecado, String foneRecado,
			DominioEstadoCivil estadoCivil, Long cpf, Integer prontuario,
			Date dtObito, String rg, String orgaoEmisRg, String observacao,
			DominioTipoProntuario prntAtivo, DominioSimNao cadConfirmado,
			DominioSimNao indGeraProntuario, Date dtUltInternacao,
			Date dtUltAlta, Date dtUltConsulta, Date dtUltProcedimento,
			Date dtUltAtendHospDia, Date dtUltAltaHospDia, AinQuartos quarto,
			AghUnidadesFuncionais unidadeFuncional, AinLeitos leito,
			String regNascimento, BigInteger nroCartaoSaude,
			Date dtRecadastro, DominioSimNao indPacienteVip,
			AipPacientes pacienteMae, DominioTipoDataObito tipoDataObito,
			Date dtObitoExterno, McoRecemNascidos recemNascido, Short rnaGsoSeqp,
			Byte rnaSeqp, Long numeroPis, Short volumes,
			DominioSimNao indPacProtegido, Date criadoEm,
			DominioSexo sexoBiologico, DominioSimNao indPacAgfa) {
		this.codigo = codigo;
		this.centroCusto = centroCusto;
		this.servidor = servidor;
		this.nome = nome;
		this.nomeMae = nomeMae;
		this.dtNascimento = dtNascimento;
		this.dtIdentificacao = dtIdentificacao;
		this.centroCustoRecadastro = centroCustoRecadastro;
		this.cidade = cidade;
		this.nacionalidade = nacionalidade;
		this.ocupacao = ocupacao;
		this.uf = uf;
		this.servidorRecadastro = servidorRecadastro;
		this.cor = cor;
		this.sexo = sexo;
		this.grauInstrucao = grauInstrucao;
		this.nomePai = nomePai;
		this.naturalidade = naturalidade;
		this.dddFoneResidencial = dddFoneResidencial;
		this.foneResidencial = foneResidencial;
		this.dddFoneRecado = dddFoneRecado;
		this.foneRecado = foneRecado;
		this.estadoCivil = estadoCivil;
		this.cpf = cpf;
		this.prontuario = prontuario;
		this.dtObito = dtObito;
		this.rg = rg;
		this.orgaoEmisRg = orgaoEmisRg;
		this.observacao = observacao;
		this.prntAtivo = prntAtivo;
		this.cadConfirmado = cadConfirmado;
		this.indGeraProntuario = indGeraProntuario;
		this.dtUltInternacao = dtUltInternacao;
		this.dtUltAlta = dtUltAlta;
		this.dtUltConsulta = dtUltConsulta;
		this.dtUltProcedimento = dtUltProcedimento;
		this.dtUltAtendHospDia = dtUltAtendHospDia;
		this.dtUltAltaHospDia = dtUltAltaHospDia;
		this.quarto = quarto;
		this.unidadeFuncional = unidadeFuncional;
		this.leito = leito;
		this.regNascimento = regNascimento;
		this.nroCartaoSaude = nroCartaoSaude;
		this.dtRecadastro = dtRecadastro;
		this.indPacienteVip = indPacienteVip;
		this.pacienteMae = pacienteMae;
		this.tipoDataObito = tipoDataObito;
		this.dtObitoExterno = dtObitoExterno;
		this.recemNascido = recemNascido;
		this.numeroPis = numeroPis;
		this.volumes = volumes;
		this.indPacProtegido = indPacProtegido;
		this.criadoEm = criadoEm;
		this.sexoBiologico = sexoBiologico;
		this.indPacAgfa = indPacAgfa;
	}

	@Id
	@Column(name = "CODIGO", nullable = false, precision = 8, scale = 0)
	public Integer getCodigo() {
		return this.codigo;
	}

	public void setCodigo(Integer codigo) {
		this.codigo = codigo;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CCT_CODIGO_CADASTRO", nullable = false)
	public FccCentroCustos getCentroCusto() {
		return this.centroCusto;
	}

	public void setCentroCusto(FccCentroCustos centroCusto) {
		this.centroCusto = centroCusto;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA_CADASTRO", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO_CADASTRO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidor() {
		return this.servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}

	@Column(name = "NOME", nullable = false, length = 50)
	@Length(max = 50)
	public String getNome() {
		return this.nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	@Column(name = "NOME_MAE", nullable = false, length = 50)
	@Length(max = 50)
	public String getNomeMae() {
		return this.nomeMae;
	}

	public void setNomeMae(String nomeMae) {
		this.nomeMae = nomeMae;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_NASCIMENTO", nullable = false)
	public Date getDtNascimento() {
		return this.dtNascimento;
	}

	public void setDtNascimento(Date dtNascimento) {
		this.dtNascimento = dtNascimento;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_IDENTIFICACAO", nullable = false)
	public Date getDtIdentificacao() {
		return this.dtIdentificacao;
	}

	public void setDtIdentificacao(Date dtIdentificacao) {
		this.dtIdentificacao = dtIdentificacao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CCT_CODIGO_RECADASTRO")
	public FccCentroCustos getCentroCustoRecadastro() {
		return this.centroCustoRecadastro;
	}

	public void setCentroCustoRecadastro(FccCentroCustos centroCustoRecadastro) {
		this.centroCustoRecadastro = centroCustoRecadastro;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CDD_CODIGO")
	public AipCidades getCidade() {
		return this.cidade;
	}

	public void setCidade(AipCidades cidade) {
		this.cidade = cidade;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "NAC_CODIGO")
	public AipNacionalidades getNacionalidade() {
		return this.nacionalidade;
	}

	public void setNacionalidade(AipNacionalidades nacionalidade) {
		this.nacionalidade = nacionalidade;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "OCP_CODIGO")
	public AipOcupacoes getOcupacao() {
		return this.ocupacao;
	}

	public void setOcupacao(AipOcupacoes ocupacao) {
		this.ocupacao = ocupacao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UF_SIGLA")
	public AipUfs getUf() {
		return this.uf;
	}

	public void setUf(AipUfs uf) {
		this.uf = uf;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA_RECADASTRO", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO_RECADASTRO", referencedColumnName = "VIN_CODIGO") })
	public RapServidores getServidorRecadastro() {
		return this.servidorRecadastro;
	}

	public void setServidorRecadastro(RapServidores servidorRecadastro) {
		this.servidorRecadastro = servidorRecadastro;
	}

	@Column(name = "COR", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioCor getCor() {
		return this.cor;
	}

	public void setCor(DominioCor cor) {
		this.cor = cor;
	}

	@Column(name = "SEXO", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSexo getSexo() {
		return this.sexo;
	}

	public void setSexo(DominioSexo sexo) {
		this.sexo = sexo;
	}

	@Column(name = "GRAU_INSTRUCAO", precision = 1, scale = 0)
	@org.hibernate.annotations.Type(parameters = { @Parameter(name = "enumClassName", value = "br.gov.mec.aghu.dominio.DominioGrauInstrucao") }, type = "br.gov.mec.aghu.core.model.jpa.DominioUserType")
	public DominioGrauInstrucao getGrauInstrucao() {
		return this.grauInstrucao;
	}

	public void setGrauInstrucao(DominioGrauInstrucao grauInstrucao) {
		this.grauInstrucao = grauInstrucao;
	}

	@Column(name = "NOME_PAI", length = 50)
	@Length(max = 50)
	public String getNomePai() {
		return this.nomePai;
	}

	public void setNomePai(String nomePai) {
		this.nomePai = nomePai;
	}

	@Column(name = "NATURALIDADE", length = 40)
	@Length(max = 40)
	public String getNaturalidade() {
		return this.naturalidade;
	}

	public void setNaturalidade(String naturalidade) {
		this.naturalidade = naturalidade;
	}

	@Column(name = "DDD_FONE_RESIDENCIAL", precision = 4, scale = 0)
	public Short getDddFoneResidencial() {
		return this.dddFoneResidencial;
	}

	public void setDddFoneResidencial(Short dddFoneResidencial) {
		this.dddFoneResidencial = dddFoneResidencial;
	}

	@Column(name = "FONE_RESIDENCIAL", precision = 10, scale = 0)
	public Long getFoneResidencial() {
		return this.foneResidencial;
	}

	public void setFoneResidencial(Long foneResidencial) {
		this.foneResidencial = foneResidencial;
	}

	@Column(name = "DDD_FONE_RECADO", precision = 4, scale = 0)
	public Short getDddFoneRecado() {
		return this.dddFoneRecado;
	}

	public void setDddFoneRecado(Short dddFoneRecado) {
		this.dddFoneRecado = dddFoneRecado;
	}

	@Column(name = "FONE_RECADO", length = 15)
	@Length(max = 15)
	public String getFoneRecado() {
		return this.foneRecado;
	}

	public void setFoneRecado(String foneRecado) {
		this.foneRecado = foneRecado;
	}

	@Column(name = "ESTADO_CIVIL", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioEstadoCivil getEstadoCivil() {
		return this.estadoCivil;
	}

	public void setEstadoCivil(DominioEstadoCivil estadoCivil) {
		this.estadoCivil = estadoCivil;
	}

	@Column(name = "CPF", precision = 11, scale = 0)
	public Long getCpf() {
		return this.cpf;
	}

	public void setCpf(Long cpf) {
		this.cpf = cpf;
	}

	@Column(name = "PRONTUARIO", unique = true, precision = 8, scale = 0)
	// TODO encontrar outra foram de fazer esta validacao @Prontuario. NAO criar dependencia externa a model.
	public Integer getProntuario() {
		return this.prontuario;
	}

	public void setProntuario(Integer prontuario) {
		this.prontuario = prontuario;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_OBITO")
	public Date getDtObito() {
		return this.dtObito;
	}

	public void setDtObito(Date dtObito) {
		this.dtObito = dtObito;
	}

	@Column(name = "RG", length = 20)
	public String getRg() {
		return this.rg;
	}

	public void setRg(String rg) {
		this.rg = rg;
	}

	@Column(name = "ORGAO_EMIS_RG", length = 10)
	@Length(max = 10)
	public String getOrgaoEmisRg() {
		return this.orgaoEmisRg;
	}

	public void setOrgaoEmisRg(String orgaoEmisRg) {
		this.orgaoEmisRg = orgaoEmisRg;
	}

	@Column(name = "OBSERVACAO", length = 240)
	@Length(max = 240)
	public String getObservacao() {
		return this.observacao;
	}

	public void setObservacao(String observacao) {
		this.observacao = observacao;
	}

	@Column(name = "PRNT_ATIVO", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioTipoProntuario getPrntAtivo() {
		return this.prntAtivo;
	}

	public void setPrntAtivo(DominioTipoProntuario prntAtivo) {
		this.prntAtivo = prntAtivo;
	}

	@Column(name = "CAD_CONFIRMADO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getCadConfirmado() {
		return this.cadConfirmado;
	}

	public void setCadConfirmado(DominioSimNao cadConfirmado) {
		this.cadConfirmado = cadConfirmado;
	}

	@Column(name = "IND_GERA_PRONTUARIO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndGeraProntuario() {
		return this.indGeraProntuario;
	}

	public void setIndGeraProntuario(DominioSimNao indGeraProntuario) {
		this.indGeraProntuario = indGeraProntuario;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_ULT_INTERNACAO")
	public Date getDtUltInternacao() {
		return this.dtUltInternacao;
	}

	public void setDtUltInternacao(Date dtUltInternacao) {
		this.dtUltInternacao = dtUltInternacao;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_ULT_ALTA")
	public Date getDtUltAlta() {
		return this.dtUltAlta;
	}

	public void setDtUltAlta(Date dtUltAlta) {
		this.dtUltAlta = dtUltAlta;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_ULT_CONSULTA")
	public Date getDtUltConsulta() {
		return this.dtUltConsulta;
	}

	public void setDtUltConsulta(Date dtUltConsulta) {
		this.dtUltConsulta = dtUltConsulta;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_ULT_PROCEDIMENTO")
	public Date getDtUltProcedimento() {
		return this.dtUltProcedimento;
	}

	public void setDtUltProcedimento(Date dtUltProcedimento) {
		this.dtUltProcedimento = dtUltProcedimento;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_ULT_ATEND_HOSP_DIA")
	public Date getDtUltAtendHospDia() {
		return this.dtUltAtendHospDia;
	}

	public void setDtUltAtendHospDia(Date dtUltAtendHospDia) {
		this.dtUltAtendHospDia = dtUltAtendHospDia;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_ULT_ALTA_HOSP_DIA")
	public Date getDtUltAltaHospDia() {
		return this.dtUltAltaHospDia;
	}

	public void setDtUltAltaHospDia(Date dtUltAltaHospDia) {
		this.dtUltAltaHospDia = dtUltAltaHospDia;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "QRT_NUMERO")
	public AinQuartos getQuarto() {
		return this.quarto;
	}

	public void setQuarto(AinQuartos quarto) {
		this.quarto = quarto;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UNF_SEQ")
	public AghUnidadesFuncionais getUnidadeFuncional() {
		return this.unidadeFuncional;
	}

	public void setUnidadeFuncional(AghUnidadesFuncionais unidadeFuncional) {
		this.unidadeFuncional = unidadeFuncional;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "LTO_LTO_ID")
	public AinLeitos getLeito() {
		return this.leito;
	}

	public void setLeito(AinLeitos leito) {
		this.leito = leito;
	}

	@Column(name = "REG_NASCIMENTO")
	public String getRegNascimento() {
		return this.regNascimento;
	}

	public void setRegNascimento(String regNascimento) {
		this.regNascimento = regNascimento;
	}

	@Column(name = "NRO_CARTAO_SAUDE")
	public BigInteger getNroCartaoSaude() {
		return this.nroCartaoSaude;
	}

	public void setNroCartaoSaude(BigInteger nroCartaoSaude) {
		this.nroCartaoSaude = nroCartaoSaude;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_RECADASTRO")
	public Date getDtRecadastro() {
		return this.dtRecadastro;
	}

	public void setDtRecadastro(Date dtRecadastro) {
		this.dtRecadastro = dtRecadastro;
	}

	@Column(name = "IND_PACIENTE_VIP", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndPacienteVip() {
		return this.indPacienteVip;
	}

	public void setIndPacienteVip(DominioSimNao indPacienteVip) {
		this.indPacienteVip = indPacienteVip;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	// mais de um filho da mesma mãe pode ser atendido no hospital
	@JoinColumn(name = "PAC_CODIGO_MAE")
	public AipPacientes getPacienteMae() {
		return this.pacienteMae;
	}

	public void setPacienteMae(AipPacientes pacienteMae) {
		this.pacienteMae = pacienteMae;
	}

	@Column(name = "TIPO_DATA_OBITO", length = 3)
	@Enumerated(EnumType.STRING)
	public DominioTipoDataObito getTipoDataObito() {
		return this.tipoDataObito;
	}

	public void setTipoDataObito(DominioTipoDataObito tipoDataObito) {
		this.tipoDataObito = tipoDataObito;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_OBITO_EXTERNO")
	public Date getDtObitoExterno() {
		return this.dtObitoExterno;
	}

	public void setDtObitoExterno(Date dtObitoExterno) {
		this.dtObitoExterno = dtObitoExterno;
	}

	@OneToOne(fetch = FetchType.LAZY, cascade=CascadeType.REMOVE)
	@JoinColumns( {
			@JoinColumn(name = "RNA_GSO_PAC_CODIGO", referencedColumnName = "GSO_PAC_CODIGO"),
			@JoinColumn(name = "RNA_GSO_SEQP", referencedColumnName = "GSO_SEQP"),
			@JoinColumn(name = "RNA_SEQP", referencedColumnName = "SEQP") })	
	public McoRecemNascidos getRecemNascido() {
		return recemNascido;
	}

	public void setRecemNascido(McoRecemNascidos recemNascido) {
		this.recemNascido = recemNascido;
	}

	@Column(name = "NUMERO_PIS", precision = 15, scale = 0)
	public Long getNumeroPis() {
		return this.numeroPis;
	}

	public void setNumeroPis(Long numeroPis) {
		this.numeroPis = numeroPis;
	}

	@Column(name = "VOLUMES", precision = 3, scale = 0)
	public Short getVolumes() {
		return this.volumes;
	}

	public void setVolumes(Short volumes) {
		this.volumes = volumes;
	}

	@Column(name = "IND_PAC_PROTEGIDO", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndPacProtegido() {
		return this.indPacProtegido;
	}

	public void setIndPacProtegido(DominioSimNao indPacProtegido) {
		this.indPacProtegido = indPacProtegido;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM")
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Column(name = "SEXO_BIOLOGICO", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSexo getSexoBiologico() {
		return this.sexoBiologico;
	}

	public void setSexoBiologico(DominioSexo sexoBiologico) {
		this.sexoBiologico = sexoBiologico;
	}

	@Column(name = "IND_PAC_AGFA", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndPacAgfa() {
		return this.indPacAgfa;
	}

	public void setIndPacAgfa(DominioSimNao indPacAgfa) {
		this.indPacAgfa = indPacAgfa;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}
	
	public enum Fields {
		CODIGO("codigo"), PRONTUARIO("prontuario"), PRNT_ATIVO("prntAtivo"), NOME(
				"nome");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return fields;
		}
	}
	
	/**
	 * Campo sintÃ©tico criado para calcular e exibir em tela a idade atual do
	 * paciente conforme sua data de nascimento
	 * 
	 * @return
	 */
	@Transient
	public Integer getIdade() {
		// Cria um objeto calendar com a data atual
		Calendar today = Calendar.getInstance();
		return this.getIdade(today.getTime());
	}

	/**
	 * Campo sintÃ©tico criado para calcular a idade do paciente em uma
	 * determinada data, conforme sua data de nascimento
	 * 
	 * @return
	 */
	@Transient
	public Integer getIdade(Date data) {
		if (this.getDtNascimento() != null) {
			Calendar dataNascimento = new GregorianCalendar();
			dataNascimento.setTime(this.getDtNascimento());
			Calendar dataCalendario = new GregorianCalendar();
			dataCalendario.setTime(data);
			// ObtÃ©m a idade baseado no ano
			this.idade = dataCalendario.get(Calendar.YEAR)
					- dataNascimento.get(Calendar.YEAR);
			dataNascimento.add(Calendar.YEAR, this.idade);
			// se a data de hoje Ã© antes da data de Nascimento, entÃ£o diminui
			// 1(um)
			if (dataCalendario.before(dataNascimento)) {
				this.idade--;
			}
		}

		return this.idade;
	}

	public void setIdade(Integer idade) {
		this.idade = idade;
	}

	@Transient
	public String getIdadeFormat() {
		String tempo = "anos";
		String idadeFormat = null;
		if (this.getDtNascimento() != null) {
			Calendar dataNascimento = new GregorianCalendar();
			dataNascimento.setTime(this.getDtNascimento());
			Calendar dataCalendario = new GregorianCalendar();
			dataCalendario.setTime(new Date());
			// ObtÃ©m a idade baseado no ano
			Integer idadeNum = dataCalendario.get(Calendar.YEAR)
					- dataNascimento.get(Calendar.YEAR);
			// dataNascimento.add(Calendar.YEAR, idadeNum);

			if (dataCalendario.get(Calendar.MONTH) < dataNascimento
					.get(Calendar.MONTH)) {
				idadeNum--;
			} else if (dataCalendario.get(Calendar.MONTH) == dataNascimento
					.get(Calendar.MONTH)
					&& dataCalendario.get(Calendar.DAY_OF_MONTH) < dataNascimento
							.get(Calendar.DAY_OF_MONTH)) {
				idadeNum--;
			}

			if (idadeNum == 1) {
				tempo = "ano";
			}
			if (idadeNum < 1) {
				if (dataCalendario.get(Calendar.MONTH) < dataNascimento
						.get(Calendar.MONTH)) {
					idadeNum = dataCalendario.get(Calendar.MONTH)
							+ (12 - dataNascimento.get(Calendar.MONTH));
				} else {
					idadeNum = dataCalendario.get(Calendar.MONTH)
							- dataNascimento.get(Calendar.MONTH);
					if (dataCalendario.get(Calendar.DAY_OF_MONTH) < dataNascimento
							.get(Calendar.DAY_OF_MONTH)) {
						idadeNum--;
					}
				}
				if (idadeNum == 1) {
					tempo = "mÃªs";
				} else {
					tempo = "meses";
				}

				if (idadeNum < 1) {
					if (dataCalendario.get(Calendar.DAY_OF_MONTH) < dataNascimento
							.get(Calendar.DAY_OF_MONTH)) {
						Integer lastDayMonth = dataNascimento
								.getActualMaximum(Calendar.DAY_OF_MONTH);
						idadeNum = (lastDayMonth - dataNascimento
								.get(Calendar.DAY_OF_MONTH))
								+ dataCalendario.get(Calendar.DAY_OF_MONTH);
					} else {
						idadeNum = dataCalendario.get(Calendar.DAY_OF_MONTH)
								- dataNascimento.get(Calendar.DAY_OF_MONTH);
					}

					// Soma 1 para dias(de acordo com ORADB AIPC_IDADE_ANO_MES)
					idadeNum++;
					if (idadeNum == 1) {
						tempo = "dia";
					} else {
						tempo = "dias";
					}
				}

			}
			idadeFormat = idadeNum + " " + tempo;
		}

		return idadeFormat;
	}
	
	@Transient
	public String getIdadeAnoMesFormat() {
		String tempo = "anos";
		String tempoMes = "meses";
		Integer idadeMes = null;
		String idadeFormat = null;
		if (this.getDtNascimento() != null) {
			Calendar dataNascimento = new GregorianCalendar();
			dataNascimento.setTime(this.getDtNascimento());
			Calendar dataCalendario = new GregorianCalendar();
			dataCalendario.setTime(new Date());
			// ObtÃ©m a idade baseado no ano
			Integer idadeNum = dataCalendario.get(Calendar.YEAR)
					- dataNascimento.get(Calendar.YEAR);
			// dataNascimento.add(Calendar.YEAR, idadeNum);

			if (dataCalendario.get(Calendar.MONTH) < dataNascimento
					.get(Calendar.MONTH)) {
				idadeNum--;
			} else if (dataCalendario.get(Calendar.MONTH) == dataNascimento
					.get(Calendar.MONTH)
					&& dataCalendario.get(Calendar.DAY_OF_MONTH) < dataNascimento
							.get(Calendar.DAY_OF_MONTH)) {
				idadeNum--;
			}

			if (idadeNum == 1) {
				tempo = "ano";
			}
			
			if (dataCalendario.get(Calendar.MONTH) < dataNascimento
					.get(Calendar.MONTH)) {
				idadeMes = dataCalendario.get(Calendar.MONTH)
						+ (12 - dataNascimento.get(Calendar.MONTH));
			} else {
				idadeMes = dataCalendario.get(Calendar.MONTH)
						- dataNascimento.get(Calendar.MONTH);
				if (dataCalendario.get(Calendar.DAY_OF_MONTH) < dataNascimento
						.get(Calendar.DAY_OF_MONTH)) {
					idadeMes--;
				}
			}
			
			if(idadeMes<0){
				if (12+(idadeMes) == 1) {
					tempoMes = 12+(idadeMes) + " mÃªs";
				} else {
					tempoMes = 12+(idadeMes) + " meses";
				}	
			}else{
				if (idadeMes == 1) {
					tempoMes = idadeMes + " mÃªs";
				} else {
					tempoMes = idadeMes + " meses";
				}
			}

			
			idadeFormat = idadeNum + " " + tempo + " " + tempoMes;
		}

		return idadeFormat;
	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getCodigo() == null) ? 0 : getCodigo().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof AipPacientesHist)) {
			return false;
		}
		AipPacientesHist other = (AipPacientesHist) obj;
		if (getCodigo() == null) {
			if (other.getCodigo() != null) {
				return false;
			}
		} else if (!getCodigo().equals(other.getCodigo())) {
			return false;
		}
		return true;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ETN_ID", nullable = true)
	public AipEtnia getEtnia() {
		return etnia;
	}
	
	public void setEtnia(AipEtnia etnia) {
		this.etnia = etnia;
	}	
	
	// ##### GeradorEqualsHashCodeMain #####

}
