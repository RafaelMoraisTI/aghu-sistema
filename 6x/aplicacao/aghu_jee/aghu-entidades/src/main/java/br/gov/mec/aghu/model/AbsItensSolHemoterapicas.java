package br.gov.mec.aghu.model;

// Generated 21/09/2010 19:23:57 by Hibernate Tools 3.2.5.Beta

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.Version;


import br.gov.mec.aghu.model.interfaces.IItemPrescricaoMedica;
import br.gov.mec.aghu.core.exception.BaseRuntimeException;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AbsItensSolHemoterapicas generated by hbm2java
 */

@Entity
@Table(name = "ABS_ITENS_SOL_HEMOTERAPICAS", schema = "AGH")
public class AbsItensSolHemoterapicas extends BaseEntityId<AbsItensSolHemoterapicasId> implements Serializable, IItemPrescricaoMedica {

	/**
	 * 
	 */
	private static final long serialVersionUID = 318643691299685148L;
	private AbsItensSolHemoterapicasId id;
	private AbsSolicitacoesHemoterapicas solicitacaoHemoterapica;
	private AbsProcedHemoterapico procedHemoterapico;
	private AbsComponenteSanguineo componenteSanguineo;
	private MpmTipoFrequenciaAprazamento tipoFreqAprazamento;
	private Boolean indIrradiado;
	private Boolean indFiltrado;
	private Boolean indLavado;
	private Short frequencia;
	private Short qtdeAplicacoes;
	private Byte qtdeUnidades;
	private Short qtdeMl;
	private Date dthrExecProcedimento;
	private Date dthrDigtExecucao;
	private RapServidores servidor;
	private Boolean indImprLaudo;
	private Boolean indAferese;
	
	private Integer version;
	
	private List<AbsItemSolicitacaoHemoterapicaJustificativa> itemSolicitacaoHemoterapicaJustificativas = new ArrayList<AbsItemSolicitacaoHemoterapicaJustificativa>(0);
	
	private List<MpaUsoOrdItemHemoters> usoOrdItemHemoters = new ArrayList<MpaUsoOrdItemHemoters>(0);

	public AbsItensSolHemoterapicas() {
	}

	public AbsItensSolHemoterapicas(AbsItensSolHemoterapicasId id,
			AbsSolicitacoesHemoterapicas absSolicitacoesHemoterapicas,
			Boolean indIrradiado, Boolean indFiltrado, Boolean indLavado,
			Boolean indImprLaudo, Boolean indAferese) {
		this.id = id;
		this.solicitacaoHemoterapica = absSolicitacoesHemoterapicas;
		this.indIrradiado = indIrradiado;
		this.indFiltrado = indFiltrado;
		this.indLavado = indLavado;
		this.indImprLaudo = indImprLaudo;
		this.indAferese = indAferese;
	}

	public AbsItensSolHemoterapicas(AbsItensSolHemoterapicasId id,
			AbsSolicitacoesHemoterapicas absSolicitacoesHemoterapicas,
			AbsProcedHemoterapico absProcedHemoterapicos,
			AbsComponenteSanguineo absComponentesSanguineos,
			Boolean indIrradiado, Boolean indFiltrado, Boolean indLavado,
			Short frequencia, MpmTipoFrequenciaAprazamento mpmTipoFreqAprazamentos,
			Short qtdeAplicacoes, Byte qtdeUnidades, Short qtdeMl,
			Date dthrExecProcedimento, Date dthrDigtExecucao,
			RapServidores servidor, Boolean indImprLaudo, Boolean indAferese) {
		this.id = id;
		this.solicitacaoHemoterapica = absSolicitacoesHemoterapicas;
		this.procedHemoterapico = absProcedHemoterapicos;
		this.componenteSanguineo = absComponentesSanguineos;
		this.indIrradiado = indIrradiado;
		this.indFiltrado = indFiltrado;
		this.indLavado = indLavado;
		this.frequencia = frequencia;
		this.tipoFreqAprazamento = mpmTipoFreqAprazamentos;
		this.qtdeAplicacoes = qtdeAplicacoes;
		this.qtdeUnidades = qtdeUnidades;
		this.qtdeMl = qtdeMl;
		this.dthrExecProcedimento = dthrExecProcedimento;
		this.dthrDigtExecucao = dthrDigtExecucao;
		this.servidor = servidor;
		this.indImprLaudo = indImprLaudo;
		this.indAferese = indAferese;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "sheAtdSeq", column = @Column(name = "SHE_ATD_SEQ", nullable = false, precision = 7, scale = 0)),
			@AttributeOverride(name = "sheSeq", column = @Column(name = "SHE_SEQ", nullable = false, precision = 8, scale = 0)),
			@AttributeOverride(name = "sequencia", column = @Column(name = "SEQUENCIA", nullable = false, precision = 3, scale = 0)) })
	public AbsItensSolHemoterapicasId getId() {
		return this.id;
	}

	public void setId(AbsItensSolHemoterapicasId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SHE_ATD_SEQ", referencedColumnName = "ATD_SEQ", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "SHE_SEQ", referencedColumnName = "SEQ", nullable = false, insertable = false, updatable = false) })
	public AbsSolicitacoesHemoterapicas getSolicitacaoHemoterapica() {
		return this.solicitacaoHemoterapica;
	}

	public void setSolicitacaoHemoterapica(
			AbsSolicitacoesHemoterapicas absSolicitacoesHemoterapicas) {
		this.solicitacaoHemoterapica = absSolicitacoesHemoterapicas;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PHE_CODIGO")
	public AbsProcedHemoterapico getProcedHemoterapico() {
		return this.procedHemoterapico;
	}

	public void setProcedHemoterapico(
			AbsProcedHemoterapico absProcedHemoterapicos) {
		this.procedHemoterapico = absProcedHemoterapicos;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CSA_CODIGO")
	public AbsComponenteSanguineo getComponenteSanguineo() {
		return this.componenteSanguineo;
	}

	public void setComponenteSanguineo(
			AbsComponenteSanguineo absComponentesSanguineos) {
		this.componenteSanguineo = absComponentesSanguineos;
	}

	@Column(name = "IND_IRRADIADO", nullable = false, length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndIrradiado() {
		return this.indIrradiado;
	}

	public void setIndIrradiado(Boolean indIrradiado) {
		this.indIrradiado = indIrradiado;
	}

	@Column(name = "IND_FILTRADO", nullable = false, length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndFiltrado() {
		return this.indFiltrado;
	}

	public void setIndFiltrado(Boolean indFiltrado) {
		this.indFiltrado = indFiltrado;
	}

	@Column(name = "IND_LAVADO", nullable = false, length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndLavado() {
		return this.indLavado;
	}

	public void setIndLavado(Boolean indLavado) {
		this.indLavado = indLavado;
	}

	@Column(name = "FREQUENCIA", precision = 3, scale = 0)
	public Short getFrequencia() {
		return this.frequencia;
	}

	public void setFrequencia(Short frequencia) {
		this.frequencia = frequencia;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TFQ_SEQ")
	public MpmTipoFrequenciaAprazamento getTipoFreqAprazamento() {
		return tipoFreqAprazamento;
	}

	public void setTipoFreqAprazamento(
			MpmTipoFrequenciaAprazamento mpmTipoFreqAprazamentos) {
		this.tipoFreqAprazamento = mpmTipoFreqAprazamentos;
	}

	@Column(name = "QTDE_APLICACOES", precision = 3, scale = 0)
	public Short getQtdeAplicacoes() {
		return this.qtdeAplicacoes;
	}

	public void setQtdeAplicacoes(Short qtdeAplicacoes) {
		this.qtdeAplicacoes = qtdeAplicacoes;
	}

	@Column(name = "QTDE_UNIDADES", precision = 2, scale = 0)
	public Byte getQtdeUnidades() {
		return this.qtdeUnidades;
	}

	public void setQtdeUnidades(Byte qtdeUnidades) {
		this.qtdeUnidades = qtdeUnidades;
	}

	@Column(name = "QTDE_ML", precision = 4, scale = 0)
	public Short getQtdeMl() {
		return this.qtdeMl;
	}

	public void setQtdeMl(Short qtdeMl) {
		this.qtdeMl = qtdeMl;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DTHR_EXEC_PROCEDIMENTO", length = 7)
	public Date getDthrExecProcedimento() {
		return this.dthrExecProcedimento;
	}

	public void setDthrExecProcedimento(Date dthrExecProcedimento) {
		this.dthrExecProcedimento = dthrExecProcedimento;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DTHR_DIGT_EXECUCAO", length = 7)
	public Date getDthrDigtExecucao() {
		return this.dthrDigtExecucao;
	}

	public void setDthrDigtExecucao(Date dthrDigtExecucao) {
		this.dthrDigtExecucao = dthrDigtExecucao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO") })
	public RapServidores getServidor() {
		return this.servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}

	@Column(name = "IND_IMPR_LAUDO", length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndImprLaudo() {
		return this.indImprLaudo;
	}

	public void setIndImprLaudo(Boolean indImprLaudo) {
		this.indImprLaudo = indImprLaudo;
	}

	@Column(name = "IND_AFERESE", nullable = false, length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndAferese() {
		return this.indAferese;
	}

	public void setIndAferese(Boolean indAferese) {
		this.indAferese = indAferese;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "itemSolucaoHemoterapica")
	public List<AbsItemSolicitacaoHemoterapicaJustificativa> getItemSolicitacaoHemoterapicaJustificativas() {
		return itemSolicitacaoHemoterapicaJustificativas;
	}

	public void setItemSolicitacaoHemoterapicaJustificativas(List<AbsItemSolicitacaoHemoterapicaJustificativa> absItensSolHemoterapicaJustificativas) {
		this.itemSolicitacaoHemoterapicaJustificativas = absItensSolHemoterapicaJustificativas;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "itemSolucaoHemoterapica")
	public List<MpaUsoOrdItemHemoters> getUsoOrdItemHemoters() {
		return usoOrdItemHemoters;
	}

	public void setUsoOrdItemHemoters(List<MpaUsoOrdItemHemoters> usoOrdItemHemoters) {
		this.usoOrdItemHemoters = usoOrdItemHemoters;
	}

	
		
	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@Transient
	public String getDescricao() {
		if (this.componenteSanguineo != null) {
			return this.componenteSanguineo.getDescricao();
		} else {
			return this.procedHemoterapico.getDescricao();
		}		
	}
	
	@Transient
	public String getIndicadores() {
		StringBuilder descricao = new StringBuilder(50);
		
		if (this.indIrradiado.booleanValue()) {
			descricao.append(" Irradiado,");
		}
		
		if (this.indFiltrado.booleanValue()) {
			descricao.append(" Desleucocitado,");
		}
		
		if (this.indLavado.booleanValue()) {
			descricao.append(" Lavado,");
		}
		
		if (this.indAferese.booleanValue()) {
			descricao.append(" Aférese,");
		}
		
		return descricao.toString();
	}

	@Transient
	public String getDescricaoComIndicadores() {
		return this.getDescricao() + this.getIndicadores();
	}
	
	@Override
	@Transient
	public String getDescricaoFormatada() {
		StringBuilder descricao = new StringBuilder(30);
		
		descricao.append(this.getDescricao());
		
		Byte valor = 1;
		if (this.qtdeUnidades != null) {
			if (this.getQtdeUnidades().equals(valor)) {
				descricao.append(' ').append(this.qtdeUnidades.toString()).append(" unidade");
			} else {
				descricao.append(' ').append(this.qtdeUnidades.toString()).append(" unidades");
			}			
		}
		
		if (this.qtdeMl != null) {
			descricao.append(' ').append(this.qtdeMl).append(" ml");
		}
		
		descricao.append(this.getIndicadores());
		
		/*
		 if c1.sint_tfq is not null then
              --v_desc_tfq := replace(c1.sint_tfq, '#', to_char(c1.frequencia));
              v_sintaxe_hemoterapia := v_sintaxe_hemoterapia || ' ' ||
                                       replace(c1.sint_tfq, '#', to_char(c1.frequencia));
           elsif c1.desc_tfq is not null then
                 v_sintaxe_hemoterapia := v_sintaxe_hemoterapia || ' ' || c1.desc_tfq;
           end if;		
		*/
		if (this.tipoFreqAprazamento != null) {
			if (this.tipoFreqAprazamento.getSintaxe() != null) {
				//descricao += " " + this.getTipoFreqAprazamento().getSintaxe() + " # " + this.frequencia.toString();	
				descricao.append(' ').append(this.getTipoFreqAprazamento().getSintaxeFormatada(this.frequencia));	
			} else if(this.tipoFreqAprazamento.getDescricao() != null) {
				descricao.append(' ').append(this.tipoFreqAprazamento.getDescricao());
			}
			
		}
		
		if (this.qtdeAplicacoes != null) {
			descricao.append(' ').append(this.qtdeAplicacoes.toString()).append(" aplicações");
		}
		
		descricao.append("; ");
		
		return descricao.toString();
	}

	public enum Fields {
		ID("id"), 
		SOLICITACOES_HEMOTERAPICAS("solicitacaoHemoterapica"), 
		RAP_SERVIDOR("servidor"),
		SERVIDOR_MAT("servidor.id.matricula"),
		SERVIDOR_VIN("servidor.id.vinCodigo"),		
		PROCED_HEMOTERAPICOS("procedHemoterapico"), 
		COMPONENTES_SANGUINEOS("componenteSanguineo"), 
		//CSA_CODIGO("componenteSanguineo"), 
		TIPO_FREQ_APRAZAMENTO("tipoFreqAprazamento"), 
		TIPO_FREQ_APRAZAMENTO_SEQ("tipoFreqAprazamento.seq"),
		//TFQ_SEQ("tipoFreqAprazamento"), 
		IND_IRRADIADO("indIrradiado"), 
		FREQUENCIA("frequencia"), 
		QTDE_APLICACOES("qtdeAplicacoes"), 
		IND_FILTRADO("indFiltrado"), 
		IND_LAVADO("indLavado"), 
		QTDE_UNIDADES("qtdeUnidades"), 
		QTDE_ML("qtdeMl"), 
		DTHR_EXEC_PROCEDIMENTO("dthrExecProcedimento"), 
		DTHR_DIGT_EXECUCAO("dthrDigtExecucao"), 
		IND_IMPR_LAUDO("indImprLaudo"), 
		IND_AFERESE("indAferese"), 
		ABS_PROCED_HEMOTERAPICOS_CODIGO("procedHemoterapico.codigo"), 
		SHE_ATD_SEQ("id.sheAtdSeq"), 
		SHE_SEQ("id.sheSeq"),
		SEQUENCIA("id.sequencia"),
		COMPONENTES_SANGUINEOS_CODIGO("componenteSanguineo.codigo");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return fields;
		}

	}

	@PrePersist
	@PreUpdate
	@SuppressWarnings("unused")
	private void validarAbsItensSolHemoterapicas() {
		//ind_impr_laudo character varying(1) DEFAULT 'N'::character varying,
		if (this.getIndImprLaudo() == null) {
			this.setIndImprLaudo(Boolean.FALSE);
		}
		//CONSTRAINT abs_ish_ck4 CHECK 
		if (!((componenteSanguineo != null && procedHemoterapico == null) || (componenteSanguineo == null && procedHemoterapico != null))) {
			throw new BaseRuntimeException();
		}
		// CONSTRAINT abs_ish_ck6 CHECK
		if (!((frequencia != null && qtdeAplicacoes != null && tipoFreqAprazamento != null)
				|| (frequencia == null && qtdeAplicacoes == null && tipoFreqAprazamento == null))) {
			throw new BaseRuntimeException();
		}
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		AbsItensSolHemoterapicas other = (AbsItensSolHemoterapicas) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		return true;
	}
	
}
