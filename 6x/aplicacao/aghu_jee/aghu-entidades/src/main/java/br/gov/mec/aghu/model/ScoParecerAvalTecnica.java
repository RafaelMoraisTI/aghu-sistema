package br.gov.mec.aghu.model;

// Generated 04/01/2012 11:23:42 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import org.apache.commons.lang3.builder.EqualsBuilder;
import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioParecer;
import br.gov.mec.aghu.core.persistence.BaseEntityCodigo;


/**
 * ScoParecer Avaliacao Tecnica generated by hbm2java
 */
@Entity
@Table(name = "SCO_PARECER_AVAL_TECNICA", schema = "AGH")
@SequenceGenerator(name="scoPatSq1", sequenceName="AGH.SCO_PAT_SQ1", allocationSize = 1)
public class ScoParecerAvalTecnica extends BaseEntityCodigo<Integer> implements java.io.Serializable {	
		
	/**
	 * 
	 */
	private static final long serialVersionUID = 5182910365681752456L;


	
	
	private Integer codigo;
	private ScoParecerAvaliacao parecerAvaliacao;	
	private DominioParecer parecer;
	private Date dtAvaliacao;
	private RapServidores servidorAvaliacao;
	private Date dtCriacao;
	private RapServidores servidorCriacao;
	private String descricao;		
	private Integer version;	
	
	
	public ScoParecerAvalTecnica(){
	}

	@Id
	@Column(name = "CODIGO", nullable = false, precision = 6, scale = 0)
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "scoPatSq1")
	public Integer getCodigo() {
		return codigo;
	}
	public void setCodigo(Integer codigo) {
		this.codigo = codigo;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PAV_CODIGO", referencedColumnName = "CODIGO")
	public ScoParecerAvaliacao getParecerAvaliacao() {
		return parecerAvaliacao;
	}

	public void setParecerAvaliacao(ScoParecerAvaliacao parecerAvaliacao) {
		this.parecerAvaliacao = parecerAvaliacao;
	}
	

	@Column(name = "PARECER", length = 2, nullable = false)
	@Enumerated(EnumType.STRING)
	public DominioParecer getParecer() {
		return parecer;
	}

	public void setParecer(DominioParecer parecer) {
		this.parecer = parecer;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_AVALIACAO", length = 7)	
	public Date getDtAvaliacao() {
		return dtAvaliacao;
	}

	public void setDtAvaliacao(Date dtAvaliacao) {
		this.dtAvaliacao = dtAvaliacao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "SER_MATRICULA_RESP_AVAL", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO_RESP_AVAL", referencedColumnName = "VIN_CODIGO") })
	public RapServidores getServidorAvaliacao() {
		return servidorAvaliacao;
	}

	public void setServidorAvaliacao(RapServidores servidorAvaliacao) {
		this.servidorAvaliacao = servidorAvaliacao;
	}	

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DT_CRIACAO", length = 7)
	public Date getDtCriacao() {
		return dtCriacao;
	}

	public void setDtCriacao(Date dtCriacao) {
		this.dtCriacao = dtCriacao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "SER_MATRICULA_CRIACAO", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO_CRIACAO", referencedColumnName = "VIN_CODIGO") })
	public RapServidores getServidorCriacao() {
		return servidorCriacao;
	}

	public void setServidorCriacao(RapServidores servidorCriacao) {
		this.servidorCriacao = servidorCriacao;
	}

	@Column(name = "DESCRICAO", length = 500)
	@Length(max = 500)
	public String getDescricao() {
		return descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}	
	
	@Column(name = "VERSION", nullable = false)
	@Version
	public Integer getVersion() {
		return version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((codigo == null) ? 0 : codigo.hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object other) {
		if (other instanceof ScoParecerAvalTecnica){
			ScoParecerAvalTecnica castOther = (ScoParecerAvalTecnica) other;
			return new EqualsBuilder()
				.append(this.codigo, castOther.codigo)
			.isEquals();
		}
		else {
			return false;
		}	
	}
	
	public enum Fields {
		CODIGO("codigo"),
		PARECER_AVALIACAO("parecerAvaliacao"),
		LOTE("lote"),
		PARECER("parecer"),		
		DT_CRIACAO("dtCriacao"),
		SERVIDOR_CRIACAO("servidorCriacao"),
		MATRICULA_SERVIDOR_CRIACAO("servidorCriacao.id.matricula"),
		CODIGO_VINCULO_SERVIDOR_CRIACAO("servidorCriacao.id.vinCodigo"),
		DT_ALTERACAO("dtAlteracao"),
		SERVIDOR_ALTERACAO("servidorAlteracao"),
		MATRICULA_SERVIDOR_ALTERACAO("servidorAlteracao.id.matricula"),
		CODIGO_VINCULO_SERVIDOR_ALTERACAO("servidorAlteracao.id.vinCodigo"),
		SERVIDOR_AVALIACAO("servidorAvaliacao");
		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return fields;
		}
	}	

}
