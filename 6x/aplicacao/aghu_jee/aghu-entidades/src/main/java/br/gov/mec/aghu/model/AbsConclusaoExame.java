package br.gov.mec.aghu.model;

// Generated 09/04/2012 16:32:53 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AbsConclusaoExame generated by hbm2java
 */
@Entity
@Table(name = "ABS_CONCLUSAO_EXAMES", schema = "AGH")
public class AbsConclusaoExame extends BaseEntityId<AbsConclusaoExameId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7486587007604665791L;
	private AbsConclusaoExameId id;
	private Integer version;
	private RapServidores rapServidoresByAbsCoeSerFk2;
	private AbsKitConclusao absKitConclusao;
	private RapServidores rapServidoresByAbsCoeSerFk1;
	private AbsExameMetodos absExameMetodos;
	private AbsAmostraDoacao absAmostraDoacao;
	private AbsDoacoes absDoacoes;
	private Date dthrConclusao;
	private Date criadoEm;
	private Double leituraDoador;
	private Double leituraMedia;
	private String resultado;
	private String observacao;
	private String titulo;
	private String dosagemMasc;
	private String dosagemFem;

	public AbsConclusaoExame() {
	}

	public AbsConclusaoExame(AbsConclusaoExameId id, RapServidores rapServidoresByAbsCoeSerFk2,
			RapServidores rapServidoresByAbsCoeSerFk1, AbsExameMetodos absExameMetodos, AbsAmostraDoacao absAmostraDoacao,
			AbsDoacoes absDoacoes, Date dthrConclusao, Date criadoEm) {
		this.id = id;
		this.rapServidoresByAbsCoeSerFk2 = rapServidoresByAbsCoeSerFk2;
		this.rapServidoresByAbsCoeSerFk1 = rapServidoresByAbsCoeSerFk1;
		this.absExameMetodos = absExameMetodos;
		this.absAmostraDoacao = absAmostraDoacao;
		this.absDoacoes = absDoacoes;
		this.dthrConclusao = dthrConclusao;
		this.criadoEm = criadoEm;
	}

	public AbsConclusaoExame(AbsConclusaoExameId id, RapServidores rapServidoresByAbsCoeSerFk2, AbsKitConclusao absKitConclusao,
			RapServidores rapServidoresByAbsCoeSerFk1, AbsExameMetodos absExameMetodos, AbsAmostraDoacao absAmostraDoacao,
			AbsDoacoes absDoacoes, Date dthrConclusao, Date criadoEm, Double leituraDoador, Double leituraMedia, String resultado,
			String observacao, String titulo, String dosagemMasc, String dosagemFem) {
		this.id = id;
		this.rapServidoresByAbsCoeSerFk2 = rapServidoresByAbsCoeSerFk2;
		this.absKitConclusao = absKitConclusao;
		this.rapServidoresByAbsCoeSerFk1 = rapServidoresByAbsCoeSerFk1;
		this.absExameMetodos = absExameMetodos;
		this.absAmostraDoacao = absAmostraDoacao;
		this.absDoacoes = absDoacoes;
		this.dthrConclusao = dthrConclusao;
		this.criadoEm = criadoEm;
		this.leituraDoador = leituraDoador;
		this.leituraMedia = leituraMedia;
		this.resultado = resultado;
		this.observacao = observacao;
		this.titulo = titulo;
		this.dosagemMasc = dosagemMasc;
		this.dosagemFem = dosagemFem;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "amdDcaBolNumero", column = @Column(name = "AMD_DCA_BOL_NUMERO", nullable = false)),
			@AttributeOverride(name = "amdDcaBolBsaCodigo", column = @Column(name = "AMD_DCA_BOL_BSA_CODIGO", nullable = false)),
			@AttributeOverride(name = "amdDcaBolData", column = @Column(name = "AMD_DCA_BOL_DATA", nullable = false, length = 29)),
			@AttributeOverride(name = "amdSeqp", column = @Column(name = "AMD_SEQP", nullable = false)),
			@AttributeOverride(name = "emmMetSeq", column = @Column(name = "EMM_MET_SEQ", nullable = false)),
			@AttributeOverride(name = "emmUfeEmaExaSigla", column = @Column(name = "EMM_UFE_EMA_EXA_SIGLA", nullable = false, length = 5)),
			@AttributeOverride(name = "emmUfeEmaManSeq", column = @Column(name = "EMM_UFE_EMA_MAN_SEQ", nullable = false)),
			@AttributeOverride(name = "emmUfeUnfSeq", column = @Column(name = "EMM_UFE_UNF_SEQ", nullable = false)),
			@AttributeOverride(name = "seqp", column = @Column(name = "SEQP", nullable = false)) })
	public AbsConclusaoExameId getId() {
		return this.id;
	}

	public void setId(AbsConclusaoExameId id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA_E_ALTERADA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO_E_ALTERADA", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getRapServidoresByAbsCoeSerFk2() {
		return this.rapServidoresByAbsCoeSerFk2;
	}

	public void setRapServidoresByAbsCoeSerFk2(RapServidores rapServidoresByAbsCoeSerFk2) {
		this.rapServidoresByAbsCoeSerFk2 = rapServidoresByAbsCoeSerFk2;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "KIT_SEQ")
	public AbsKitConclusao getAbsKitConclusao() {
		return this.absKitConclusao;
	}

	public void setAbsKitConclusao(AbsKitConclusao absKitConclusao) {
		this.absKitConclusao = absKitConclusao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getRapServidoresByAbsCoeSerFk1() {
		return this.rapServidoresByAbsCoeSerFk1;
	}

	public void setRapServidoresByAbsCoeSerFk1(RapServidores rapServidoresByAbsCoeSerFk1) {
		this.rapServidoresByAbsCoeSerFk1 = rapServidoresByAbsCoeSerFk1;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "EMM_MET_SEQ", referencedColumnName = "MET_SEQ", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "EMM_UFE_EMA_EXA_SIGLA", referencedColumnName = "UFE_EMA_EXA_SIGLA", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "EMM_UFE_EMA_MAN_SEQ", referencedColumnName = "UFE_EMA_MAN_SEQ", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "EMM_UFE_UNF_SEQ", referencedColumnName = "UFE_UNF_SEQ", nullable = false, insertable = false, updatable = false) })
	public AbsExameMetodos getAbsExameMetodos() {
		return this.absExameMetodos;
	}

	public void setAbsExameMetodos(AbsExameMetodos absExameMetodos) {
		this.absExameMetodos = absExameMetodos;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "AMD_DCA_BOL_NUMERO", referencedColumnName = "DCA_BOL_NUMERO", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "AMD_DCA_BOL_BSA_CODIGO", referencedColumnName = "DCA_BOL_BSA_CODIGO", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "AMD_DCA_BOL_DATA", referencedColumnName = "DCA_BOL_DATA", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "AMD_SEQP", referencedColumnName = "SEQP", nullable = false, insertable = false, updatable = false) })
	public AbsAmostraDoacao getAbsAmostraDoacao() {
		return this.absAmostraDoacao;
	}

	public void setAbsAmostraDoacao(AbsAmostraDoacao absAmostraDoacao) {
		this.absAmostraDoacao = absAmostraDoacao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "DCA_BOL_NUMERO", referencedColumnName = "BOL_NUMERO", nullable = false),
			@JoinColumn(name = "DCA_BOL_BSA_CODIGO", referencedColumnName = "BOL_BSA_CODIGO", nullable = false),
			@JoinColumn(name = "DCA_BOL_DATA", referencedColumnName = "BOL_DATA", nullable = false) })
	public AbsDoacoes getAbsDoacoes() {
		return this.absDoacoes;
	}

	public void setAbsDoacoes(AbsDoacoes absDoacoes) {
		this.absDoacoes = absDoacoes;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DTHR_CONCLUSAO", nullable = false, length = 29)
	public Date getDthrConclusao() {
		return this.dthrConclusao;
	}

	public void setDthrConclusao(Date dthrConclusao) {
		this.dthrConclusao = dthrConclusao;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 29)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Column(name = "LEITURA_DOADOR", precision = 17, scale = 17)
	public Double getLeituraDoador() {
		return this.leituraDoador;
	}

	public void setLeituraDoador(Double leituraDoador) {
		this.leituraDoador = leituraDoador;
	}

	@Column(name = "LEITURA_MEDIA", precision = 17, scale = 17)
	public Double getLeituraMedia() {
		return this.leituraMedia;
	}

	public void setLeituraMedia(Double leituraMedia) {
		this.leituraMedia = leituraMedia;
	}

	@Column(name = "RESULTADO", length = 2)
	@Length(max = 2)
	public String getResultado() {
		return this.resultado;
	}

	public void setResultado(String resultado) {
		this.resultado = resultado;
	}

	@Column(name = "OBSERVACAO", length = 120)
	@Length(max = 120)
	public String getObservacao() {
		return this.observacao;
	}

	public void setObservacao(String observacao) {
		this.observacao = observacao;
	}

	@Column(name = "TITULO", length = 60)
	@Length(max = 60)
	public String getTitulo() {
		return this.titulo;
	}

	public void setTitulo(String titulo) {
		this.titulo = titulo;
	}

	@Column(name = "DOSAGEM_MASC", length = 30)
	@Length(max = 30)
	public String getDosagemMasc() {
		return this.dosagemMasc;
	}

	public void setDosagemMasc(String dosagemMasc) {
		this.dosagemMasc = dosagemMasc;
	}

	@Column(name = "DOSAGEM_FEM", length = 30)
	@Length(max = 30)
	public String getDosagemFem() {
		return this.dosagemFem;
	}

	public void setDosagemFem(String dosagemFem) {
		this.dosagemFem = dosagemFem;
	}

	public enum Fields {

		ID("id"),
		VERSION("version"),
		RAP_SERVIDORES_BY_ABS_COE_SER_FK2("rapServidoresByAbsCoeSerFk2"),
		ABS_KIT_CONCLUSOES("absKitConclusao"),
		RAP_SERVIDORES_BY_ABS_COE_SER_FK1("rapServidoresByAbsCoeSerFk1"),
		ABS_EXAME_METODOS("absExameMetodos"),
		ABS_AMOSTRAS_DOACOES("absAmostraDoacao"),
		ABS_DOACOES("absDoacoes"),
		DTHR_CONCLUSAO("dthrConclusao"),
		CRIADO_EM("criadoEm"),
		LEITURA_DOADOR("leituraDoador"),
		LEITURA_MEDIA("leituraMedia"),
		RESULTADO("resultado"),
		OBSERVACAO("observacao"),
		TITULO("titulo"),
		DOSAGEM_MASC("dosagemMasc"),
		DOSAGEM_FEM("dosagemFem");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof AbsConclusaoExame)) {
			return false;
		}
		AbsConclusaoExame other = (AbsConclusaoExame) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
