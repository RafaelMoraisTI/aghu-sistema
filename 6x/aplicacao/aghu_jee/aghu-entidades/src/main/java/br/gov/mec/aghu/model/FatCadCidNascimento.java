package br.gov.mec.aghu.model;

// Generated 15/03/2011 13:46:58 by Hibernate Tools 3.2.5.Beta

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioVivoMorto;
import br.gov.mec.aghu.core.persistence.BaseEntitySeq;

/**
 * FatCadCidNascimentos generated by hbm2java
 */
@Entity
@SequenceGenerator(name="fatCcnSq1", sequenceName="AGH.FAT_CCN_SQ1", allocationSize = 1)
@Table(name = "FAT_CAD_CID_NASCIMENTOS", schema = "AGH")
public class FatCadCidNascimento extends BaseEntitySeq<Short> implements java.io.Serializable {
	private static final long serialVersionUID = 1761127608304403126L;
	
	private Short seq;
	private DominioVivoMorto vivo;
	private DominioVivoMorto morto;
	private String cid;
	private Date criadoEm;
	private Date alteradoEm;
	private RapServidores servidor;
	private RapServidores servidorAltera;
	private Integer version;
	

	public FatCadCidNascimento() {
	}

	public FatCadCidNascimento(Short seq, Date criadoEm, RapServidores servidor) {
		this.seq = seq;
		this.criadoEm = criadoEm;
		this.servidor = servidor;
	}

	public FatCadCidNascimento(Short seq, DominioVivoMorto vivo, DominioVivoMorto morto,
			String cid, Date criadoEm, Date alteradoEm, RapServidores servidor,
			RapServidores servidorAltera) {
		this.seq = seq;
		this.vivo = vivo;
		this.morto = morto;
		this.cid = cid;
		this.criadoEm = criadoEm;
		this.alteradoEm = alteradoEm;
		this.servidor = servidor;
		this.servidorAltera = servidorAltera;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "fatCcnSq1")
	@Column(name = "SEQ", unique = true, nullable = false, precision = 2, scale = 0)
	public Short getSeq() {
		return this.seq;
	}

	public void setSeq(Short seq) {
		this.seq = seq;
	}
	
	@Column(name = "VIVO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioVivoMorto getVivo() {
		return this.vivo;
	}

	public void setVivo(DominioVivoMorto vivo) {
		this.vivo = vivo;
	}

	@Column(name = "MORTO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioVivoMorto getMorto() {
		return this.morto;
	}

	public void setMorto(DominioVivoMorto morto) {
		this.morto = morto;
	}

	@Column(name = "CID", length = 10)
	@Length(max = 10)
	public String getCid() {
		return this.cid;
	}

	public void setCid(String cid) {
		this.cid = cid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 7)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ALTERADO_EM", length = 7)
	public Date getAlteradoEm() {
		return this.alteradoEm;
	}

	public void setAlteradoEm(Date alteradoEm) {
		this.alteradoEm = alteradoEm;
	}


	@JoinColumns( {
		@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable=false),
		@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable=false) })
	@ManyToOne(fetch = FetchType.LAZY)
	public RapServidores getServidor() {
		return this.servidor;
	}
	
	public void setServidor(RapServidores servidorResponsavel) {
		this.servidor = servidorResponsavel;
	}


	@JoinColumns( {
		@JoinColumn(name = "SER_MATRICULA_ALTERA", referencedColumnName = "MATRICULA", nullable=false),
		@JoinColumn(name = "SER_VIN_CODIGO_ALTERA", referencedColumnName = "VIN_CODIGO", nullable=false) })
	@ManyToOne(fetch = FetchType.LAZY)
	public RapServidores getServidorAltera() {
		return servidorAltera;
	}

	public void setServidorAltera(RapServidores servidorAltera) {
		this.servidorAltera = servidorAltera;
	}
	
	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}
	
	public enum Fields {
		SEQ("seq"),
		VIVO("vivo"),
		MORTO("morto"),
		CID("cid"),
		CRIADO_EM("criadoEm"),
		ALTERADO_EM("alteradoEm"),
		SERVIDOR("servidor"),
		SERVIDOR_ALTERA("servidorAltera");
		
		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
		
	}

	@Override
	public int hashCode() {
		HashCodeBuilder umHashCodeBuilder = new HashCodeBuilder();
        umHashCodeBuilder.append(this.getAlteradoEm());
        umHashCodeBuilder.append(this.getCid());
        umHashCodeBuilder.append(this.getCriadoEm());
        umHashCodeBuilder.append(this.getMorto());
        umHashCodeBuilder.append(this.getSeq());
        umHashCodeBuilder.append(this.getServidor());
        umHashCodeBuilder.append(this.getServidorAltera());
        umHashCodeBuilder.append(this.getVersion());
        umHashCodeBuilder.append(this.getVivo());
        return umHashCodeBuilder.toHashCode();
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!super.equals(obj)) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		FatCadCidNascimento other = (FatCadCidNascimento) obj;
		EqualsBuilder umEqualsBuilder = new EqualsBuilder();
        umEqualsBuilder.append(this.getAlteradoEm(), other.getAlteradoEm());
        umEqualsBuilder.append(this.getCid(), other.getCid());
        umEqualsBuilder.append(this.getCriadoEm(), other.getCriadoEm());
        umEqualsBuilder.append(this.getMorto(), other.getMorto());
        umEqualsBuilder.append(this.getSeq(), other.getSeq());
        umEqualsBuilder.append(this.getServidor(), other.getServidor());
        umEqualsBuilder.append(this.getServidorAltera(), other.getServidorAltera());
        umEqualsBuilder.append(this.getVersion(), other.getVersion());
        umEqualsBuilder.append(this.getVivo(), other.getVivo());
        return umEqualsBuilder.isEquals();
	}
	
}
