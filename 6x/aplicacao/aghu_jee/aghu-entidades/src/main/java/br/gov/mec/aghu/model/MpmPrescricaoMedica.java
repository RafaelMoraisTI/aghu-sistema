package br.gov.mec.aghu.model;

// Generated 14/10/2009 21:16:14 by Hibernate Tools 3.2.5.Beta

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioSituacaoPrescricao;
import br.gov.mec.aghu.core.exception.BaseRuntimeException;
import br.gov.mec.aghu.core.exception.BusinessExceptionCode;
import br.gov.mec.aghu.core.persistence.BaseEntityId;
import br.gov.mec.aghu.core.utils.DateUtil;
import br.gov.mec.aghu.core.utils.DateValidator;

/**
 * MpmPrescricaoMedicas generated by hbm2java
 */
@Entity
@Table(name = "MPM_PRESCRICAO_MEDICAS", schema = "AGH", uniqueConstraints = @UniqueConstraint(columnNames = {
		"ATD_SEQ", "DTHR_INICIO_UK" }))
public class MpmPrescricaoMedica extends BaseEntityId<MpmPrescricaoMedicaId> implements java.io.Serializable {

	private static final long serialVersionUID = 6159441666480485955L;
	
	private MpmPrescricaoMedicaId id;
	private Integer version;
	private RapServidores servidorAtualizada;
	private RapServidores servidor;
	private RapServidores servidorValida;
	private AghAtendimentos atendimento;
	private Date dtReferencia;
	private Date criadoEm;
	private Date dthrInicio;
	private Date dthrFim;
	private DominioSituacaoPrescricao situacao;
	private Date dthrInicioMvtoPendente;
	private Date dthrMovimento;
	private Date dthrInicioUk;
	private String machine;
	private Date dataImpSumario;
	private String tipoEmissaoSumario;
	private Long rgtSeq;
	private Set<MpmPrescricaoNpt> prescricoesNpt = new HashSet<MpmPrescricaoNpt>(0);

	public MpmPrescricaoMedica() {
	}
	
	public MpmPrescricaoMedica(MpmPrescricaoMedicaId id) {
		this.id = id;
	}
	
	public MpmPrescricaoMedica(MpmPrescricaoMedicaId id,
			RapServidores servidor,
			AghAtendimentos atendimento, Date dtReferencia, Date criadoEm,
			Date dthrInicio, Date dthrFim, DominioSituacaoPrescricao situacao) {
		this.id = id;
		this.servidor = servidor;
		this.atendimento = atendimento;
		this.dtReferencia = dtReferencia;
		this.criadoEm = criadoEm;
		this.dthrInicio = dthrInicio;
		this.dthrFim = dthrFim;
		this.situacao = situacao;
	}

	public MpmPrescricaoMedica(MpmPrescricaoMedicaId id,
			RapServidores servidorAtualizada,
			RapServidores servidor,
			RapServidores servidorValida,
			AghAtendimentos atendimento, Date dtReferencia, Date criadoEm,
			Date dthrInicio, Date dthrFim, DominioSituacaoPrescricao situacao,
			Date dthrInicioMvtoPendente, Date dthrMovimento, Date dthrInicioUk,
			String machine, Date dataImpSumario, String tipoEmissaoSumario,
			Long rgtSeq) {
		this.id = id;
		this.servidorAtualizada = servidorAtualizada;
		this.servidor = servidor;
		this.servidorValida = servidorValida;
		this.atendimento = atendimento;
		this.dtReferencia = dtReferencia;
		this.criadoEm = criadoEm;
		this.dthrInicio = dthrInicio;
		this.dthrFim = dthrFim;
		this.situacao = situacao;
		this.dthrInicioMvtoPendente = dthrInicioMvtoPendente;
		this.dthrMovimento = dthrMovimento;
		this.dthrInicioUk = dthrInicioUk;
		this.machine = machine;
		this.dataImpSumario = dataImpSumario;
		this.tipoEmissaoSumario = tipoEmissaoSumario;
		this.rgtSeq = rgtSeq;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "atdSeq", column = @Column(name = "ATD_SEQ", nullable = false, precision = 7, scale = 0)),
			@AttributeOverride(name = "seq", column = @Column(name = "SEQ", nullable = false, precision = 8, scale = 0)) })
	public MpmPrescricaoMedicaId getId() {
		return this.id;
	}

	public void setId(MpmPrescricaoMedicaId id) {
		this.id = id;
	}
	
	@Version
	@Column(nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}	

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA_ATUALIZADA", referencedColumnName = "MATRICULA", insertable = true, updatable = true),
			@JoinColumn(name = "SER_VIN_CODIGO_ATUALIZADA", referencedColumnName = "VIN_CODIGO", insertable = true, updatable = true) })
	public RapServidores getServidorAtualizada() {
		return this.servidorAtualizada;
	}

	public void setServidorAtualizada(
			RapServidores servidorAtualizada) {
		this.servidorAtualizada = servidorAtualizada;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false, insertable = true, updatable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false, insertable = true, updatable = false) })
	public RapServidores getServidor() {
		return this.servidor;
	}

	public void setServidor(
			RapServidores servidor) {
		this.servidor = servidor;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA_VALIDA", referencedColumnName = "MATRICULA", insertable = false, updatable = true),
			@JoinColumn(name = "SER_VIN_CODIGO_VALIDA", referencedColumnName = "VIN_CODIGO", insertable = false, updatable = true) })
	public RapServidores getServidorValida() {
		return this.servidorValida;
	}

	public void setServidorValida(
			RapServidores servidorValida) {
		this.servidorValida = servidorValida;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ATD_SEQ", nullable = false, insertable = false, updatable = false)
	public AghAtendimentos getAtendimento() {
		return this.atendimento;
	}

	public void setAtendimento(AghAtendimentos atendimento) {
		this.atendimento = atendimento;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DT_REFERENCIA", nullable = false, updatable = false)
	public Date getDtReferencia() {
		return this.dtReferencia;
	}

	public void setDtReferencia(Date dtReferencia) {
		this.dtReferencia = dtReferencia;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, updatable = false)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DTHR_INICIO", nullable = false, updatable = false)
	public Date getDthrInicio() {
		return this.dthrInicio;
	}

	public void setDthrInicio(Date dthrInicio) {
		this.dthrInicio = dthrInicio;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DTHR_FIM", nullable = false, updatable = false)
	public Date getDthrFim() {
		return this.dthrFim;
	}

	public void setDthrFim(Date dthrFim) {
		this.dthrFim = dthrFim;
	}

	@Column(name = "IND_SITUACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacaoPrescricao getSituacao() {
		return this.situacao;
	}

	public void setSituacao(DominioSituacaoPrescricao situacao) {
		// Lógica extraída da trigger MPMT_PME_BRU 
		if (!DominioSituacaoPrescricao.U.equals(this.situacao)
				&& DominioSituacaoPrescricao.U.equals(situacao)
				&& this.dthrMovimento == null) {
			this.dthrMovimento = new Date();
		}
		this.situacao = situacao;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DTHR_INICIO_MVTO_PENDENTE", length = 7)
	public Date getDthrInicioMvtoPendente() {
		return this.dthrInicioMvtoPendente;
	}

	public void setDthrInicioMvtoPendente(Date dthrInicioMvtoPendente) {
		this.dthrInicioMvtoPendente = dthrInicioMvtoPendente;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DTHR_MOVIMENTO", length = 7)
	public Date getDthrMovimento() {
		return this.dthrMovimento;
	}

	public void setDthrMovimento(Date dthrMovimento) {
		this.dthrMovimento = dthrMovimento;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DTHR_INICIO_UK", length = 7)
	public Date getDthrInicioUk() {
		return this.dthrInicioUk;
	}

	public void setDthrInicioUk(Date dthrInicioUk) {
		this.dthrInicioUk = dthrInicioUk;
	}

	@Column(name = "MACHINE", length = 64)
	@Length(max = 64)
	public String getMachine() {
		return this.machine;
	}

	public void setMachine(String machine) {
		this.machine = machine;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATA_IMP_SUMARIO", length = 7)
	public Date getDataImpSumario() {
		return this.dataImpSumario;
	}

	public void setDataImpSumario(Date dataImpSumario) {
		this.dataImpSumario = dataImpSumario;
	}

	@Column(name = "TIPO_EMISSAO_SUMARIO", length = 1)
	@Length(max = 1)
	public String getTipoEmissaoSumario() {
		return this.tipoEmissaoSumario;
	}

	public void setTipoEmissaoSumario(String tipoEmissaoSumario) {
		this.tipoEmissaoSumario = tipoEmissaoSumario;
	}

	@Column(name = "RGT_SEQ", precision = 14, scale = 0)
	public Long getRgtSeq() {
		return this.rgtSeq;
	}

	public void setRgtSeq(Long rgtSeq) {
		this.rgtSeq = rgtSeq;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "prescricaoMedica")
	public Set<MpmPrescricaoNpt> getPrescricoesNpt() {
		return prescricoesNpt;
	}
	
	public void setPrescricoesNpt(Set<MpmPrescricaoNpt> prescricoesNpt) {
		this.prescricoesNpt = prescricoesNpt;
	}
	
	@Transient
	public boolean isPkValida() {
		return (this.getId() != null && this.getId().getAtdSeq() != null && this.getId().getSeq() != null);
	}
	
	/**
	 * ORADB Procedure MPMK_RN.RN_MPMP_VER_VIG_PME<br>
	 * Regra: Se dtHrMovimento >= (maior ou igual) dtHorInicio 
	 * e  dtHrMovimento <= (menor ou igual) dtHrFim, é considerada como vigente.<br>
	 * 
	 * @return {boolean} Se é vigente ou nao
	 */
	@Transient
	public boolean isPrescricaoMedicaVigente() {
		return (DateUtil.validaDataMaiorIgual(this.getDthrMovimento(), this.getDthrInicio()) &&
				(this.getDthrFim() == null || DateValidator.validaDataMenorIgual(this.getDthrMovimento(), this.getDthrFim())));
	}

	/**
	 * ORADB Procedure MPMK_RN.RN_MPMP_VER_VIG_PME<br>
	 * Regra: Se newDate >= (maior ou igual) dtHorInicio 
	 * e  newDate <= (menor ou igual) dtHrFim, é considerada como vigente.<br>
	 * 
	 * @return {boolean} Se é vigente ou nao
	 */
	@Transient
	public boolean isPrescricaoMedicaVigente(Date newDate) {
		return (DateUtil.validaDataMaiorIgual(newDate, this.getDthrInicio()) &&
				(this.getDthrFim() == null || DateValidator.validaDataMenorIgual(newDate, this.getDthrFim())));
	}

	
	/**
	 * Se dtHrMovimento < (menor) dtHrInicio, a prescrição médica é futura.<br>
	 * 
	 * @return {boolean} Se for futura ou nao
	 */
	@Transient
	public boolean isPrescricaoMedicaFutura() {
		return (DateValidator.validaDataMenorIgual(this.getDthrMovimento(), this.getDthrInicio()));
	}

	
	public enum Fields {
		ID("id"), 
		IDATDSEQ("id.atdSeq"), 
		SEQ("id.seq"),
		ATENDIMENTO("atendimento"),	
		ATD_SEQ("atendimento.seq"),
		DTHR_INICIO("dthrInicio"),
		DTHR_FIM("dthrFim"),
		SERVIDOR_VALIDA("servidorValida"),
		SERVIDOR_VALIDA_MATRICULA("servidorValida.id.matricula"),
		SERVIDOR_VALIDA_VINCULO("servidorValida.id.vinCodigo"),
		SERVIDOR_ATUALIZADA("servidorAtualizada"),
		SER_MATRICULA_ATUALIZADA("servidorAtualizada.id.matricula"),
		SER_VIN_CODIGO_ATUALIZADA("servidorAtualizada.id.vinCodigo"),
		ATENDIMENTO_UNIDADE_FUNCIONAL("atendimento.unidadeFuncional"),
		DT_REFERENCIA("dtReferencia"),
		DATA_IMP_SUMARIO("dataImpSumario"),
		SERVIDOR_CODIGO("servidor.id.vinCodigo"),
		ATENDIMENTO_PACIENTE("atendimento.paciente"),
		PAC_CODIGO("atendimento.paciente.codigo"),
		CRIADO_EM("criadoEm"),
		SITUACAO("situacao"),
		PRESCRICOES_NPT("prescricoesNpt"),
		DTHR_INICIO_MVTO_PENDENTE("dthrInicioMvtoPendente");
		
		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}
	
	@PrePersist
	@SuppressWarnings("unused")
	private void validarConstraintsInclusao() {
		validarDataInicioFim();
		
		if (getDthrMovimento() == null && DominioSituacaoPrescricao.U.equals(getSituacao())) {
			setDthrMovimento(new Date());
		}
		
		if (getCriadoEm() == null) {
			setCriadoEm(new Date());
		}
		
		if (getDthrInicioUk() == null && getDthrInicio() != null){
			// A data hora início UK deve receber um valor de tempo com precisão
			// até a casa dos minutos apenas, para funcionar a constraint MPM_PME_UK1
			GregorianCalendar dataCorrenteSemSegundosMilesimos = new GregorianCalendar();
			dataCorrenteSemSegundosMilesimos.setTime(getDthrInicio());
			
			dataCorrenteSemSegundosMilesimos.set(Calendar.MILLISECOND, 0);
			dataCorrenteSemSegundosMilesimos.set(Calendar.SECOND, 0);
			
			setDthrInicioUk(dataCorrenteSemSegundosMilesimos.getTime());
			
		}
	}
	
	@PreUpdate
	@SuppressWarnings("unused")
	private void validarConstraintsAlteracao() {
		validarDataInicioFim();
		
		// Lógica abaixo foi extraída da procedure 		
		// ORADB MPMP_ATUALIZA_LOG_PME_USO da MPMF_ELAB_PRESCRICAO.PLL
		if (getDthrMovimento() != null && getDthrInicio().before(new Date()) && getDthrMovimento().before(getDthrInicio())) {
			setDthrMovimento(new Date());
		}
		
		if (getServidorValida() != null && (getMachine() == null || this.getMachine().isEmpty())) {
			throw new BaseRuntimeException(PrescricaoMedicaExceptionCode.ENDERECO_REDE_NAO_INFORMADO);
		}
	}
	
	private enum PrescricaoMedicaExceptionCode implements BusinessExceptionCode {
		MPM_PME_CK2, ENDERECO_REDE_NAO_INFORMADO
	}	
	
	private void validarDataInicioFim() throws BaseRuntimeException {
		/* MPM_PME_CK2 */
		if (!this.dthrFim.after(this.dthrInicio)) {
			throw new BaseRuntimeException(PrescricaoMedicaExceptionCode.MPM_PME_CK2);
		}		
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MpmPrescricaoMedica)) {
			return false;
		}
		MpmPrescricaoMedica other = (MpmPrescricaoMedica) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		return true;
	}
	
}