package br.gov.mec.aghu.model;

// Generated 07/02/2013 13:26:22 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.persistence.BaseEntitySeq;

/**
 * FatProcedServicos generated by hbm2java
 */
@Entity
@Table(name = "FAT_PROCED_SERVICOS", schema = "AGH")
@SequenceGenerator(name="fatPscSq1", sequenceName="AGH.FAT_PSC_SQ1", allocationSize = 1)
public class FatProcedServicos extends BaseEntitySeq<Short> implements java.io.Serializable {

	private static final long serialVersionUID = 3407675660479631744L;
	
	private Short seq;
	private Integer version;
	private String dtCompetencia;
	private Date criadoEm;
	private Date alteradoEm;
	private DominioSituacao indSituacao;
	
	private FatServClassificacoes fatServClassificacoes;
	private FatItensProcedHospitalar itemProcedimentoHospitalar;
	private RapServidores servidor;
	private RapServidores servidorAlterado;

	@Id
	@Column(name = "SEQ")
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "fatPscSq1")
	public Short getSeq() {
		return this.seq;
	}

	public void setSeq(Short seq) {
		this.seq = seq;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FCS_SEQ", nullable = false)
	public FatServClassificacoes getFatServClassificacoes() {
		return this.fatServClassificacoes;
	}

	public void setFatServClassificacoes(
			FatServClassificacoes fatServClassificacoes) {
		this.fatServClassificacoes = fatServClassificacoes;
	}

	@Column(name = "DT_COMPETENCIA", length = 6)
	@Length(max = 6)
	public String getDtCompetencia() {
		return this.dtCompetencia;
	}

	public void setDtCompetencia(String dtCompetencia) {
		this.dtCompetencia = dtCompetencia;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", length = 7)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ALTERADO_EM", length = 7)
	public Date getAlteradoEm() {
		return this.alteradoEm;
	}

	public void setAlteradoEm(Date alteradoEm) {
		this.alteradoEm = alteradoEm;
	}

	@Column(name = "IND_SITUACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getIndSituacao() {
		return indSituacao;
	}

	public void setIndSituacao(DominioSituacao indSituacao) {
		this.indSituacao = indSituacao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA_ALTERADO", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO_ALTERADO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidorAlterado() {
		return servidorAlterado;
	}

	public void setServidorAlterado(RapServidores servidorAlterado) {
		this.servidorAlterado = servidorAlterado;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidor() {
		return servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
		@JoinColumn(name = "IPH_SEQ", referencedColumnName = "SEQ", nullable = false),
		@JoinColumn(name = "IPH_PHO_SEQ", referencedColumnName = "PHO_SEQ", nullable = false)})
		public FatItensProcedHospitalar getItemProcedimentoHospitalar() {
		return this.itemProcedimentoHospitalar;
	}

	public void setItemProcedimentoHospitalar(final FatItensProcedHospitalar iph) {
		this.itemProcedimentoHospitalar = iph;
	}
	
	public enum Fields {

		SEQ("seq"),
		DT_COMPETENCIA("dtCompetencia"),
		CRIADO_EM("criadoEm"),
		ALTERADO_EM("alteradoEm"),
		IND_SITUACAO("indSituacao"),

		SER_MATRICULA("servidor.id.matricula"),
		SER_VIN_CODIGO("servidor.id.vinCodigo"),
		
		SER_MATRICULA_ALTERADO("servidorAlterado.id.matricula"),
		SER_VIN_CODIGO_ALTERADO("servidorAlterado.id.vinCodigo"),
		
		ITEM_PROCEDIMENTO_HOSPITALAR("itemProcedimentoHospitalar"),
		IPH_PHO_SEQ("itemProcedimentoHospitalar.id.phoSeq"),
		IPH_SEQ("itemProcedimentoHospitalar.id.seq"),
		
		FAT_SERV_CLASSIFICACOES("fatServClassificacoes"),
		FCS_SEQ("fatServClassificacoes.seq");
		
		private String fields;

		private Fields(final String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}

	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getSeq() == null) ? 0 : getSeq().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof FatProcedServicos)) {
			return false;
		}
		FatProcedServicos other = (FatProcedServicos) obj;
		if (getSeq() == null) {
			if (other.getSeq() != null) {
				return false;
			}
		} else if (!getSeq().equals(other.getSeq())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}