package br.gov.mec.aghu.model;

// Generated 11/01/2010 12:19:57 by Hibernate Tools 3.2.5.Beta

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;

import org.apache.lucene.analysis.br.BrazilianAnalyzer;
import org.hibernate.search.annotations.Analyzer;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.Store;
import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.exception.BaseRuntimeException;
import br.gov.mec.aghu.core.exception.BusinessExceptionCode;
import br.gov.mec.aghu.core.lucene.Fonetizador;
import br.gov.mec.aghu.core.persistence.BaseEntityCodigo;

/**
 * AipCidades generated by hbm2java
 */
@Entity
@Table(name = "AIP_CIDADES", schema = "AGH")
@Indexed
@SequenceGenerator(name="aipCidadeSq1", sequenceName="AGH.AIP_CDD_SQ1", allocationSize = 1)
@org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.TRANSACTIONAL)
public class AipCidades extends BaseEntityCodigo<Integer> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8137859645021223610L;
	private Integer codigo;
	private AipUfs aipUf;
	private String nome;
	private Integer cep;
	private Boolean indLogradouro;
	private Integer cepFinal;
	private Integer codGpb;
	private Integer codIbge;
	private DominioSituacao indSituacao;
	private Integer version;
	private Set<AipDistritoSanitarios> aipDistritoSanitarios = new HashSet<AipDistritoSanitarios>(0);
	private Set<AipLogradouros> aipLogradouros = new HashSet<AipLogradouros>(0);
	private Set<AipEnderecosPacientes> aipEnderecosPacientes = new HashSet<AipEnderecosPacientes>(0);
	private Set<AipPacientes> aipPacientes = new HashSet<AipPacientes>(0);
	private Set<RapPessoasFisicas> rapPessoasFisicas = new HashSet<RapPessoasFisicas>(0);
	private Set<MpmPostoSaude> mpmPostoSaudeses = new HashSet<MpmPostoSaude>(0);
	private Set<AipUnidadeOperacao> unidadesOperacao = new HashSet<AipUnidadeOperacao>(0);
	
	private List<ScoFornecedor> fornecedores;
	
	private String tipoLocalidade;
	private Integer codCidade;
	private Integer codigoBaseCorreio;

	private AipCidades aipCidadePertence;
	
	private enum CidadesExceptionCode implements BusinessExceptionCode {
		AIP_CEPFINAL_CIDADE_INVALIDO
	}		

	public AipCidades() {
	}

	public AipCidades(Integer codigo, AipUfs aipUf, String nome, Integer cep,
			Boolean indLogradouro) {
		this.codigo = codigo;
		this.aipUf = aipUf;
		this.nome = nome;
		this.cep = cep;
		this.indLogradouro = indLogradouro;
	}

	public AipCidades(Integer codigo, AipUfs aipUf, String nome, Integer cep,
			Boolean indLogradouro, Integer cepFinal, Integer codGpb,
			Integer codIbge, DominioSituacao indSituacao,
			Set<AipDistritoSanitarios> aipDistritoSanitarios, 
			String tipoLocalidade, Integer codCidade, Integer codigoBaseCorreio) {
		this.codigo = codigo;
		this.aipUf = aipUf;
		this.nome = nome;
		this.cep = cep;
		this.indLogradouro = indLogradouro;
		this.cepFinal = cepFinal;
		this.codGpb = codGpb;
		this.codIbge = codIbge;
		this.indSituacao = indSituacao;
		this.aipDistritoSanitarios = aipDistritoSanitarios;
		this.tipoLocalidade = tipoLocalidade;
		this.codCidade = codCidade;
		this.codigoBaseCorreio = codigoBaseCorreio;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "aipCidadeSq1")
	@Column(name = "CODIGO", nullable = false, precision = 5, scale = 0)
	@DocumentId
	public Integer getCodigo() {
		return this.codigo;
	}

	public void setCodigo(Integer codigo) {
		this.codigo = codigo;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "UF_SIGLA", nullable = false)
	public AipUfs getAipUf() {
		return this.aipUf;
	}

	public void setAipUf(AipUfs aipUf) {
		this.aipUf = aipUf;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "COD_CIDADE", nullable = true, insertable=false, updatable=false)
	public AipCidades getAipCidadePertence() {
		return aipCidadePertence;
	}

	public void setAipCidadePertence(AipCidades aipCidadePertence) {
		this.aipCidadePertence = aipCidadePertence;
	}

	@Column(name = "NOME", nullable = false, length = 40)
	@Length(max = 40)
	@Field(index = Index.YES, store = Store.YES)
	@Analyzer(impl=BrazilianAnalyzer.class)
	public String getNome() {
		return this.nome;
	}
	@Transient
	@Field(index = Index.YES, store = Store.YES)
	public String getNomeFonetico() {
		return Fonetizador.fonetizar(nome);
	}
	
	@Transient
	@Field(index = Index.YES , store = Store.YES)
	public String getNomeOrdenacao(){
		return this.nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	@Column(name = "CEP", nullable = false, precision = 8, scale = 0)
	public Integer getCep() {
		return this.cep;
	}

	public void setCep(Integer cep) {
		this.cep = cep;
	}

	@Column(name = "IND_LOGRADOURO", nullable = false, length = 1)
	@org.hibernate.annotations.Type( type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndLogradouro() {
		return this.indLogradouro;
	}

	public void setIndLogradouro(Boolean indLogradouro) {
		this.indLogradouro = indLogradouro;
	}

	@Column(name = "CEP_FINAL", precision = 8, scale = 0)
	public Integer getCepFinal() {
		return this.cepFinal;
	}

	public void setCepFinal(Integer cepFinal) {
		this.cepFinal = cepFinal;
	}

	@Column(name = "COD_GPB", precision = 6, scale = 0)
	public Integer getCodGpb() {
		return this.codGpb;
	}

	public void setCodGpb(Integer codGpb) {
		this.codGpb = codGpb;
	}

	@Column(name = "COD_IBGE", precision = 8, scale = 0)
	public Integer getCodIbge() {
		return this.codIbge;
	}

	public void setCodIbge(Integer codIbge) {
		this.codIbge = codIbge;
	}

	@Column(name = "IND_SITUACAO", length = 1)
	@Enumerated(EnumType.STRING)
	@Field(index = Index.YES, store = Store.YES)
	@Analyzer(impl=BrazilianAnalyzer.class)
	public DominioSituacao getIndSituacao() {
		return this.indSituacao;
	}

	public void setIndSituacao(DominioSituacao indSituacao) {
		this.indSituacao = indSituacao;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "AIP_CIDADES_DISTRITO_SANITARIO", schema = "AGH", joinColumns = { @JoinColumn(name = "CDD_CODIGO", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "DST_CODIGO", nullable = false, updatable = false) })
	public Set<AipDistritoSanitarios> getAipDistritoSanitarios() {
		return this.aipDistritoSanitarios;
	}

	public void setAipDistritoSanitarios(
			Set<AipDistritoSanitarios> aipDistritoSanitarios) {
		this.aipDistritoSanitarios = aipDistritoSanitarios;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aipCidade")
	public Set<AipLogradouros> getAipLogradouros() {
		return this.aipLogradouros;
	}

	public void setAipLogradouros(Set<AipLogradouros> aipLogradouros) {
		this.aipLogradouros = aipLogradouros;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aipCidade")
	public Set<AipEnderecosPacientes> getAipEnderecosPacientes() {
		return this.aipEnderecosPacientes;
	}

	public void setAipEnderecosPacientes(
			Set<AipEnderecosPacientes> aipEnderecosPacientes) {
		this.aipEnderecosPacientes = aipEnderecosPacientes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aipCidades")
	public Set<AipPacientes> getAipPacientes() {
		return this.aipPacientes;
	}

	public void setAipPacientes(Set<AipPacientes> aipPacientes) {
		this.aipPacientes = aipPacientes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aipCidades")
	public Set<RapPessoasFisicas> getRapPessoasFisicas() {
		return this.rapPessoasFisicas;
	}

	public void setRapPessoasFisicas(Set<RapPessoasFisicas> rapPessoasFisicas) {
		this.rapPessoasFisicas = rapPessoasFisicas;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cidade")
	public Set<MpmPostoSaude> getMpmPostoSaudeses() {
		return this.mpmPostoSaudeses;
	}

	public void setMpmPostoSaudeses(Set<MpmPostoSaude> mpmPostoSaudeses) {
		this.mpmPostoSaudeses = mpmPostoSaudeses;
	}
	
	@Override
	public String toString() {
		return getCodigo().toString();
	}
	
	/**
	 * Campo sint√©tico criado para mapear diretamente este dominio booleano em
	 * um componente selectOneCheckBox
	 * 
	 * @author jvaranda
	 * @return
	 */
	@Transient
	public boolean isAtivo() {
		if (this.indSituacao != null && this.indSituacao.isAtivo()) {
			return Boolean.TRUE;
		} else {
			return Boolean.FALSE;
		}
	}
	
	@Transient
	public void setAtivo(boolean ativo) {
		if (ativo) {
			this.indSituacao = DominioSituacao.A;
		} else {
			this.indSituacao = DominioSituacao.I;
		}
	}
	
	@PrePersist
	@PreUpdate
	@SuppressWarnings("unused")
	private void validacoes() {
		// Valores default da tabela
		if (this.indLogradouro == null) {
			this.indLogradouro = false;
		}
		if (this.indSituacao == null) {
			this.indSituacao = DominioSituacao.A;
		}
		// Constraint AIP_CDD_CK2
		if (this.cepFinal != null && this.cep != null && this.cepFinal < this.cep) {
			throw new BaseRuntimeException(CidadesExceptionCode.AIP_CEPFINAL_CIDADE_INVALIDO);
		}
	}	
	
	public enum Fields {
		CODIGO("codigo"), 
		NOME("nome"), 
		IND_SITUACAO("indSituacao"), 
		CEP("cep"), 
		CEP_FINAL("cepFinal"), 
		COD_IBGE("codIbge"), 
		UF_SIGLA("aipUf.sigla"), 
		IND_LOGRADOURO("indLogradouro"),
		DISTRITOS_SANITARIOS("aipDistritoSanitarios"), 
		NOME_FONETICO("nomeFonetico"),
		UF("aipUf"),
		NOME_ORDENACAO("nomeOrdenacao"),
		TIPO_LOCALIDADE("tipoLocalidade"),
		COD_CIDADE("codCidade"),
		CODIGO_BASE_CORREIO("codigoBaseCorreio"),
		CIDADE_PERTENCE("aipCidadePertence"),
		UNIDADES_OPERACAO("unidadesOperacao");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((this.getCodigo() == null) ? 0 : this.getCodigo().hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}		
		if(!(obj instanceof AipCidades)){		
			return false;
		}
		
		
		AipCidades other = (AipCidades) obj;
		if (this.getCodigo() == null) {
			if (other.getCodigo() != null) {
				return false;
			}
		} else if (!this.getCodigo().equals(other.getCodigo())) {
			return false;
		}
		return true;
	}
	
	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}	
	
	@Transient
	public String getIndLogradouroFormat(){
		if (getIndLogradouro() != null && getIndLogradouro()) {
			return "Sim";
		} else {
			return "N√£o";
		}
	}

	public void setFornecedores(List<ScoFornecedor> fornecedores) {
		this.fornecedores = fornecedores;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cidade")
	public List<ScoFornecedor> getFornecedores() {
		return fornecedores;
	}
	
	public void setTipoLocalidade(String tipoLocalidade) {
		this.tipoLocalidade = tipoLocalidade;
	}

	@Column(name = "TIPO_LOCALIDADE", nullable = true)
	@Length(max = 1)
	public String getTipoLocalidade() {
		return this.tipoLocalidade;
	}

	public void setCodCidade(Integer codCidade) {
		this.codCidade = codCidade;
	}

	@Column(name = "COD_CIDADE", nullable = true)
	public Integer getCodCidade() {
		return this.codCidade;
	}
	
	public void setCodigoBaseCorreio(Integer codigoBaseCorreio) {
		this.codigoBaseCorreio = codigoBaseCorreio;
	}
	
	@Column(name = "CODIGO_BASE_CORREIO", nullable = true)
	public Integer getCodigoBaseCorreio() {
		return this.codigoBaseCorreio;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cidade")
	public Set<AipUnidadeOperacao> getUnidadesOperacao() {
		return unidadesOperacao;
	}

	public void setUnidadesOperacao(Set<AipUnidadeOperacao> unidadesOperacao) {
		this.unidadesOperacao = unidadesOperacao;
	}
	
}
