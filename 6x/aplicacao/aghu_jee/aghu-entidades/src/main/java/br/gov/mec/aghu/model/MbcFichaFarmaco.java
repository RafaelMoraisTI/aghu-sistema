package br.gov.mec.aghu.model;

// Generated 28/03/2012 15:17:44 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.Version;


import br.gov.mec.aghu.core.persistence.BaseEntitySeq;

/**
 * MbcFichaFarmacos generated by hbm2java
 */
@Entity
@SequenceGenerator(name="mbcFfaSq1", sequenceName="AGH.MBC_FFA_SQ1", allocationSize = 1)
@Table(name = "MBC_FICHA_FARMACOS", schema = "AGH")
public class MbcFichaFarmaco extends BaseEntitySeq<Integer> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4392859973185025288L;
	private Integer seq;
	private Integer version;
	private MbcFichaAnestesias mbcFichaAnestesias;
	private MbcAdministraFichaFluido mbcAdministraFichaFluidos;
	private Double concentracaoMg;
	private Short concentracaoMl;
	private Double concentracaoPercent;
	private Boolean infusao;
	private Float concentracaoAlvo;
	private Date criadoEm;
	private RapServidores servidor;
	private AfaViaAdministracao viaAdministracao;
	private AfaFormaDosagem formaDosagem;
	private MpmUnidadeMedidaMedica unidadeMedidaMedica;
	private AfaMedicamento medicamento;
	private Boolean permaneceNoPos;
	private Double doseTotalAdministrada;

	public MbcFichaFarmaco(Integer seq, Integer version,
			MbcFichaAnestesias mbcFichaAnestesias,
			MbcAdministraFichaFluido mbcAdministraFichaFluidos,
			Double concentracaoMg, Short concentracaoMl,
			Double concentracaoPercent, Boolean infusao, Float concentracaoAlvo,
			Date criadoEm, RapServidores servidor,
			AfaViaAdministracao viaAdministracao, AfaFormaDosagem formaDosagem,
			MpmUnidadeMedidaMedica unidadeMedidaMedica,
			AfaMedicamento medicamento, Boolean permaneceNoPos,
			Double doseTotalAdministrada) {
		super();
		this.seq = seq;
		this.version = version;
		this.mbcFichaAnestesias = mbcFichaAnestesias;
		this.mbcAdministraFichaFluidos = mbcAdministraFichaFluidos;
		this.concentracaoMg = concentracaoMg;
		this.concentracaoMl = concentracaoMl;
		this.concentracaoPercent = concentracaoPercent;
		this.infusao = infusao;
		this.concentracaoAlvo = concentracaoAlvo;
		this.criadoEm = criadoEm;
		this.servidor = servidor;
		this.viaAdministracao = viaAdministracao;
		this.formaDosagem = formaDosagem;
		this.unidadeMedidaMedica = unidadeMedidaMedica;
		this.medicamento = medicamento;
		this.permaneceNoPos = permaneceNoPos;
		this.doseTotalAdministrada = doseTotalAdministrada;
	}

	public MbcFichaFarmaco() {
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "mbcFfaSq1")
	@Column(name = "SEQ", unique = true, nullable = false)
	public Integer getSeq() {
		return this.seq;
	}

	public void setSeq(Integer seq) {
		this.seq = seq;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FIC_SEQ", nullable = false)
	public MbcFichaAnestesias getMbcFichaAnestesias() {
		return this.mbcFichaAnestesias;
	}

	public void setMbcFichaAnestesias(MbcFichaAnestesias mbcFichaAnestesias) {
		this.mbcFichaAnestesias = mbcFichaAnestesias;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "AFF_SEQ")
	public MbcAdministraFichaFluido getMbcAdministraFichaFluidos() {
		return this.mbcAdministraFichaFluidos;
	}

	public void setMbcAdministraFichaFluidos(
			MbcAdministraFichaFluido mbcAdministraFichaFluidos) {
		this.mbcAdministraFichaFluidos = mbcAdministraFichaFluidos;
	}

	@Column(name = "CONCENTRACAO_MG", precision = 17, scale = 17)
	public Double getConcentracaoMg() {
		return this.concentracaoMg;
	}

	public void setConcentracaoMg(Double concentracaoMg) {
		this.concentracaoMg = concentracaoMg;
	}

	@Column(name = "CONCENTRACAO_ML")
	public Short getConcentracaoMl() {
		return this.concentracaoMl;
	}

	public void setConcentracaoMl(Short concentracaoMl) {
		this.concentracaoMl = concentracaoMl;
	}

	@Column(name = "CONCENTRACAO_PERCENT", precision = 17, scale = 17)
	public Double getConcentracaoPercent() {
		return this.concentracaoPercent;
	}

	public void setConcentracaoPercent(Double concentracaoPercent) {
		this.concentracaoPercent = concentracaoPercent;
	}

	@Column(name = "INFUSAO", length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getInfusao() {
		return this.infusao;
	}

	public void setInfusao(Boolean infusao) {
		this.infusao = infusao;
	}

	@Column(name = "CONCENTRACAO_ALVO", precision = 8, scale = 8)
	public Float getConcentracaoAlvo() {
		return this.concentracaoAlvo;
	}

	public void setConcentracaoAlvo(Float concentracaoAlvo) {
		this.concentracaoAlvo = concentracaoAlvo;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 29)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Column(name = "PERMANECE_NO_POS", length = 1)//Default False
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getPermaneceNoPos() {
		return this.permaneceNoPos;
	}

	public void setPermaneceNoPos(Boolean permaneceNoPos) {
		this.permaneceNoPos = permaneceNoPos;
	}

	@Column(name = "DOSE_TOTAL_ADMINISTRADA", precision = 17, scale = 17)
	public Double getDoseTotalAdministrada() {
		return this.doseTotalAdministrada;
	}

	public void setDoseTotalAdministrada(Double doseTotalAdministrada) {
		this.doseTotalAdministrada = doseTotalAdministrada;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
		@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA"),
		@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO")})
	public RapServidores getServidor() {
		return servidor;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "VAD_SIGLA", referencedColumnName = "SIGLA")
	public AfaViaAdministracao getViaAdministracao() {
		return viaAdministracao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FDS_SEQ", referencedColumnName = "SEQ")
	public AfaFormaDosagem getFormaDosagem() {
		return formaDosagem;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UMM_SEQ", referencedColumnName = "SEQ")
	public MpmUnidadeMedidaMedica getUnidadeMedidaMedica() {
		return unidadeMedidaMedica;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MED_MAT_CODIGO", referencedColumnName = "MAT_CODIGO", nullable = false)
	public AfaMedicamento getMedicamento() {
		return medicamento;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}

	public void setViaAdministracao(AfaViaAdministracao viaAdministracao) {
		this.viaAdministracao = viaAdministracao;
	}

	public void setFormaDosagem(AfaFormaDosagem formaDosagem) {
		this.formaDosagem = formaDosagem;
	}

	public void setUnidadeMedidaMedica(MpmUnidadeMedidaMedica unidadeMedidaMedica) {
		this.unidadeMedidaMedica = unidadeMedidaMedica;
	}

	public void setMedicamento(AfaMedicamento medicamento) {
		this.medicamento = medicamento;
	}
	
	@Transient
	public String getConcentracaoSiglaInfusao(){
		StringBuffer conc = new StringBuffer();
		if(concentracaoPercent != null){
			conc.append(concentracaoPercent);
			conc.append('%');
		}
		conc.append('/')
		.append(getViaAdministracao().getSigla());
		if(infusao != null && infusao){
			conc.append("(Infus√£o)");
		}
		
		return conc.toString();
	}

	public enum Fields {

		SEQ("seq"),
		MBC_FICHA_ANESTESIAS("mbcFichaAnestesias"),
		FIQ_SEQ("mbcFichaAnestesias.seq"),
		MBC_ADMINISTRA_FICHA_FLUIDOS("mbcAdministraFichaFluidos"),
		CONCENTRACAO_MG("concentracaoMg"),
		CONCENTRACAO_ML("concentracaoMl"),
		CONCENTRACAO_PERCENT("concentracaoPercent"),
		INFUSAO("infusao"),
		CONCENTRACAO_ALVO("concentracaoAlvo"),
		CRIADO_EM("criadoEm"),
		PERMANECE_NO_POS("permaneceNoPos"),
		DOSE_TOTAL_ADMINISTRADA("doseTotalAdministrada"),
		MEDICAMENTO("medicamento"),
		FORMA_DOSAGEM("formaDosagem"),
		UNIDADE_MEDIDA_MEDICA("unidadeMedidaMedica");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getSeq() == null) ? 0 : getSeq().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MbcFichaFarmaco)) {
			return false;
		}
		MbcFichaFarmaco other = (MbcFichaFarmaco) obj;
		if (getSeq() == null) {
			if (other.getSeq() != null) {
				return false;
			}
		} else if (!getSeq().equals(other.getSeq())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
