package br.gov.mec.aghu.model;

// Generated 09/04/2012 16:32:53 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Version;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AbsRegSanguineoDoador generated by hbm2java
 */
@Entity
@Table(name = "ABS_REG_SANGUINEO_DOADORES", schema = "AGH")
public class AbsRegSanguineoDoador extends BaseEntityId<AbsRegSanguineoDoadorId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7973485231393796135L;
	private AbsRegSanguineoDoadorId id;
	private Integer version;
	private RapServidores rapServidores;
	private AbsCandidatosDoadores absCandidatosDoadores;
	private String grupoSanguineo;
	private String fatorRh;
	private String df;
	private String pesqAnticIrregular;
	private String observacao;
	private Float hemoglobina;
	private String reversaA;
	private String reversaB;
	private Set<AbsAnticorpoDoador> absAnticorpoDoadores = new HashSet<AbsAnticorpoDoador>(0);

	public AbsRegSanguineoDoador() {
	}

	public AbsRegSanguineoDoador(AbsRegSanguineoDoadorId id, RapServidores rapServidores,
			AbsCandidatosDoadores absCandidatosDoadores, String grupoSanguineo, String fatorRh) {
		this.id = id;
		this.rapServidores = rapServidores;
		this.absCandidatosDoadores = absCandidatosDoadores;
		this.grupoSanguineo = grupoSanguineo;
		this.fatorRh = fatorRh;
	}

	public AbsRegSanguineoDoador(AbsRegSanguineoDoadorId id, RapServidores rapServidores,
			AbsCandidatosDoadores absCandidatosDoadores, String grupoSanguineo, String fatorRh, String df, String pesqAnticIrregular,
			String observacao, Float hemoglobina, String reversaA, String reversaB, Set<AbsAnticorpoDoador> absAnticorpoDoadores) {
		this.id = id;
		this.rapServidores = rapServidores;
		this.absCandidatosDoadores = absCandidatosDoadores;
		this.grupoSanguineo = grupoSanguineo;
		this.fatorRh = fatorRh;
		this.df = df;
		this.pesqAnticIrregular = pesqAnticIrregular;
		this.observacao = observacao;
		this.hemoglobina = hemoglobina;
		this.reversaA = reversaA;
		this.reversaB = reversaB;
		this.absAnticorpoDoadores = absAnticorpoDoadores;
	}

	@EmbeddedId
	@AttributeOverrides({ @AttributeOverride(name = "cadSeq", column = @Column(name = "CAD_SEQ", nullable = false)),
			@AttributeOverride(name = "dthrRegistro", column = @Column(name = "DTHR_REGISTRO", nullable = false, length = 29)) })
	public AbsRegSanguineoDoadorId getId() {
		return this.id;
	}

	public void setId(AbsRegSanguineoDoadorId id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getRapServidores() {
		return this.rapServidores;
	}

	public void setRapServidores(RapServidores rapServidores) {
		this.rapServidores = rapServidores;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CAD_SEQ", nullable = false, insertable = false, updatable = false)
	public AbsCandidatosDoadores getAbsCandidatosDoadores() {
		return this.absCandidatosDoadores;
	}

	public void setAbsCandidatosDoadores(AbsCandidatosDoadores absCandidatosDoadores) {
		this.absCandidatosDoadores = absCandidatosDoadores;
	}

	@Column(name = "GRUPO_SANGUINEO", nullable = false, length = 2)
	@Length(max = 2)
	public String getGrupoSanguineo() {
		return this.grupoSanguineo;
	}

	public void setGrupoSanguineo(String grupoSanguineo) {
		this.grupoSanguineo = grupoSanguineo;
	}

	@Column(name = "FATOR_RH", nullable = false, length = 1)
	@Length(max = 1)
	public String getFatorRh() {
		return this.fatorRh;
	}

	public void setFatorRh(String fatorRh) {
		this.fatorRh = fatorRh;
	}

	@Column(name = "DF", length = 1)
	@Length(max = 1)
	public String getDf() {
		return this.df;
	}

	public void setDf(String df) {
		this.df = df;
	}

	@Column(name = "PESQ_ANTIC_IRREGULAR", length = 1)
	@Length(max = 1)
	public String getPesqAnticIrregular() {
		return this.pesqAnticIrregular;
	}

	public void setPesqAnticIrregular(String pesqAnticIrregular) {
		this.pesqAnticIrregular = pesqAnticIrregular;
	}

	@Column(name = "OBSERVACAO", length = 200)
	@Length(max = 200)
	public String getObservacao() {
		return this.observacao;
	}

	public void setObservacao(String observacao) {
		this.observacao = observacao;
	}

	@Column(name = "HEMOGLOBINA", precision = 8, scale = 8)
	public Float getHemoglobina() {
		return this.hemoglobina;
	}

	public void setHemoglobina(Float hemoglobina) {
		this.hemoglobina = hemoglobina;
	}

	@Column(name = "REVERSA_A", length = 1)
	@Length(max = 1)
	public String getReversaA() {
		return this.reversaA;
	}

	public void setReversaA(String reversaA) {
		this.reversaA = reversaA;
	}

	@Column(name = "REVERSA_B", length = 1)
	@Length(max = 1)
	public String getReversaB() {
		return this.reversaB;
	}

	public void setReversaB(String reversaB) {
		this.reversaB = reversaB;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "absRegSanguineoDoador")
	public Set<AbsAnticorpoDoador> getAbsAnticorpoDoadores() {
		return this.absAnticorpoDoadores;
	}

	public void setAbsAnticorpoDoadores(Set<AbsAnticorpoDoador> absAnticorpoDoadores) {
		this.absAnticorpoDoadores = absAnticorpoDoadores;
	}

	public enum Fields {

		ID("id"),
		VERSION("version"),
		RAP_SERVIDORES("rapServidores"),
		ABS_CANDIDATOS_DOADORES("absCandidatosDoadores"),
		GRUPO_SANGUINEO("grupoSanguineo"),
		FATOR_RH("fatorRh"),
		DF("df"),
		PESQ_ANTIC_IRREGULAR("pesqAnticIrregular"),
		OBSERVACAO("observacao"),
		HEMOGLOBINA("hemoglobina"),
		REVERSA_A("reversaA"),
		REVERSA_B("reversaB"),
		ABS_ANTICORPO_DOADORES("absAnticorpoDoadores");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof AbsRegSanguineoDoador)) {
			return false;
		}
		AbsRegSanguineoDoador other = (AbsRegSanguineoDoador) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
