package br.gov.mec.aghu.model;

// Generated 14/09/2010 17:49:55 by Hibernate Tools 3.2.5.Beta

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.commons.CoreUtil;
import br.gov.mec.aghu.core.exception.BaseRuntimeException;
import br.gov.mec.aghu.core.exception.BusinessExceptionCode;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * MpmEsquemaTbUtilizado generated by hbm2java
 */
@Entity
@Table(name = "MPM_ESQUEMA_TB_UTILIZADOS", schema = "AGH")

public class MpmEsquemaTbUtilizado extends BaseEntityId<MpmEsquemaTbUtilizadoId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1496718106554741852L;
	private MpmEsquemaTbUtilizadoId id;
	private MpmTipoEsquemaTb tipoEsquemaTbs;
	private RapServidores servidor;
	private Date dtInicio;
	private String justificativa;
	private Date criadoEm;
	private String descricao;
	private Date dtFim;

	private enum EsquemaTbUtilizadosExceptionCode implements BusinessExceptionCode {
		MPM_ETU_CK1
	}
	
	public MpmEsquemaTbUtilizado() {
	}

	public MpmEsquemaTbUtilizado(MpmEsquemaTbUtilizadoId id,
			MpmTipoEsquemaTb tipoEsquemaTbs, RapServidores servidor,
			Date dtInicio, String justificativa,Date criadoEm) {
		this.id = id;
		this.tipoEsquemaTbs = tipoEsquemaTbs;
		this.servidor = servidor;
		this.dtInicio = dtInicio;
		this.justificativa = justificativa;
		this.criadoEm = criadoEm;
	}

	public MpmEsquemaTbUtilizado(MpmEsquemaTbUtilizadoId id,
			MpmTipoEsquemaTb tipoEsquemaTbs, RapServidores servidor,
			Date dtInicio, String justificativa,
			Date criadoEm, String descricao, Date dtFim) {
		this.id = id;
		this.tipoEsquemaTbs = tipoEsquemaTbs;
		this.servidor = servidor;
		this.dtInicio = dtInicio;
		this.justificativa = justificativa;
		this.criadoEm = criadoEm;
		this.descricao = descricao;
		this.dtFim = dtFim;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "atdSeq", column = @Column(name = "ATD_SEQ", nullable = false, precision = 7, scale = 0)),
			@AttributeOverride(name = "tetSeq", column = @Column(name = "TET_SEQ", nullable = false, precision = 3, scale = 0)),
			@AttributeOverride(name = "seqp", column = @Column(name = "SEQP", nullable = false, precision = 8, scale = 0)) })
	public MpmEsquemaTbUtilizadoId getId() {
		return this.id;
	}

	public void setId(MpmEsquemaTbUtilizadoId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TET_SEQ", nullable = false, insertable = false, updatable = false)
	public MpmTipoEsquemaTb getTipoEsquemaTbs() {
		return this.tipoEsquemaTbs;
	}

	public void setTipoEsquemaTbs(MpmTipoEsquemaTb tipoEsquemaTbs) {
		this.tipoEsquemaTbs = tipoEsquemaTbs;
	}

	/**
	 * @return the servidor
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidor() {
		return this.servidor;
	}
	
	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}


	@Temporal(TemporalType.DATE)//Permanece como Date pois não utiliza hora
	@Column(name = "DT_INICIO", nullable = false, length = 7)
	public Date getDtInicio() {
		return this.dtInicio;
	}

	public void setDtInicio(Date dtInicio) {
		this.dtInicio = dtInicio;
	}

	@Column(name = "JUSTIFICATIVA", nullable = false, length = 500)
	@Length(max = 500, message="A justificativa possui mais de 500 caracteres.")
	public String getJustificativa() {
		return this.justificativa;
	}

	public void setJustificativa(String justificativa) {
		this.justificativa = justificativa;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 7)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Column(name = "DESCRICAO", length = 240)
	@Length(max = 240, message="A descrição possui mais de 240 caracteres.")
	public String getDescricao() {
		return this.descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}

	@Temporal(TemporalType.DATE)//Permanece como Date pois não utiliza hora
	@Column(name = "DT_FIM", length = 7)
	public Date getDtFim() {
		return this.dtFim;
	}

	public void setDtFim(Date dtFim) {
		this.dtFim = dtFim;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		MpmEsquemaTbUtilizado other = (MpmEsquemaTbUtilizado) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		return true;
	}


	public enum Fields {
		ID("id"),
		TIPO_ESQUEMA_TBS("tipoEsquemaTbs"),
		SERVIDOR("servidor"),
		DT_INICIO("dtInicio"),
		JUSTIFICATIVA("justificativa"),
		CRIADO_EM("criadoEm"),
		DESCRICAO("descricao"),
		DT_FIM("dtFim");
		
		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}

	@PrePersist
	@PreUpdate
	@SuppressWarnings("unused")
	private void validarDados(){
		if(!(this.dtFim == null || CoreUtil.isMenorOuIgualDatas(this.dtFim, this.dtInicio))){
			throw new BaseRuntimeException(EsquemaTbUtilizadosExceptionCode.MPM_ETU_CK1);
		}
	}
	
}
