package br.gov.mec.aghu.model;

// Generated 14/09/2010 17:49:55 by Hibernate Tools 3.2.5.Beta

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * MpmAprazamentoFrequencia generated by hbm2java
 */

@Entity
@Table(name = "MPM_APRAZAMENTO_FREQUENCIAS", schema = "AGH")
public class MpmAprazamentoFrequencia extends BaseEntityId<MpmAprazamentoFrequenciaId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8682839795898484852L;
	private MpmAprazamentoFrequenciaId id;
	private MpmTipoFrequenciaAprazamento tipoFreqAprazamento;
	private String descricao;
	private RapServidores servidor;
	private Date horario;
	private Date criadoEm;
	private DominioSituacao situacao;

	public MpmAprazamentoFrequencia() {
	}

	public MpmAprazamentoFrequencia(MpmAprazamentoFrequenciaId id,
			MpmTipoFrequenciaAprazamento tipoFreqAprazamento, RapServidores servidor,
			String descricao, Date criadoEm,
			DominioSituacao situacao) {
		this.id = id;
		this.tipoFreqAprazamento = tipoFreqAprazamento;
		this.descricao = descricao;
		this.servidor = servidor;
		this.criadoEm = criadoEm;
		this.situacao = situacao;
	}

	public MpmAprazamentoFrequencia(MpmAprazamentoFrequenciaId id,
			MpmTipoFrequenciaAprazamento tipoFreqAprazamento, 
			String descricao, RapServidores servidor, Date horario, Date criadoEm,
			DominioSituacao situacao) {
		this.id = id;
		this.tipoFreqAprazamento = tipoFreqAprazamento;
		this.descricao = descricao;
		this.servidor = servidor;
		this.horario = horario;
		this.criadoEm = criadoEm;
		this.situacao = situacao;
	}

	@PrePersist
	@PreUpdate
	@SuppressWarnings("unused")
	private void convertTextoMaiusculo(){
		descricao = descricao!=null?descricao.toUpperCase():null;
	}	
	
	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "tfqSeq", column = @Column(name = "TFQ_SEQ", nullable = false, precision = 4, scale = 0)),
			@AttributeOverride(name = "seqp", column = @Column(name = "SEQP", nullable = false, precision = 4, scale = 0)) })
	public MpmAprazamentoFrequenciaId getId() {
		return this.id;
	}

	public void setId(MpmAprazamentoFrequenciaId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TFQ_SEQ", nullable = false, insertable = false, updatable = false)
	public MpmTipoFrequenciaAprazamento getTipoFreqAprazamento() {
		return this.tipoFreqAprazamento;
	}

	public void setTipoFreqAprazamento(
			MpmTipoFrequenciaAprazamento tipoFreqAprazamento) {
		this.tipoFreqAprazamento = tipoFreqAprazamento;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO") })
	public RapServidores getServidor() {
		return this.servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}

	@Column(name = "DESCRICAO", nullable = false, length = 20)
	@Length(max = 20)
	public String getDescricao() {
		return this.descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "HORARIO", length = 7)
	public Date getHorario() {
		return this.horario;
	}

	public void setHorario(Date horario) {
		this.horario = horario;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 7)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Column(name = "IND_SITUACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getSituacao() {
		return this.situacao;
	}

	public void setSituacao(DominioSituacao situacao) {
		this.situacao = situacao;
	}


	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		MpmAprazamentoFrequencia other = (MpmAprazamentoFrequencia) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		return true;
	}
	
	public enum Fields {
		
		TIPO_FREQUENCIA_APRAZAMENTO("tipoFreqAprazamento"), SEQP("id.seqp"),
		RAP_SERVIDOR("servidor"),
		RAP_SERVIDOR_PESSOA_FISICA("servidor.pessoaFisica");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}

	@Transient
	public String getHorarioFormatado() {
		if (this.getHorario() != null) {
			DateFormat dateFormat = new SimpleDateFormat("HH:mm");
			return dateFormat.format(this.getHorario());	
		}
		return "";	
	}
	
	@Transient
	public String getCriadoEmFormatado() {
		if (this.getCriadoEm() != null) {
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");
			return dateFormat.format(this.getCriadoEm());
		}
		return "";
	}
	
}
