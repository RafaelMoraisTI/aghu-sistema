package br.gov.mec.aghu.model;

// Generated 09/04/2012 16:32:53 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.persistence.BaseEntitySeq;

/**
 * EceItemAdministrado generated by hbm2java
 */
@Entity
@SequenceGenerator(name="eceIadSq1", sequenceName="AGH.ECE_IAD_SQ1", allocationSize = 1)
@Table(name = "ECE_ITEM_ADMINISTRADOS", schema = "AGH")
public class EceItemAdministrado extends BaseEntitySeq<Integer> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1492888442204729521L;
	private Integer seq;
	private Integer version;
	private MptPrescricaoProcedimento mptPrescricaoProcedimento;
	private MpmComposicaoPrescricaoNpt mpmComposicaoPrescricaoNpt;
	private EpePrescricoesCuidados epePrescricoesCuidados;
	private MpmPrescricaoMdto mpmPrescricaoMdto;
	private AbsSolicitacoesHemoterapicas absSolicitacoesHemoterapicas;
	private FatProcedHospInternos fatProcedHospInternos;
	private RapServidores rapServidores;
	private EceItemAdministrado eceItemAdministrado;
	private MptPrescricaoMedicamento mptPrescricaoMedicamento;
	private MpmPrescricaoCuidado mpmPrescricaoCuidado;
	private MpmTipoFrequenciaAprazamento mpmTipoFrequenciaAprazamento;
	private MpmItemPrescricaoDieta mpmItemPrescricaoDieta;
	private MptPrescricaoCuidado mptPrescricaoCuidado;
	private MpmPrescricaoProcedimento mpmPrescricaoProcedimento;
	private AbsItensSolHemoterapicas absItensSolHemoterapicas;
	private String descricao;
	private String tipoItem;
	private String tipoPrescricao;
	private String situacao;
	private Double quantidade;
	private Short frequencia;
	private String indSeNecessario;
	private Date alteradoEm;
	private Date criadoEm;
	private Set<EceItemAdministrado> eceItemAdministradoes = new HashSet<EceItemAdministrado>(0);
	private Set<EceHorarioAdministrado> eceHorarioAdministradoes = new HashSet<EceHorarioAdministrado>(0);

	public EceItemAdministrado() {
	}

	public EceItemAdministrado(Integer seq, RapServidores rapServidores, String tipoItem, String tipoPrescricao, Date criadoEm) {
		this.seq = seq;
		this.rapServidores = rapServidores;
		this.tipoItem = tipoItem;
		this.tipoPrescricao = tipoPrescricao;
		this.criadoEm = criadoEm;
	}

	@SuppressWarnings({"PMD.ExcessiveParameterList"})
	public EceItemAdministrado(Integer seq, MptPrescricaoProcedimento mptPrescricaoProcedimento,
			MpmComposicaoPrescricaoNpt mpmComposicaoPrescricaoNpt, EpePrescricoesCuidados epePrescricoesCuidados,
			MpmPrescricaoMdto mpmPrescricaoMdto, AbsSolicitacoesHemoterapicas absSolicitacoesHemoterapicas,
			FatProcedHospInternos fatProcedHospInternos, RapServidores rapServidores, EceItemAdministrado eceItemAdministrado,
			MptPrescricaoMedicamento mptPrescricaoMedicamento, MpmPrescricaoCuidado mpmPrescricaoCuidado,
			MpmTipoFrequenciaAprazamento mpmTipoFrequenciaAprazamento, MpmItemPrescricaoDieta mpmItemPrescricaoDieta,
			MptPrescricaoCuidado mptPrescricaoCuidado, MpmPrescricaoProcedimento mpmPrescricaoProcedimento,
			AbsItensSolHemoterapicas absItensSolHemoterapicas, String descricao, String tipoItem, String tipoPrescricao,
			String situacao, Double quantidade, Short frequencia, String indSeNecessario, Date alteradoEm, Date criadoEm,
			Set<EceItemAdministrado> eceItemAdministradoes, Set<EceHorarioAdministrado> eceHorarioAdministradoes) {
		this.seq = seq;
		this.mptPrescricaoProcedimento = mptPrescricaoProcedimento;
		this.mpmComposicaoPrescricaoNpt = mpmComposicaoPrescricaoNpt;
		this.epePrescricoesCuidados = epePrescricoesCuidados;
		this.mpmPrescricaoMdto = mpmPrescricaoMdto;
		this.absSolicitacoesHemoterapicas = absSolicitacoesHemoterapicas;
		this.fatProcedHospInternos = fatProcedHospInternos;
		this.rapServidores = rapServidores;
		this.eceItemAdministrado = eceItemAdministrado;
		this.mptPrescricaoMedicamento = mptPrescricaoMedicamento;
		this.mpmPrescricaoCuidado = mpmPrescricaoCuidado;
		this.mpmTipoFrequenciaAprazamento = mpmTipoFrequenciaAprazamento;
		this.mpmItemPrescricaoDieta = mpmItemPrescricaoDieta;
		this.mptPrescricaoCuidado = mptPrescricaoCuidado;
		this.mpmPrescricaoProcedimento = mpmPrescricaoProcedimento;
		this.absItensSolHemoterapicas = absItensSolHemoterapicas;
		this.descricao = descricao;
		this.tipoItem = tipoItem;
		this.tipoPrescricao = tipoPrescricao;
		this.situacao = situacao;
		this.quantidade = quantidade;
		this.frequencia = frequencia;
		this.indSeNecessario = indSeNecessario;
		this.alteradoEm = alteradoEm;
		this.criadoEm = criadoEm;
		this.eceItemAdministradoes = eceItemAdministradoes;
		this.eceHorarioAdministradoes = eceHorarioAdministradoes;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "eceIadSq1")
	@Column(name = "SEQ", unique = true, nullable = false)
	public Integer getSeq() {
		return this.seq;
	}

	public void setSeq(Integer seq) {
		this.seq = seq;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PAO_SEQ")
	public MptPrescricaoProcedimento getMptPrescricaoProcedimento() {
		return this.mptPrescricaoProcedimento;
	}

	public void setMptPrescricaoProcedimento(MptPrescricaoProcedimento mptPrescricaoProcedimento) {
		this.mptPrescricaoProcedimento = mptPrescricaoProcedimento;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "CPT_PNP_ATD_SEQ", referencedColumnName = "PNP_ATD_SEQ"),
			@JoinColumn(name = "CPT_PNP_SEQ", referencedColumnName = "PNP_SEQ"),
			@JoinColumn(name = "CPT_SEQP", referencedColumnName = "SEQP") })
	public MpmComposicaoPrescricaoNpt getMpmComposicaoPrescricaoNpt() {
		return this.mpmComposicaoPrescricaoNpt;
	}

	public void setMpmComposicaoPrescricaoNpt(MpmComposicaoPrescricaoNpt mpmComposicaoPrescricaoNpt) {
		this.mpmComposicaoPrescricaoNpt = mpmComposicaoPrescricaoNpt;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "PRC_ATD_SEQ", referencedColumnName = "ATD_SEQ"),
			@JoinColumn(name = "PRC_SEQ", referencedColumnName = "SEQ") })
	public EpePrescricoesCuidados getEpePrescricoesCuidados() {
		return this.epePrescricoesCuidados;
	}

	public void setEpePrescricoesCuidados(EpePrescricoesCuidados epePrescricoesCuidados) {
		this.epePrescricoesCuidados = epePrescricoesCuidados;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "PMD_ATD_SEQ", referencedColumnName = "ATD_SEQ"),
			@JoinColumn(name = "PMD_SEQ", referencedColumnName = "SEQ") })
	public MpmPrescricaoMdto getMpmPrescricaoMdto() {
		return this.mpmPrescricaoMdto;
	}

	public void setMpmPrescricaoMdto(MpmPrescricaoMdto mpmPrescricaoMdto) {
		this.mpmPrescricaoMdto = mpmPrescricaoMdto;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SHE_ATD_SEQ", referencedColumnName = "ATD_SEQ"),
			@JoinColumn(name = "SHE_SEQ", referencedColumnName = "SEQ") })
	public AbsSolicitacoesHemoterapicas getAbsSolicitacoesHemoterapicas() {
		return this.absSolicitacoesHemoterapicas;
	}

	public void setAbsSolicitacoesHemoterapicas(AbsSolicitacoesHemoterapicas absSolicitacoesHemoterapicas) {
		this.absSolicitacoesHemoterapicas = absSolicitacoesHemoterapicas;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PHI_SEQ")
	public FatProcedHospInternos getFatProcedHospInternos() {
		return this.fatProcedHospInternos;
	}

	public void setFatProcedHospInternos(FatProcedHospInternos fatProcedHospInternos) {
		this.fatProcedHospInternos = fatProcedHospInternos;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getRapServidores() {
		return this.rapServidores;
	}

	public void setRapServidores(RapServidores rapServidores) {
		this.rapServidores = rapServidores;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IAD_SEQ_ADMINISTRADO")
	public EceItemAdministrado getEceItemAdministrado() {
		return this.eceItemAdministrado;
	}

	public void setEceItemAdministrado(EceItemAdministrado eceItemAdministrado) {
		this.eceItemAdministrado = eceItemAdministrado;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "PMO_PTE_ATD_SEQ", referencedColumnName = "PTE_ATD_SEQ"),
			@JoinColumn(name = "PMO_PTE_SEQ", referencedColumnName = "PTE_SEQ"),
			@JoinColumn(name = "PMO_SEQ", referencedColumnName = "SEQ") })
	public MptPrescricaoMedicamento getMptPrescricaoMedicamento() {
		return this.mptPrescricaoMedicamento;
	}

	public void setMptPrescricaoMedicamento(MptPrescricaoMedicamento mptPrescricaoMedicamento) {
		this.mptPrescricaoMedicamento = mptPrescricaoMedicamento;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "PCU_ATD_SEQ", referencedColumnName = "ATD_SEQ"),
			@JoinColumn(name = "PCU_SEQ", referencedColumnName = "SEQ") })
	public MpmPrescricaoCuidado getMpmPrescricaoCuidado() {
		return this.mpmPrescricaoCuidado;
	}

	public void setMpmPrescricaoCuidado(MpmPrescricaoCuidado mpmPrescricaoCuidado) {
		this.mpmPrescricaoCuidado = mpmPrescricaoCuidado;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TFQ_SEQ")
	public MpmTipoFrequenciaAprazamento getMpmTipoFrequenciaAprazamento() {
		return this.mpmTipoFrequenciaAprazamento;
	}

	public void setMpmTipoFrequenciaAprazamento(MpmTipoFrequenciaAprazamento mpmTipoFrequenciaAprazamento) {
		this.mpmTipoFrequenciaAprazamento = mpmTipoFrequenciaAprazamento;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "IPD_PDT_ATD_SEQ", referencedColumnName = "PDT_ATD_SEQ"),
			@JoinColumn(name = "IPD_PDT_SEQ", referencedColumnName = "PDT_SEQ"),
			@JoinColumn(name = "IPD_TID_SEQ", referencedColumnName = "TID_SEQ") })
	public MpmItemPrescricaoDieta getMpmItemPrescricaoDieta() {
		return this.mpmItemPrescricaoDieta;
	}

	public void setMpmItemPrescricaoDieta(MpmItemPrescricaoDieta mpmItemPrescricaoDieta) {
		this.mpmItemPrescricaoDieta = mpmItemPrescricaoDieta;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "PCO_PTE_ATD_SEQ", referencedColumnName = "PTE_ATD_SEQ"),
			@JoinColumn(name = "PCO_PTE_SEQ", referencedColumnName = "PTE_SEQ"),
			@JoinColumn(name = "PCO_SEQ", referencedColumnName = "SEQ") })
	public MptPrescricaoCuidado getMptPrescricaoCuidado() {
		return this.mptPrescricaoCuidado;
	}

	public void setMptPrescricaoCuidado(MptPrescricaoCuidado mptPrescricaoCuidado) {
		this.mptPrescricaoCuidado = mptPrescricaoCuidado;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "PPR_ATD_SEQ", referencedColumnName = "ATD_SEQ"),
			@JoinColumn(name = "PPR_SEQ", referencedColumnName = "SEQ") })
	public MpmPrescricaoProcedimento getMpmPrescricaoProcedimento() {
		return this.mpmPrescricaoProcedimento;
	}

	public void setMpmPrescricaoProcedimento(MpmPrescricaoProcedimento mpmPrescricaoProcedimento) {
		this.mpmPrescricaoProcedimento = mpmPrescricaoProcedimento;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "ISH_SHE_ATD_SEQ", referencedColumnName = "SHE_ATD_SEQ"),
			@JoinColumn(name = "ISH_SHE_SEQ", referencedColumnName = "SHE_SEQ"),
			@JoinColumn(name = "ISH_SEQUENCIA", referencedColumnName = "SEQUENCIA") })
	public AbsItensSolHemoterapicas getAbsItensSolHemoterapicas() {
		return this.absItensSolHemoterapicas;
	}

	public void setAbsItensSolHemoterapicas(AbsItensSolHemoterapicas absItensSolHemoterapicas) {
		this.absItensSolHemoterapicas = absItensSolHemoterapicas;
	}

	@Column(name = "DESCRICAO", length = 4000)
	@Length(max = 4000)
	public String getDescricao() {
		return this.descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}

	@Column(name = "TIPO_ITEM", nullable = false, length = 1)
	@Length(max = 1)
	public String getTipoItem() {
		return this.tipoItem;
	}

	public void setTipoItem(String tipoItem) {
		this.tipoItem = tipoItem;
	}

	@Column(name = "TIPO_PRESCRICAO", nullable = false, length = 1)
	@Length(max = 1)
	public String getTipoPrescricao() {
		return this.tipoPrescricao;
	}

	public void setTipoPrescricao(String tipoPrescricao) {
		this.tipoPrescricao = tipoPrescricao;
	}

	@Column(name = "SITUACAO", length = 1)
	@Length(max = 1)
	public String getSituacao() {
		return this.situacao;
	}

	public void setSituacao(String situacao) {
		this.situacao = situacao;
	}

	@Column(name = "QUANTIDADE", precision = 17, scale = 17)
	public Double getQuantidade() {
		return this.quantidade;
	}

	public void setQuantidade(Double quantidade) {
		this.quantidade = quantidade;
	}

	@Column(name = "FREQUENCIA")
	public Short getFrequencia() {
		return this.frequencia;
	}

	public void setFrequencia(Short frequencia) {
		this.frequencia = frequencia;
	}

	@Column(name = "IND_SE_NECESSARIO", length = 1)
	@Length(max = 1)
	public String getIndSeNecessario() {
		return this.indSeNecessario;
	}

	public void setIndSeNecessario(String indSeNecessario) {
		this.indSeNecessario = indSeNecessario;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ALTERADO_EM", length = 29)
	public Date getAlteradoEm() {
		return this.alteradoEm;
	}

	public void setAlteradoEm(Date alteradoEm) {
		this.alteradoEm = alteradoEm;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 29)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "eceItemAdministrado")
	public Set<EceItemAdministrado> getEceItemAdministradoes() {
		return this.eceItemAdministradoes;
	}

	public void setEceItemAdministradoes(Set<EceItemAdministrado> eceItemAdministradoes) {
		this.eceItemAdministradoes = eceItemAdministradoes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "eceItemAdministrado")
	public Set<EceHorarioAdministrado> getEceHorarioAdministradoes() {
		return this.eceHorarioAdministradoes;
	}

	public void setEceHorarioAdministradoes(Set<EceHorarioAdministrado> eceHorarioAdministradoes) {
		this.eceHorarioAdministradoes = eceHorarioAdministradoes;
	}

	public enum Fields {

		SEQ("seq"),
		VERSION("version"),
		MPT_PRESCRICAO_PROCEDIMENTOS("mptPrescricaoProcedimento"),
		MPM_COMPOSICAO_PRESCRICAO_NPT("mpmComposicaoPrescricaoNpt"),
		EPE_PRESCRICOES_CUIDADOS("epePrescricoesCuidados"),
		MPM_PRESCRICAO_MDTO("mpmPrescricaoMdto"),
		ABS_SOLICITACOES_HEMOTERAPICAS("absSolicitacoesHemoterapicas"),
		FAT_PROCED_HOSP_INTERNOS("fatProcedHospInternos"),
		PHI_SEQ("fatProcedHospInternos.seq"),
		RAP_SERVIDORES("rapServidores"),
		ECE_ITEM_ADMINISTRADOS("eceItemAdministrado"),
		MPT_PRESCRICAO_MEDICAMENTO("mptPrescricaoMedicamento"),
		MPM_PRESCRICAO_CUIDADO("mpmPrescricaoCuidado"),
		MPM_TIPO_FREQUENCIA_APRAZAMENTO("mpmTipoFrequenciaAprazamento"),
		MPM_ITEM_PRESCRICAO_DIETA("mpmItemPrescricaoDieta"),
		MPT_PRESCRICAO_CUIDADO("mptPrescricaoCuidado"),
		MPM_PRESCRICAO_PROCEDIMENTO("mpmPrescricaoProcedimento"),
		ABS_ITENS_SOL_HEMOTERAPICAS("absItensSolHemoterapicas"),
		DESCRICAO("descricao"),
		TIPO_ITEM("tipoItem"),
		TIPO_PRESCRICAO("tipoPrescricao"),
		SITUACAO("situacao"),
		QUANTIDADE("quantidade"),
		FREQUENCIA("frequencia"),
		IND_SE_NECESSARIO("indSeNecessario"),
		ALTERADO_EM("alteradoEm"),
		CRIADO_EM("criadoEm"),
		ECE_ITEM_ADMINISTRADOES("eceItemAdministradoes"),
		ECE_HORARIO_ADMINISTRADOES("eceHorarioAdministradoes");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getSeq() == null) ? 0 : getSeq().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof EceItemAdministrado)) {
			return false;
		}
		EceItemAdministrado other = (EceItemAdministrado) obj;
		if (getSeq() == null) {
			if (other.getSeq() != null) {
				return false;
			}
		} else if (!getSeq().equals(other.getSeq())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
