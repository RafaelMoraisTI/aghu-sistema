package br.gov.mec.aghu.model;

// Generated 11/02/2010 15:27:49 by Hibernate Tools 3.2.5.Beta

import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;

import org.hibernate.annotations.Cascade;

import br.gov.mec.aghu.dominio.DominioSimNao;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AghProfEspecialidades generated by hbm2java
 */
@SuppressWarnings({"PMD.AghuUsoIndevidoDaEnumDominioSimNaoEntity"})

@Entity
@Table(name = "AGH_PROF_ESPECIALIDADES", schema = "AGH")
public class AghProfEspecialidades extends BaseEntityId<AghProfEspecialidadesId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 3973534274726128379L;
	private AghProfEspecialidadesId id;
	private DominioSimNao indProfRealizaConsultoria;
	private Boolean indAtuaAmbt;
	private DominioSimNao indAtuaInternacao;
	private Integer capacReferencial;

	private Integer quantPacInternados;
	private DominioSimNao indAtuaBloco;
	private DominioSimNao indCirurgiaoBloco;
	private DominioSimNao indInterna;

	private Integer version;

	private Set<AinEscalasProfissionalInt> escalasProfissionaisInt = new HashSet<AinEscalasProfissionalInt>(
			0);
	private Set<AghProfissionaisEspConvenio> profissionaisEspConvenio = new HashSet<AghProfissionaisEspConvenio>(
			0);

	// Campos do Id mapeados para permitir a construção de criterias pela chave
	private AghEspecialidades aghEspecialidade;
	private RapServidores rapServidor;

	/**
	 * Servidor responsável pela digitação deste cadastro de especialidade do
	 * profissional.
	 */
	private RapServidores servidorDigitador;

	public AghProfEspecialidades() {
	}

	public AghProfEspecialidades(AghProfEspecialidadesId id,
			DominioSimNao indProfRealizaConsultoria, Boolean indAtuaAmbt,
			DominioSimNao indAtuaInternacao, Integer capacReferencial,
			Integer quantPacInternados, RapServidores servidorDigitador,
			Set<AinEscalasProfissionalInt> escalasProfissionaisInt,
			DominioSimNao indAtuaBloco, DominioSimNao indCirurgiaoBloco,
			DominioSimNao indInterna) {
		this.id = id;
		this.indProfRealizaConsultoria = indProfRealizaConsultoria;
		this.indAtuaAmbt = indAtuaAmbt;
		this.indAtuaInternacao = indAtuaInternacao;
		this.capacReferencial = capacReferencial;
		this.quantPacInternados = quantPacInternados;
		this.servidorDigitador = servidorDigitador;
		this.indAtuaBloco = indAtuaBloco;
		this.indCirurgiaoBloco = indCirurgiaoBloco;
		this.indInterna = indInterna;
		this.escalasProfissionaisInt = escalasProfissionaisInt;
	}

	// ======================================================================================================
	/**
	 * Mapeamento para o id e seus atributos.<br/>
	 * OBS.: Os atributos do id foram mapeados para permitir o uso de join
	 * dentro de criterias e aplicar restrições.<br/>
	 * <b>Ex.:</b><br/>
	 * <code> 
	 * String strPesquisa = "AIP";<br/>
	 * <br/>
	 * Criteria criteria = session.createCriteria(AghProfEspecialidades.class);
	 * Criteria criteriaEsp = criteria.createCriteria("aghEspecialidade");
	 * criteriaEsp.add(Restrictions.ilike("sigla", strPesquisa.toUpperCase(), MatchMode.ANYWHERE));
	 * </code>
	 */
	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "serMatricula", column = @Column(name = "SER_MATRICULA", nullable = false, precision = 7, scale = 0)),
			@AttributeOverride(name = "serVinCodigo", column = @Column(name = "SER_VIN_CODIGO", nullable = false, precision = 3, scale = 0)),
			@AttributeOverride(name = "espSeq", column = @Column(name = "ESP_SEQ", nullable = false, precision = 4, scale = 0)) })
	public AghProfEspecialidadesId getId() {
		return this.id;
	}

	public void setId(AghProfEspecialidadesId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ESP_SEQ", referencedColumnName = "SEQ", nullable = false, insertable = false, updatable = false)
	public AghEspecialidades getAghEspecialidade() {
		return this.aghEspecialidade;
	}

	public void setAghEspecialidade(AghEspecialidades aghEspecialidade) {
		this.aghEspecialidade = aghEspecialidade;
	}

	/**
	 * Obs.: Campo com colunas mapeadas para updatable = false e insertable =
	 * false.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", nullable = false, insertable = false, updatable = false) })
	public RapServidores getRapServidor() {
		return this.rapServidor;
	}

	public void setRapServidor(RapServidores rapServidor) {
		this.rapServidor = rapServidor;
	}

	// ======================================================================================================

	@Column(name = "IND_PROF_REALIZA_CONSULTORIA", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndProfRealizaConsultoria() {
		return this.indProfRealizaConsultoria;
	}

	public void setIndProfRealizaConsultoria(
			DominioSimNao indProfRealizaConsultoria) {
		this.indProfRealizaConsultoria = indProfRealizaConsultoria;
	}

    @Column(name = "IND_ATUA_AMBT", nullable = false)
    @org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndAtuaAmbt() {
		return this.indAtuaAmbt;
	}

	public void setIndAtuaAmbt(Boolean indAtuaAmbt) {
		this.indAtuaAmbt = indAtuaAmbt;
	}

	@Column(name = "IND_ATUA_INTERNACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndAtuaInternacao() {
		return this.indAtuaInternacao;
	}

	public void setIndAtuaInternacao(DominioSimNao indAtuaInternacao) {
		this.indAtuaInternacao = indAtuaInternacao;
	}

	@Column(name = "CAPAC_REFERENCIAL", nullable = false, precision = 3, scale = 0, length = 3)
	public Integer getCapacReferencial() {
		return this.capacReferencial;
	}

	public void setCapacReferencial(Integer capacReferencial) {
		this.capacReferencial = capacReferencial;
	}

	@Column(name = "QUANT_PAC_INTERNADOS", nullable = false, precision = 3, scale = 0)
	public Integer getQuantPacInternados() {
		return this.quantPacInternados;
	}

	public void setQuantPacInternados(Integer quantPacInternados) {
		this.quantPacInternados = quantPacInternados;
	}

	@OneToMany(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "PEC_PRE_SER_MATRICULA", referencedColumnName = "SER_MATRICULA"),
			@JoinColumn(name = "PEC_PRE_SER_VIN_CODIGO", referencedColumnName = "SER_VIN_CODIGO"),
			@JoinColumn(name = "PEC_PRE_ESP_SEQ", referencedColumnName = "ESP_SEQ") })
	public Set<AinEscalasProfissionalInt> getEscalasProfissionaisInt() {
		return this.escalasProfissionaisInt;
	}

	public void setEscalasProfissionaisInt(
			Set<AinEscalasProfissionalInt> escalasProfissionaisInt) {
		this.escalasProfissionaisInt = escalasProfissionaisInt;
	}

	@Cascade( { org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@OneToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE,
			CascadeType.REFRESH }, fetch = FetchType.LAZY, mappedBy = "profEspecialidade", orphanRemoval=true)
	// @JoinColumns( {
	// @JoinColumn(name = "PRE_SER_MATRICULA", referencedColumnName =
	// "SER_MATRICULA"),
	// @JoinColumn(name = "PRE_SER_VIN_CODIGO", referencedColumnName =
	// "SER_VIN_CODIGO"),
	// @JoinColumn(name = "PRE_ESP_SEQ", referencedColumnName = "ESP_SEQ") })
	public Set<AghProfissionaisEspConvenio> getProfissionaisEspConvenio() {
		return this.profissionaisEspConvenio;
	}

	public void setProfissionaisEspConvenio(
			Set<AghProfissionaisEspConvenio> profissionaisEspConvenio) {
		this.profissionaisEspConvenio = profissionaisEspConvenio;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA_DIGITADOR", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO_DIGITADOR", nullable = false) })
	public RapServidores getServidorDigitador() {
		return this.servidorDigitador;
	}

	public void setServidorDigitador(RapServidores servidorDigitador) {
		this.servidorDigitador = servidorDigitador;
	}

	@Column(name = "IND_ATUA_BLOCO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndAtuaBloco() {
		return this.indAtuaBloco;
	}

	public void setIndAtuaBloco(DominioSimNao indAtuaBloco) {
		this.indAtuaBloco = indAtuaBloco;
	}

	@Column(name = "IND_CIRURGIAO_BLOCO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndCirurgiaoBloco() {
		return this.indCirurgiaoBloco;
	}

	public void setIndCirurgiaoBloco(DominioSimNao indCirurgiaoBloco) {
		this.indCirurgiaoBloco = indCirurgiaoBloco;
	}

	@Column(name = "IND_INTERNA", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndInterna() {
		return this.indInterna;
	}

	public void setIndInterna(DominioSimNao indInterna) {
		this.indInterna = indInterna;
	}

	/**
	 * Campo sintético criado para mapear diretamente este dominio booleano em
	 * um componente selectOneCheckBox
	 * 
	 * @author jvaranda
	 * @return
	 */

	// IndProfRealizaConsultoria
	@Transient
	public boolean isConsultoria() {
		if (getIndProfRealizaConsultoria() != null) {
			return getIndProfRealizaConsultoria() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}

	public void setConsultoria(boolean valor) {
		setIndProfRealizaConsultoria(DominioSimNao.getInstance(valor));
	}

	@Transient
	public String getDescricaoConsultoria() {
		return getIndProfRealizaConsultoria().getDescricao();
	}

	// IndInterna
	@Transient
	public boolean isInterna() {
		if (getIndInterna() != null) {
			return getIndInterna() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}

	public void setInterna(boolean valor) {
		setIndInterna(DominioSimNao.getInstance(valor));
	}

	@Transient
	public String getDescricaoInterna() {
		return getIndInterna().getDescricao();
	}

	// IndAtuaAmbt
	@Transient
	public boolean isAmbulatorio() {
		if (getIndAtuaAmbt() != null) {
			return getIndAtuaAmbt();
		} else {
			return Boolean.FALSE;
		}
	}

	public void setAmbulatorio(boolean valor) {
		setIndAtuaAmbt(valor);
	}

	@Transient
	public String getDescricaoAmbulatorio() {
		return getIndAtuaAmbt() ? "Sim" : "Não";
	}

	// IndAtuaInternacao
	@Transient
	public boolean isInternacao() {
		if (getIndAtuaInternacao() != null) {
			return getIndAtuaInternacao() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}

	public void setInternacao(boolean valor) {
		setIndAtuaInternacao(DominioSimNao.getInstance(valor));
	}

	@Transient
	public String getDescricaoInternacao() {
		return getIndAtuaInternacao().getDescricao();
	}

	// indCirurgiaoBloco
	@Transient
	public boolean isCirurgiao() {
		if (getIndCirurgiaoBloco() != null) {
			return getIndCirurgiaoBloco() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}

	public void setCirurgiao(boolean valor) {
		setIndCirurgiaoBloco(DominioSimNao.getInstance(valor));
	}

	@Transient
	public String getDescricaoCirurgiao() {
		return getIndCirurgiaoBloco().getDescricao();
	}

	// IndAtuaBloco
	@Transient
	public boolean isBloco() {
		if (getIndAtuaBloco() != null) {
			return getIndAtuaBloco() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}

	public void setBloco(boolean valor) {
		setIndAtuaBloco(DominioSimNao.getInstance(valor));
	}

	@Transient
	public String getDescricaoBloco() {
		return getIndAtuaBloco().getDescricao();
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	public enum Fields {
		ID("id"), SER_MATRICULA("id.serMatricula"), SER_VIN_CODIGO(
				"id.serVinCodigo"), SERVIDOR("rapServidor"), RAP_SERVIDOR(
				"rapServidor"), ESPECIALIDADE("aghEspecialidade"), ESP_SEQ(
				"id.espSeq"), IND_ATUA_INTERNACAO("indAtuaInternacao"), IND_ATUA_AMBT(
				"indAtuaAmbt"), CAPAC_REFERENCIAL("capacReferencial"), QUANT_PAC_INTERNADOS(
				"quantPacInternados"), PROFISSIONAIS_ESP_CONVENIO(
				"profissionaisEspConvenio"), ESCALAS_PROFISSIONAIS_INT(
				"escalasProfissionaisInt"), IND_INTERNA("indInterna"), ID_ESPECIALIDADE_SEQ(
				"id.espSeq"), IND_CIRURGIAO_BLOCO("indCirurgiaoBloco"),
				SERVIDOR_DIGITADOR("servidorDigitador"),IND_PROF_REALIZA_CONSULTORIA("indProfRealizaConsultoria");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}
	

	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof AghProfEspecialidades)) {
			return false;
		}
		AghProfEspecialidades other = (AghProfEspecialidades) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}