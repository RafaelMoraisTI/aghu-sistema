package br.gov.mec.aghu.model;

// Generated 27/01/2012 14:34:09 by Hibernate Tools 3.4.0.CR1

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Version;


import br.gov.mec.aghu.core.exception.BaseRuntimeException;
import br.gov.mec.aghu.core.exception.BusinessExceptionCode;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * SceItemDas generated by hbm2java
 */
@Entity
@Table(name = "SCE_ITEM_DAS", schema = "AGH")
public class SceItemDas extends BaseEntityId<SceItemDasId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 3572335875873012204L;
	private SceItemDasId id;
	private Integer version;
	private SceEstoqueAlmoxarifado estoqueAlmoxarifado;
	private SceDevolucaoAlmoxarifado devolucaoAlmoxarifado;
	private Integer quantidade;
	private ScoUnidadeMedida unidadeMedida;

	private enum SceItemDasModelExceptionCode implements BusinessExceptionCode{
		SCE_IDA_CK1
	}
	
	public SceItemDas() {
	}

	public SceItemDas(SceItemDasId id, SceEstoqueAlmoxarifado estoqueAlmoxarifado,
			SceDevolucaoAlmoxarifado devolucaoAlmoxarifado,
			Integer quantidade, ScoUnidadeMedida unidadeMedida) {
		this.id = id;
		this.estoqueAlmoxarifado = estoqueAlmoxarifado;
		this.devolucaoAlmoxarifado = devolucaoAlmoxarifado;
		this.quantidade = quantidade;
		this.unidadeMedida = unidadeMedida;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "dalSeq", column = @Column(name = "DAL_SEQ", nullable = false, precision = 7, scale = 0)),
			@AttributeOverride(name = "ealSeq", column = @Column(name = "EAL_SEQ", nullable = false, precision = 7, scale = 0)) })
	public SceItemDasId getId() {
		return this.id;
	}

	public void setId(SceItemDasId id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION", nullable = false, precision = 9, scale = 0)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EAL_SEQ", nullable = false, insertable = false, updatable = false)
	public SceEstoqueAlmoxarifado getEstoqueAlmoxarifado() {
		return this.estoqueAlmoxarifado;
	}

	public void setEstoqueAlmoxarifado(SceEstoqueAlmoxarifado estoqueAlmoxarifado) {
		this.estoqueAlmoxarifado = estoqueAlmoxarifado;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DAL_SEQ", nullable = false, insertable = false, updatable = false)
	public SceDevolucaoAlmoxarifado getDevolucaoAlmoxarifado() {
		return this.devolucaoAlmoxarifado;
	}

	public void setDevolucaoAlmoxarifado(
			SceDevolucaoAlmoxarifado devolucaoAlmoxarifado) {
		this.devolucaoAlmoxarifado = devolucaoAlmoxarifado;
	}

	@Column(name = "QUANTIDADE", nullable = false, precision = 7, scale = 0)
	public Integer getQuantidade() {
		return this.quantidade;
	}

	public void setQuantidade(Integer quantidade) {
		this.quantidade = quantidade;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UMD_CODIGO", nullable = false)
	public ScoUnidadeMedida getUnidadeMedida() {
		return this.unidadeMedida;
	}

	public void setUnidadeMedida(ScoUnidadeMedida unidadeMedida) {
		this.unidadeMedida = unidadeMedida;
	}
	
	@PrePersist
	@PreUpdate
	@SuppressWarnings("unused")
	private void validarConstraints() {
		if(this.getQuantidade()<=0){
			throw new BaseRuntimeException(SceItemDasModelExceptionCode.SCE_IDA_CK1);
		}
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj){
			return true;
		}
		if (obj == null){
			return false;
		}
		if (getClass() != obj.getClass()){
			return false;
		}
		SceItemDas other = (SceItemDas) obj;
		if (id == null) {
			if (other.id != null){
				return false;
			}
		} else if (!id.equals(other.id)){
			return false;
		}
		return true;
	}
	
	public enum Fields {
		DEVOLUCAO_ALMOXARIFADO("devolucaoAlmoxarifado"), ESTOQUE_ALMOXARIFADO("estoqueAlmoxarifado"),
		UNIDADE_MEDIDA("unidadeMedida"), QUANTIDADE("quantidade");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return fields;
		}
	}

}
