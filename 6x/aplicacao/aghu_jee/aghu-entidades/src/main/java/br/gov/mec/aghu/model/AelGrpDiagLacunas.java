package br.gov.mec.aghu.model;

// Generated 29/03/2012 13:44:29 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AelGrpDiagLacunas generated by hbm2java
 */
@Entity
@Table(name = "AEL_GRP_DIAG_LACUNAS")
public class AelGrpDiagLacunas extends BaseEntityId<AelGrpDiagLacunasId> implements java.io.Serializable {

	private static final long serialVersionUID = 7074884442437859630L;

	private AelGrpDiagLacunasId id;
	private AelTextoPadraoDiags aelTextoPadraoDiags;
	private String lacuna;
	private DominioSituacao indSituacao;
	private Date criadoEm;
	private RapServidores servidor;
	private Integer version;

	private Set<AelTxtDiagLacunas> aelTxtDiagLacunas = new HashSet<AelTxtDiagLacunas>(
			0);

	public AelGrpDiagLacunas() {
	}

	public AelGrpDiagLacunas(final AelGrpDiagLacunasId id,
			final AelTextoPadraoDiags aelTextoPadraoDiags, final String lacuna,
			final DominioSituacao indSituacao, final Date criadoEm, final RapServidores servidor) {
		this.id = id;
		this.aelTextoPadraoDiags = aelTextoPadraoDiags;
		this.lacuna = lacuna;
		this.indSituacao = indSituacao;
		this.criadoEm = criadoEm;
		this.servidor = servidor;
	}

	public AelGrpDiagLacunas(final AelGrpDiagLacunasId id,
			final AelTextoPadraoDiags aelTextoPadraoDiags, final String lacuna,
			final DominioSituacao indSituacao, final Date criadoEm, final RapServidores servidor, final Set<AelTxtDiagLacunas> aelTxtDiagLacunas) {
		this.id = id;
		this.aelTextoPadraoDiags = aelTextoPadraoDiags;
		this.lacuna = lacuna;
		this.indSituacao = indSituacao;
		this.criadoEm = criadoEm;
		this.servidor = servidor;
		this.aelTxtDiagLacunas = aelTxtDiagLacunas;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "lujLuhSeq", column = @Column(name = "LUJ_LUH_SEQ", nullable = false, precision = 4, scale = 0)),
			@AttributeOverride(name = "lujSeqp", column = @Column(name = "LUJ_SEQP", nullable = false, precision = 4, scale = 0)),
			@AttributeOverride(name = "seqp", column = @Column(name = "SEQP", nullable = false, precision = 4, scale = 0)) })
	public AelGrpDiagLacunasId getId() {
		return this.id;
	}

	public void setId(final AelGrpDiagLacunasId id) {
		this.id = id;
	}


	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "LUJ_LUH_SEQ", referencedColumnName = "LUH_SEQ", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "LUJ_SEQP", referencedColumnName = "SEQP", nullable = false, insertable = false, updatable = false) })
	public AelTextoPadraoDiags getAelTextoPadraoDiags() {
		return this.aelTextoPadraoDiags;
	}

	public void setAelTextoPadraoDiags(final AelTextoPadraoDiags aelTextoPadraoDiags) {
		this.aelTextoPadraoDiags = aelTextoPadraoDiags;
	}

	@Column(name = "LACUNA", nullable = false, length = 10)
	@Length(max = 10)
	public String getLacuna() {
		return this.lacuna;
	}

	public void setLacuna(final String lacuna) {
		this.lacuna = lacuna;
	}

	@Column(name = "IND_SITUACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getIndSituacao() {
		return this.indSituacao;
	}

	public void setIndSituacao(final DominioSituacao indSituacao) {
		this.indSituacao = indSituacao;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(final Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	/**
	 * respons√°vel.
	 * 
	 * @return
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidor() {
		return this.servidor;
	}

	public void setServidor(final RapServidores servidor) {
		this.servidor = servidor;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aelGrpDiagLacunas")
	public Set<AelTxtDiagLacunas> getAelTxtDiagLacunas() {
		return this.aelTxtDiagLacunas;
	}

	public void setAelTxtDiagLacunas(
			final Set<AelTxtDiagLacunas> aelTxtDiagLacunas) {
		this.aelTxtDiagLacunas = aelTxtDiagLacunas;
	}

	public enum Fields {
		ID("id"),
		SEQP("id.seqp"),
		LACUNA("lacuna"),
		IND_SITUACAO("indSituacao"),
		CRIADO_EM("criadoEm"),
		SERVIDOR("servidor"),
		AEL_TEXTO_PADRAO_DIAGS("aelTextoPadraoDiags"),
		AEL_TEXTO_PADRAO_DIAGS_LUH_SEQ("aelTextoPadraoDiags.id.luhSeq"),
		AEL_TEXTO_PADRAO_DIAGS_SEQP("aelTextoPadraoDiags.id.seqp"),
		AEL_TXT_DIAG_LACUNAS("aelTxtDiagLacunas"),
		;

		private String fields;

		private Fields(final String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return fields;
		}
	}

	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof AelGrpDiagLacunas)) {
			return false;
		}
		AelGrpDiagLacunas other = (AelGrpDiagLacunas) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
