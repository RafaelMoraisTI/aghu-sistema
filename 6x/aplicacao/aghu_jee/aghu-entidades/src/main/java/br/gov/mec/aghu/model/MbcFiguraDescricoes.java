package br.gov.mec.aghu.model;

// Generated 19/04/2012 16:57:27 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * MbcFiguraDescricoes generated by hbm2java
 */
@Entity
@Table(name = "MBC_FIGURA_DESCRICOES", schema = "AGH")
public class MbcFiguraDescricoes extends BaseEntityId<MbcFiguraDescricoesId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2235391969910951715L;
	private MbcFiguraDescricoesId id;
	private Integer version;
	private String texto;
	private Date criadoEm;
	private RapServidores servidor;
	private Short ordem;
	private MbcImagemDescricoes mbcImagemDescricoes;
	private MbcDescricaoCirurgica mbcDescricaoCirurgica;

	public MbcFiguraDescricoes() {
	}

	public MbcFiguraDescricoes(MbcFiguraDescricoesId id, Date criadoEm,
			RapServidores servidor) {
		this.id = id;
		this.criadoEm = criadoEm;
		this.servidor = servidor;
	}

	public MbcFiguraDescricoes(MbcFiguraDescricoesId id, String texto,
			Date criadoEm, RapServidores servidor, Short ordem,
			MbcImagemDescricoes mbcImagemDescricoes) {
		this.id = id;
		this.texto = texto;
		this.criadoEm = criadoEm;
		this.servidor = servidor;
		this.ordem = ordem;
		this.mbcImagemDescricoes = mbcImagemDescricoes;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "dcgCrgSeq", column = @Column(name = "DCG_CRG_SEQ", nullable = false)),
			@AttributeOverride(name = "dcgSeqp", column = @Column(name = "DCG_SEQP", nullable = false)),
			@AttributeOverride(name = "seqp", column = @Column(name = "SEQP", nullable = false)) })
	public MbcFiguraDescricoesId getId() {
		return this.id;
	}

	public void setId(MbcFiguraDescricoesId id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@Column(name = "TEXTO", length = 500)
	@Length(max = 500)
	public String getTexto() {
		return this.texto;
	}

	public void setTexto(String texto) {
		this.texto = texto;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 29)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}

	@JoinColumns( {
		@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA"),
		@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO") })
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	public RapServidores getServidor() {
		return servidor;
	}

	@Column(name = "ORDEM")
	public Short getOrdem() {
		return this.ordem;
	}

	public void setOrdem(Short ordem) {
		this.ordem = ordem;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "mbcFiguraDescricoes")
	public MbcImagemDescricoes getMbcImagemDescricoes() {
		return this.mbcImagemDescricoes;
	}

	public void setMbcImagemDescricoes(MbcImagemDescricoes mbcImagemDescricoes) {
		this.mbcImagemDescricoes = mbcImagemDescricoes;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "DCG_CRG_SEQ", referencedColumnName = "CRG_SEQ", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "DCG_SEQP", referencedColumnName = "SEQP", nullable = false, insertable = false, updatable = false) })
	public MbcDescricaoCirurgica getMbcDescricaoCirurgica() {
		return this.mbcDescricaoCirurgica;
	}

	public void setMbcDescricaoCirurgica(MbcDescricaoCirurgica mbcDescricaoCirurgica) {
		this.mbcDescricaoCirurgica = mbcDescricaoCirurgica;
	}

	public enum Fields {
		DCG_CRG_SEQ("id.dcgCrgSeq"),
		DCG_SEQP("id.dcgSeqp"),
		SEQP("id.seqp"),
		ORDEM("ordem");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}

	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MbcFiguraDescricoes)) {
			return false;
		}
		MbcFiguraDescricoes other = (MbcFiguraDescricoes) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
