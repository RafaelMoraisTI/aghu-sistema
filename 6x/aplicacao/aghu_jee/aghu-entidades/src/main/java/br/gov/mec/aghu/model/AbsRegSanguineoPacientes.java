package br.gov.mec.aghu.model;

// Generated 08/02/2010 17:25:25 by Hibernate Tools 3.2.5.Beta

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AbsRegSanguineoPacientes generated by hbm2java
 */

@Entity
@Table(name = "ABS_REG_SANGUINEO_PACIENTES", schema = "AGH")
@org.hibernate.annotations.Cache(usage=org.hibernate.annotations.CacheConcurrencyStrategy.TRANSACTIONAL)
public class AbsRegSanguineoPacientes extends BaseEntityId<AbsRegSanguineoPacientesId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6348419763526670631L;
	private AbsRegSanguineoPacientesId id;
	private String grupoSanguineo;
	private String fatorRh;
	private String df;
	private String pesqAnticIrregular;
	private Short fase1;
	private Short fase2;
	private Short fase3;
	private String observacao;
	private String reversaA;
	private String reversaB;
	private RapServidores servidor;

	public AbsRegSanguineoPacientes() {
	}

	public AbsRegSanguineoPacientes(AbsRegSanguineoPacientesId id,
			String grupoSanguineo, String fatorRh, Short serVinCodigo,
			RapServidores servidor) {
		this.id = id;
		this.grupoSanguineo = grupoSanguineo;
		this.fatorRh = fatorRh;
		this.servidor = servidor;
	}

	public AbsRegSanguineoPacientes(AbsRegSanguineoPacientesId id,
			String grupoSanguineo, String fatorRh, String df,
			String pesqAnticIrregular, Short fase1, Short fase2, Short fase3,
			String observacao, Short serVinCodigo, RapServidores servidor,
			String reversaA, String reversaB) {
		this.id = id;
		this.grupoSanguineo = grupoSanguineo;
		this.fatorRh = fatorRh;
		this.df = df;
		this.pesqAnticIrregular = pesqAnticIrregular;
		this.fase1 = fase1;
		this.fase2 = fase2;
		this.fase3 = fase3;
		this.observacao = observacao;
		this.servidor = servidor;
		this.reversaA = reversaA;
		this.reversaB = reversaB;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "pacCodigo", column = @Column(name = "PAC_CODIGO", nullable = false, precision = 8, scale = 0)),
			@AttributeOverride(name = "dthrRegistro", column = @Column(name = "DTHR_REGISTRO", nullable = false, length = 7)) })
	public AbsRegSanguineoPacientesId getId() {
		return this.id;
	}

	public void setId(AbsRegSanguineoPacientesId id) {
		this.id = id;
	}

	@Column(name = "GRUPO_SANGUINEO", nullable = false, length = 2)
	@Length(max = 2)
	public String getGrupoSanguineo() {
		return this.grupoSanguineo;
	}

	public void setGrupoSanguineo(String grupoSanguineo) {
		this.grupoSanguineo = grupoSanguineo;
	}

	@Column(name = "FATOR_RH", nullable = false, length = 1)
	@Length(max = 1)
	public String getFatorRh() {
		return this.fatorRh;
	}

	public void setFatorRh(String fatorRh) {
		this.fatorRh = fatorRh;
	}

	@Column(name = "DF", length = 1)
	@Length(max = 1)
	public String getDf() {
		return this.df;
	}

	public void setDf(String df) {
		this.df = df;
	}

	@Column(name = "PESQ_ANTIC_IRREGULAR", length = 1)
	@Length(max = 1)
	public String getPesqAnticIrregular() {
		return this.pesqAnticIrregular;
	}

	public void setPesqAnticIrregular(String pesqAnticIrregular) {
		this.pesqAnticIrregular = pesqAnticIrregular;
	}

	@Column(name = "FASE_1", precision = 3, scale = 0)
	public Short getFase1() {
		return this.fase1;
	}

	public void setFase1(Short fase1) {
		this.fase1 = fase1;
	}

	@Column(name = "FASE_2", precision = 3, scale = 0)
	public Short getFase2() {
		return this.fase2;
	}

	public void setFase2(Short fase2) {
		this.fase2 = fase2;
	}

	@Column(name = "FASE_3", precision = 3, scale = 0)
	public Short getFase3() {
		return this.fase3;
	}

	public void setFase3(Short fase3) {
		this.fase3 = fase3;
	}

	@Column(name = "OBSERVACAO", length = 60)
	@Length(max = 60)
	public String getObservacao() {
		return this.observacao;
	}

	public void setObservacao(String observacao) {
		this.observacao = observacao;
	}

	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidor() {
		return servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}

	@Column(name = "REVERSA_A", length = 1)
	@Length(max = 1)
	public String getReversaA() {
		return this.reversaA;
	}

	public void setReversaA(String reversaA) {
		this.reversaA = reversaA;
	}

	@Column(name = "REVERSA_B", length = 1)
	@Length(max = 1)
	public String getReversaB() {
		return this.reversaB;
	}

	public void setReversaB(String reversaB) {
		this.reversaB = reversaB;
	}
		
	public enum Fields {
		COD_PACIENTE("id.pacCodigo"), 
		DTHR_REGISTRO("id.dthrRegistro"), 
		SER_MATRICULA("servidor.id.matricula"),
		SER_VIN_CODIGO("servidor.id.vinCodigo");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return fields;
		}
	}

	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof AbsRegSanguineoPacientes)) {
			return false;
		}
		AbsRegSanguineoPacientes other = (AbsRegSanguineoPacientes) obj;
		if (getId() == null) {
			if (other.getId() != null) {
				return false;
			}
		} else if (!getId().equals(other.getId())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####

}
