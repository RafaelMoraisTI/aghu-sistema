package br.gov.mec.aghu.model;

// Generated 14/09/2010 17:49:55 by Hibernate Tools 3.2.5.Beta

import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * MpmProcedEspecialRm generated by hbm2java
 * 
 * Tabela cadastral que registra os materias que compõem uma requisição de
 * material quando um procedimento for prescrito. Isso é usado para a meia
 * elástica, fornecida pelo grupo de materiais.
 */
@Entity
@Table(name = "MPM_PROCED_ESPECIAL_RMS", schema = "AGH")
public class MpmProcedEspecialRm extends BaseEntityId<MpmProcedEspecialRmId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7485076170424305705L;
	private MpmProcedEspecialRmId id;
	private MpmProcedEspecialDiversos procedimentoEspecialDiverso;
	private Date criadoEm;
	private RapServidores servidor;
	private DominioSituacao situacao;
	private ScoMaterial material;

	public MpmProcedEspecialRm() {
	}

	public MpmProcedEspecialRm(MpmProcedEspecialRmId id,
			MpmProcedEspecialDiversos procedimentoEspecialDiverso, Date criadoEm,
			RapServidores servidor, DominioSituacao situacao) {
		this.id = id;
		this.procedimentoEspecialDiverso = procedimentoEspecialDiverso;
		this.criadoEm = criadoEm;
		this.servidor = servidor;
		this.situacao = situacao;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "pedSeq", column = @Column(name = "PED_SEQ", nullable = false, precision = 4, scale = 0)),
			@AttributeOverride(name = "matCodigo", column = @Column(name = "MAT_CODIGO", nullable = false, precision = 6, scale = 0)) })
	public MpmProcedEspecialRmId getId() {
		return this.id;
	}

	public void setId(MpmProcedEspecialRmId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PED_SEQ", nullable = false, insertable = false, updatable = false)
	public MpmProcedEspecialDiversos getProcedimentoEspecialDiverso() {
		return this.procedimentoEspecialDiverso;
	}

	public void setProcedimentoEspecialDiverso(
			MpmProcedEspecialDiversos procedimentoEspecialDiverso) {
		this.procedimentoEspecialDiverso = procedimentoEspecialDiverso;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 7)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidor() {
		return servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}

	@Column(name = "IND_SITUACAO", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getSituacao() {
		return this.situacao;
	}

	public void setSituacao(DominioSituacao situacao) {
		this.situacao = situacao;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MAT_CODIGO", nullable = false, insertable = false, updatable = false)
	public ScoMaterial getMaterial() {
		return material;
	}
	
	public void setMaterial(ScoMaterial material) {
		this.material = material;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		MpmProcedEspecialRm other = (MpmProcedEspecialRm) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		return true;
	}

	public enum Fields {
		ID("id"),
		PED_SEQ("id.pedSeq"),
		MAT_CODIGO("id.matCodigo"),
		PROCEDIMENTO_ESPECIAL_DIVERSO("procedimentoEspecialDiverso"),
		CRIADO_EM("criadoEm"),
		SERVIDOR("servidor"),
		SITUACAO("situacao"),
		MATERIAL("material");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return fields;
		}
		
	}
	
}
