package br.gov.mec.aghu.model;

// Generated 09/04/2012 16:32:53 by Hibernate Tools 3.4.0.CR1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;


import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.core.persistence.BaseEntitySeq;

/**
 * MamPcControlePac generated by hbm2java
 */
@Entity
@Table(name = "MAM_PC_CONTROLE_PACS", schema = "AGH")
public class MamPcControlePac extends BaseEntitySeq<Long> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 251939997630071224L;
	private Long rcpSeq;
	private MamPcIntParada mamPcIntParada;
	private MamPcHorarioCtrl mamPcHorarioCtrl;
	private EcpControlePaciente ecpControlePaciente;
	private String sigla;
	private String unidade;
	private String descricaoControle;
	private String foraLimiteNormal;
	private Short ordemGrupo;
	private Integer ordemItem;

	public MamPcControlePac() {
	}

	public MamPcControlePac(MamPcIntParada mamPcIntParada, MamPcHorarioCtrl mamPcHorarioCtrl,
			EcpControlePaciente ecpControlePaciente, String sigla, String foraLimiteNormal, Short ordemGrupo, Integer ordemItem) {
		this.mamPcIntParada = mamPcIntParada;
		this.mamPcHorarioCtrl = mamPcHorarioCtrl;
		this.ecpControlePaciente = ecpControlePaciente;
		this.sigla = sigla;
		this.foraLimiteNormal = foraLimiteNormal;
		this.ordemGrupo = ordemGrupo;
		this.ordemItem = ordemItem;
	}

	public MamPcControlePac(MamPcIntParada mamPcIntParada, MamPcHorarioCtrl mamPcHorarioCtrl,
			EcpControlePaciente ecpControlePaciente, String sigla, String unidade, String descricaoControle,
			String foraLimiteNormal, Short ordemGrupo, Integer ordemItem) {
		this.mamPcIntParada = mamPcIntParada;
		this.mamPcHorarioCtrl = mamPcHorarioCtrl;
		this.ecpControlePaciente = ecpControlePaciente;
		this.sigla = sigla;
		this.unidade = unidade;
		this.descricaoControle = descricaoControle;
		this.foraLimiteNormal = foraLimiteNormal;
		this.ordemGrupo = ordemGrupo;
		this.ordemItem = ordemItem;
	}

	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "ecpControlePaciente"))
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "RCP_SEQ", unique = true, nullable = false)
	public Long getRcpSeq() {
		return this.rcpSeq;
	}

	public void setRcpSeq(Long rcpSeq) {
		this.rcpSeq = rcpSeq;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "PIR_ATD_SEQ", referencedColumnName = "ATD_SEQ", nullable = false),
			@JoinColumn(name = "PIR_DTHR_CRIACAO", referencedColumnName = "DTHR_CRIACAO", nullable = false) })
	public MamPcIntParada getMamPcIntParada() {
		return this.mamPcIntParada;
	}

	public void setMamPcIntParada(MamPcIntParada mamPcIntParada) {
		this.mamPcIntParada = mamPcIntParada;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "HCT_SEQ", nullable = false)
	public MamPcHorarioCtrl getMamPcHorarioCtrl() {
		return this.mamPcHorarioCtrl;
	}

	public void setMamPcHorarioCtrl(MamPcHorarioCtrl mamPcHorarioCtrl) {
		this.mamPcHorarioCtrl = mamPcHorarioCtrl;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public EcpControlePaciente getEcpControlePaciente() {
		return this.ecpControlePaciente;
	}

	public void setEcpControlePaciente(EcpControlePaciente ecpControlePaciente) {
		this.ecpControlePaciente = ecpControlePaciente;
	}

	@Column(name = "SIGLA", nullable = false, length = 20)
	@Length(max = 20)
	public String getSigla() {
		return this.sigla;
	}

	public void setSigla(String sigla) {
		this.sigla = sigla;
	}

	@Column(name = "UNIDADE", length = 30)
	@Length(max = 30)
	public String getUnidade() {
		return this.unidade;
	}

	public void setUnidade(String unidade) {
		this.unidade = unidade;
	}

	@Column(name = "DESCRICAO_CONTROLE", length = 120)
	@Length(max = 120)
	public String getDescricaoControle() {
		return this.descricaoControle;
	}

	public void setDescricaoControle(String descricaoControle) {
		this.descricaoControle = descricaoControle;
	}

	@Column(name = "FORA_LIMITE_NORMAL", nullable = false, length = 1)
	@Length(max = 1)
	public String getForaLimiteNormal() {
		return this.foraLimiteNormal;
	}

	public void setForaLimiteNormal(String foraLimiteNormal) {
		this.foraLimiteNormal = foraLimiteNormal;
	}

	@Column(name = "ORDEM_GRUPO", nullable = false)
	public Short getOrdemGrupo() {
		return this.ordemGrupo;
	}

	public void setOrdemGrupo(Short ordemGrupo) {
		this.ordemGrupo = ordemGrupo;
	}

	@Column(name = "ORDEM_ITEM", nullable = false)
	public Integer getOrdemItem() {
		return this.ordemItem;
	}

	public void setOrdemItem(Integer ordemItem) {
		this.ordemItem = ordemItem;
	}

	public enum Fields {

		RCP_SEQ("rcpSeq"),
		MAM_PC_INT_PARADAS("mamPcIntParada"),
		MAM_PC_HORARIO_CTRLS("mamPcHorarioCtrl"),
		ECP_CONTROLE_PACIENTE("ecpControlePaciente"),
		SIGLA("sigla"),
		UNIDADE("unidade"),
		DESCRICAO_CONTROLE("descricaoControle"),
		FORA_LIMITE_NORMAL("foraLimiteNormal"),
		ORDEM_GRUPO("ordemGrupo"),
		ORDEM_ITEM("ordemItem");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}

	}


	// ##### GeradorEqualsHashCodeMain #####
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getRcpSeq() == null) ? 0 : getRcpSeq().hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MamPcControlePac)) {
			return false;
		}
		MamPcControlePac other = (MamPcControlePac) obj;
		if (getRcpSeq() == null) {
			if (other.getRcpSeq() != null) {
				return false;
			}
		} else if (!getRcpSeq().equals(other.getRcpSeq())) {
			return false;
		}
		return true;
	}
	// ##### GeradorEqualsHashCodeMain #####
 
 @Transient public Long getSeq(){ return this.getRcpSeq();} 
 public void setSeq(Long seq){ this.setRcpSeq(seq);}
}
