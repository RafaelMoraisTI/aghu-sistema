package br.gov.mec.aghu.model;

// Generated 12/12/2009 09:33:15 by Hibernate Tools 3.2.5.Beta

import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;

import org.hibernate.annotations.Cascade;
import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioLadoEndereco;
import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.commons.CoreUtil;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AipCepLogradouros generated by hbm2java
 */
@Entity
@Table(name = "AIP_CEP_LOGRADOUROS", schema = "AGH")
@org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.TRANSACTIONAL)
public class AipCepLogradouros extends BaseEntityId<AipCepLogradourosId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8682385309343529409L;
	private AipCepLogradourosId id;
	private String nroInicial;
	private String nroFinal;
	private DominioLadoEndereco lado;
	private Set<AipBairrosCepLogradouro> bairroCepLogradouros = new HashSet<AipBairrosCepLogradouro>();
	private AipLogradouros logradouro;
	private Integer version;
	
	private DominioSituacao indSituacao;
	private String cepFormatado;

	public AipCepLogradouros() {
	}

	public AipCepLogradouros(AipCepLogradourosId id) {
		this.id = id;
	}

	public AipCepLogradouros(AipCepLogradourosId id, String nroInicial,
			String nroFinal, DominioLadoEndereco lado) {
		this.id = id;
		this.nroInicial = nroInicial;
		this.nroFinal = nroFinal;
		this.lado = lado;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "lgrCodigo", column = @Column(name = "LGR_CODIGO", nullable = false, precision = 9, scale = 0)),
			@AttributeOverride(name = "cep", column = @Column(name = "CEP", nullable = false, precision = 8, scale = 0)) })
	public AipCepLogradourosId getId() {
		return this.id;
	}

	public void setId(AipCepLogradourosId id) {
		this.id = id;
	}

	@Column(name = "NRO_INICIAL", length = 10)
	@Length(max = 10, message = "Campo nro inicial do CEP/logradouro suporta no máximo de 10 caracteres")
	public String getNroInicial() {
		return this.nroInicial;
	}

	public void setNroInicial(String nroInicial) {
		this.nroInicial = nroInicial;
	}

	@Column(name = "NRO_FINAL", length = 10)
	@Length(max = 10, message = "Campo nro final do CEP/logradouro suporta no máximo de 10 caracteres")	
	public String getNroFinal() {
		return this.nroFinal;
	}

	public void setNroFinal(String nroFinal) {
		this.nroFinal = nroFinal;
	}

	@Column(name = "LADO",length=1)
	@Enumerated(EnumType.STRING)
	public DominioLadoEndereco getLado() {
		return this.lado;
	}

	public void setLado(DominioLadoEndereco lado) {
		this.lado = lado;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cepLogradouro", orphanRemoval=true)
	@Cascade({ org.hibernate.annotations.CascadeType.ALL })
	public Set<AipBairrosCepLogradouro> getBairroCepLogradouros() {
		return this.bairroCepLogradouros;
	}

	public void setBairroCepLogradouros(
			Set<AipBairrosCepLogradouro> bairroCepLogradouros) {
		this.bairroCepLogradouros = bairroCepLogradouros;
	}
	
	@JoinColumn(name = "LGR_CODIGO", nullable = false, insertable = false, updatable = false)
	@ManyToOne(fetch = FetchType.EAGER)
	public AipLogradouros getLogradouro() {
		return this.logradouro;
	}

	public void setLogradouro(AipLogradouros logradouro) {
		this.logradouro = logradouro;
	}
	
	@Override
	public boolean equals(Object other) {
		boolean isEqual = this == other;
		if (!isEqual && other != null && (other instanceof AipCepLogradouros)) {
			AipCepLogradouros aip = (AipCepLogradouros) other;
			if (this.getId() != null) {
				isEqual = this.getId().equals(aip.getId());
			}
		}
		return isEqual;
	}
	
	@Override
	public int hashCode() {
		Integer result = this.getId() == null ? 1 : this.getId().hashCode();		
		return result;
	}
	
	public enum Fields {
		ID("id"),
		CEP("id.cep"),
		CODIGO_LOGRADOURO("id.lgrCodigo"),
		NRO_INICIAL("nroInicial"),
		NRO_FINAL("nroFinal"),
		LADO("lado"),		
		BAIRROS("bairroCepLogradouros"),
		LOGRADOURO("logradouro"),
		IND_SITUACAO("indSituacao")
		;		

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}
	
	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@Transient
	public String getCepFormatado() {
		this.cepFormatado = CoreUtil.formataCEP(id.getCep());
		return cepFormatado;
	}

	public void setCepFormatado(String cepFormatado) {
		this.cepFormatado = cepFormatado;
	}

	@Column(name = "IND_SITUACAO", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getIndSituacao() {
		return indSituacao;
	}

	public void setIndSituacao(DominioSituacao indSituacao) {
		this.indSituacao = indSituacao;
	}

	
}
