package br.gov.mec.aghu.model;

// Generated 10/03/2011 17:20:24 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AelGradeAgendaExames generated by hbm2java
 */

@Entity
@Table(name = "AEL_GRADE_AGENDA_EXAMES", schema = "AGH")
public class AelGradeAgendaExame extends BaseEntityId<AelGradeAgendaExameId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1462833441818345260L;
	private AelGradeAgendaExameId id;
	private RapServidores servidorDigitado;
	private Date criadoEm;
	private DominioSituacao situacao;
	private AelGrupoExames grupoExame;
	private RapServidores servidor;
	private AelSalasExecutorasExames salaExecutoraExames;
	private AelUnfExecutaExames exame;
	private Date dataUltimaGeracao;
	private AghUnidadesFuncionais unidadeFuncional;
	private Set<AelHorarioGradeExame> horaiosGradeExame;
	private Set<AelHorarioExameDisp> horaiosExameDisp;
	
	private AelExames aelExames;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name="UFE_EMA_EXA_SIGLA", insertable=false, updatable=false)	
	public AelExames getAelExames() {
		return aelExames;
	}

	public void setAelExames(AelExames aelExames) {
		this.aelExames = aelExames;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "unfSeq", column = @Column(name = "UNF_SEQ", nullable = false, precision = 4, scale = 0)),
			@AttributeOverride(name = "seqp", column = @Column(name = "SEQP", nullable = false, precision = 7, scale = 0)) })
	public AelGradeAgendaExameId getId() {
		return this.id;
	}

	public void setId(AelGradeAgendaExameId id) {
		this.id = id;
	}

	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA_DIGITADO", referencedColumnName = "MATRICULA", nullable = false),
	@JoinColumn(name = "SER_VIN_CODIGO_DIGITADO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidorDigitado() {
		return this.servidorDigitado;
	}

	public void setServidorDigitado(RapServidores servidorDigitado) {
		this.servidorDigitado = servidorDigitado;
	}


	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CRIADO_EM", nullable = false, length = 7)
	public Date getCriadoEm() {
		return this.criadoEm;
	}

	public void setCriadoEm(Date criadoEm) {
		this.criadoEm = criadoEm;
	}

	@Column(name = "IND_SITUACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getSituacao() {
		return this.situacao;
	}

	public void setSituacao(DominioSituacao situacao) {
		this.situacao = situacao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "GEX_SEQ")
	public AelGrupoExames  getGrupoExame() {
		return this.grupoExame;
	}

	public void setGrupoExame(AelGrupoExames grupoExame) {
		this.grupoExame = grupoExame;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({ @JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA"),
	@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO") })
	public RapServidores getServidor() {
		return this.servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "SEE_UNF_SEQ", referencedColumnName = "UNF_SEQ"),
			@JoinColumn(name = "SEE_SEQP", referencedColumnName = "SEQP") })
	public AelSalasExecutorasExames getSalaExecutoraExames() {
		return this.salaExecutoraExames;
	}

	public void setSalaExecutoraExames(
			AelSalasExecutorasExames salaExecutoraExames) {
		this.salaExecutoraExames = salaExecutoraExames;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "UFE_EMA_EXA_SIGLA", referencedColumnName = "EMA_EXA_SIGLA"),
			@JoinColumn(name = "UFE_EMA_MAN_SEQ", referencedColumnName = "EMA_MAN_SEQ"),
			@JoinColumn(name = "UFE_UNF_SEQ", referencedColumnName = "UNF_SEQ") })
	public AelUnfExecutaExames getExame() {
		return this.exame;
	}

	public void setExame(AelUnfExecutaExames exame) {
		this.exame = exame;
	}
	
	@Temporal(TemporalType.DATE)
	@Column(name = "DATA_ULTIMA_GERACAO", length = 7)
	public Date getDataUltimaGeracao() {
		return this.dataUltimaGeracao;
	}

	public void setDataUltimaGeracao(Date dataUltimaGeracao) {
		this.dataUltimaGeracao = dataUltimaGeracao;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UNF_SEQ", referencedColumnName = "SEQ", nullable = false, insertable = false, updatable = false)
	public AghUnidadesFuncionais getUnidadeFuncional() {
		return this.unidadeFuncional;
	}

	public void setUnidadeFuncional(AghUnidadesFuncionais unidadeFuncional) {
		this.unidadeFuncional = unidadeFuncional;
	}
	
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "gradeAgendaExame")	
	public Set<AelHorarioGradeExame> getHoraiosGradeExame() {
		return horaiosGradeExame;
	}
	
	public void setHoraiosGradeExame(Set<AelHorarioGradeExame> horaiosGradeExame) {
		this.horaiosGradeExame = horaiosGradeExame;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "gradeAgendaExame")
	public Set<AelHorarioExameDisp> getHoraiosExameDisp() {
		return horaiosExameDisp;
	}
	
	public void setHoraiosExameDisp(Set<AelHorarioExameDisp> horaiosExameDisp) {
		this.horaiosExameDisp = horaiosExameDisp;
	}

	

	public enum Fields {
		
		ID("id"),
		SEQP("id.seqp"),
		UNF_SEQ("id.unfSeq"),
		CRIADO_EM("criadoEm"),
		UFE_UNF_SEQ("exame.id.unfSeq"),
		UFE_UNF_SEQ_SEQ("exame.id.unfSeq.seq"),
		UFE_EMA_MAN_SEQ("exame.id.emaManSeq"),
		UFE_EMA_EXA_SIGLA("exame.id.emaExaSigla"),
		DATA_ULTIMA_GERACAO("dataUltimaGeracao"),
		SALAS_EXECUTORAS_EXAMES("salaExecutoraExames"),
		UNIDADE_FUNCIONAL("unidadeFuncional"),
		EXAME("exame"),
		SERVIDOR_DIGITADO("servidorDigitado"),
		IND_SITUACAO("situacao"),
		SALAS_EXECUTORAS_EXAMES_SEQ("salaExecutoraExames.id.seqp"),
		SALAS_EXECUTORAS_EXAMES_UNF_SEQ("salaExecutoraExames.id.unfSeq"),
		GRUPO_EXAME("grupoExame"),
		GRUPO_EXAME_DESC("grupoExame.descricao"),
		GEX_SEQ("grupoExame.seq"),
		NOME_FUNC("servidor.pessoaFisica.nome"),
		SERVIDOR("servidor"),
		SERVIDOR_ID("servidor.id"),
		HORARIOS_EXAME_DISP("horaiosExameDisp"),
		AELEXAMES("aelExames"),
		;

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
		
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		AelGradeAgendaExame other = (AelGradeAgendaExame) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		return true;
	}
	
	

}
