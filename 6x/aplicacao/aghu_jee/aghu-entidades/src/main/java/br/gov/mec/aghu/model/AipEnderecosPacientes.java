package br.gov.mec.aghu.model;

// Generated 24/09/2009 17:21:40 by Hibernate Tools 3.2.5.Beta

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;


import org.apache.commons.lang3.StringUtils;
import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioSimNao;
import br.gov.mec.aghu.dominio.DominioTipoEndereco;
import br.gov.mec.aghu.core.exception.BaseRuntimeException;
import br.gov.mec.aghu.core.exception.BusinessExceptionCode;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * AipEnderecosPacientes generated by hbm2java
 */
@SuppressWarnings({"PMD.AghuUsoIndevidoDaEnumDominioSimNaoEntity"})
@Entity
@Table(name = "AIP_ENDERECOS_PACIENTES", schema = "AGH")
public class AipEnderecosPacientes extends BaseEntityId<AipEnderecosPacientesId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7530124975637713352L;

	private enum AipEnderecosPacientesExceptionCode implements
			BusinessExceptionCode {
		ENDERECO_DUPLAMENTE_INFORMADO, CIDADE_DUPLAMENTE_INFORMADA
	}

	private AipEnderecosPacientesId id;
	private AipUfs aipUf;
	private AipBairrosCepLogradouro aipBairrosCepLogradouro;
	private AipCidades aipCidade;
	private AipPacientes aipPaciente;
	private AipLogradouros aipLogradouro;
	private Integer bclCloLgrCodigo;
	private DominioTipoEndereco tipoEndereco;
	private DominioSimNao indPadrao;
	private String logradouro;
	private Integer nroLogradouro;
	private String complLogradouro;
	private String bairro;
	private String cidade;
	private Integer cep;
	private String indExclusaoForcada;
	private Integer version = 0;
	private VAipCeps vAipCep;
	private Boolean emEdicao = false;
	private Integer cepEnderecoPaciente;
	
	private Integer cddCodigo;
	
	public AipEnderecosPacientes() {
	}

	public AipEnderecosPacientes(AipEnderecosPacientesId id,
			AipPacientes aipPaciente) {
		this.id = id;
		this.aipPaciente = aipPaciente;
	}

	public AipEnderecosPacientes(AipEnderecosPacientesId id, AipUfs aipUf,
			AipBairrosCepLogradouro aipBairrosCepLogradouro,
			AipCidades aipCidade, AipPacientes aipPaciente,
			DominioTipoEndereco tipoEndereco, DominioSimNao indPadrao,
			String logradouro, Integer nroLogradouro, String complLogradouro,
			String bairro, String cidade, Integer cep, String indExclusaoForcada) {
		this.id = id;
		this.aipUf = aipUf;
		this.aipBairrosCepLogradouro = aipBairrosCepLogradouro;
		this.aipCidade = aipCidade;
		this.aipPaciente = aipPaciente;
		this.tipoEndereco = tipoEndereco;
		this.indPadrao = indPadrao;
		this.logradouro = logradouro;
		this.nroLogradouro = nroLogradouro;
		this.complLogradouro = complLogradouro;
		this.bairro = bairro;
		this.cidade = cidade;
		this.cep = cep;
		this.indExclusaoForcada = indExclusaoForcada;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "pacCodigo", column = @Column(name = "PAC_CODIGO", nullable = false, precision = 8, scale = 0)),
			@AttributeOverride(name = "seqp", column = @Column(name = "SEQP", nullable = false, precision = 3, scale = 0)) })
	public AipEnderecosPacientesId getId() {
		return this.id;
	}

	public void setId(AipEnderecosPacientesId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "UF_SIGLA")
	public AipUfs getAipUf() {
		return this.aipUf;
	}

	public void setAipUf(AipUfs aipUf) {
		this.aipUf = aipUf;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumns( {
			@JoinColumn(name = "BCL_CLO_LGR_CODIGO", referencedColumnName = "CLO_LGR_CODIGO"),
			@JoinColumn(name = "BCL_CLO_CEP", referencedColumnName = "CLO_CEP"),
			@JoinColumn(name = "BCL_BAI_CODIGO", referencedColumnName = "BAI_CODIGO") })
	public AipBairrosCepLogradouro getAipBairrosCepLogradouro() {
		return this.aipBairrosCepLogradouro;
	}

	public void setAipBairrosCepLogradouro(
			AipBairrosCepLogradouro aipBairrosCepLogradouro) {
		this.aipBairrosCepLogradouro = aipBairrosCepLogradouro;
	}

	@Transient
	public VAipCeps getvAipCep() {
		return vAipCep;
	}

	public void setvAipCep(VAipCeps vAipCep) {
		this.vAipCep = vAipCep;
	}

	@Transient
	public Boolean getEmEdicao() {
		return emEdicao;
	}

	public void setEmEdicao(Boolean emEdicao) {
		this.emEdicao = emEdicao;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "BCL_CLO_LGR_CODIGO", referencedColumnName = "CODIGO", insertable = false, updatable = false)
	public AipLogradouros getAipLogradouro() {
		return this.aipLogradouro;
	}

	public void setAipLogradouro(AipLogradouros aipLogradouro) {
		this.aipLogradouro = aipLogradouro;
	}
	
	//ehgsilva: Este campo foi mapeado apenas para tornar possível obtê-lo através de
	//criteria com projection na impressão do boletim de internação do paciente
	//Como está definido com insertable=false e updatable=false não deverá 
	//causar problemas
	@Column(name = "BCL_CLO_LGR_CODIGO", insertable = false, updatable = false)
	public Integer getBclCloLgrCodigo() {
		return bclCloLgrCodigo;
	}

	public void setBclCloLgrCodigo(Integer bclCloLgrCodigo) {
		this.bclCloLgrCodigo = bclCloLgrCodigo;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "CDD_CODIGO")
	public AipCidades getAipCidade() {
		return this.aipCidade;
	}

	public void setAipCidade(AipCidades aipCidade) {
		this.aipCidade = aipCidade;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PAC_CODIGO", nullable = false, insertable = false, updatable = false)
	public AipPacientes getAipPaciente() {
		return this.aipPaciente;
	}

	public void setAipPaciente(AipPacientes aipPaciente) {
		this.aipPaciente = aipPaciente;
	}

	@Column(name = "TIPO_ENDERECO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioTipoEndereco getTipoEndereco() {
		return this.tipoEndereco;
	}

	public void setTipoEndereco(DominioTipoEndereco tipoEndereco) {
		this.tipoEndereco = tipoEndereco;
	}

	@Column(name = "IND_PADRAO", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndPadrao() {
		return this.indPadrao;
	}

	public void setIndPadrao(DominioSimNao indPadrao) {
		this.indPadrao = indPadrao;
	}

	@Column(name = "LOGRADOURO", length = 120)
	@Length(max = 120, message = "Logradouro do endereço do paciente tem tamanho máximo de 120 caracteres")
	public String getLogradouro() {
		return this.logradouro;
	}

	public void setLogradouro(String logradouro) {
		if (!"".equalsIgnoreCase(logradouro)) {
			this.logradouro = (logradouro == null ? null : logradouro
					.toUpperCase());
		} else {
			this.logradouro = null;
		}
	}

	@Column(name = "NRO_LOGRADOURO", precision = 5, scale = 0)
	public Integer getNroLogradouro() {
		return this.nroLogradouro;
	}

	public void setNroLogradouro(Integer nroLogradouro) {
		this.nroLogradouro = nroLogradouro;
	}

	@Column(name = "COMPL_LOGRADOURO", length = 200)
	@Length(max = 200, message = "Complemento do logradouro deve ter no máximo 200 caracteres")
	public String getComplLogradouro() {
		return this.complLogradouro;
	}

	public void setComplLogradouro(String complLogradouro) {
		if (!"".equalsIgnoreCase(complLogradouro)) {
			if (complLogradouro != null) {
				this.complLogradouro = complLogradouro.toUpperCase();
			} else {
				this.complLogradouro = null;
			}
		} else {
			this.complLogradouro = null;
		}
	}

	@Column(name = "BAIRRO", length = 100)
	@Length(max = 100, message = "Bairro do endereço do paciente tem tamanho máximo de 100 caracteres")
	public String getBairro() {
		return this.bairro;
	}

	public void setBairro(String bairro) {
		if (!"".equalsIgnoreCase(bairro)) {
			this.bairro = (bairro == null ? null : bairro.toUpperCase());
		} else {
			this.bairro = null;
		}
	}

	@Column(name = "CIDADE", length = 40)
	@Length(max = 40, message = "Cidade do endereço do paciente tem tamanho máximo de 40 caracteres")
	public String getCidade() {
		return this.cidade;
	}

	public void setCidade(String cidade) {
		if (!"".equalsIgnoreCase(cidade)) {
			this.cidade = (cidade == null ? null : cidade.toUpperCase());
		} else {
			this.cidade = null;
		}
	}

	@Column(name = "CEP", precision = 8, scale = 0)
	public Integer getCep() {
		return this.cep;
	}

	public void setCep(Integer cep) {
		this.cep = cep;
	}
	
	@Column(name = "BCL_CLO_CEP", precision = 8, scale = 0, insertable = false, updatable = false)
	public Integer getCepEnderecoPaciente() {
		return this.cepEnderecoPaciente;
	}

	public void setCepEnderecoPaciente(Integer cepEnderecoPaciente) {
		this.cepEnderecoPaciente = cepEnderecoPaciente;
	}

	@Column(name = "IND_EXCLUSAO_FORCADA", length = 1)
	@Length(max = 1)
	public String getIndExclusaoForcada() {
		return this.indExclusaoForcada;
	}

	public void setIndExclusaoForcada(String indExclusaoForcada) {
		this.indExclusaoForcada = indExclusaoForcada;
	}

	@Transient
	public boolean isPadrao() {
		if (getIndPadrao() != null) {
			return getIndPadrao().isSim();
		} else {
			return Boolean.FALSE;
		}
	}

	public void setPadrao(boolean padrao) {
		setIndPadrao(DominioSimNao.getInstance(padrao));
	}

	/*
	 * 	@JoinColumn(name = "BCL_CLO_LGR_CODIGO", referencedColumnName = "CLO_LGR_CODIGO"),
			@JoinColumn(name = "BCL_CLO_CEP", referencedColumnName = "CLO_CEP"),
			@JoinColumn(name = "BCL_BAI_CODIGO", referencedColumnName = "BAI_CODIGO") })
	 */
	public enum Fields {
		PACIENTE("aipPaciente"), SEQUENCIAL("id.seqp"), IND_EXCLUSAO_FORCADA("indExclusaoForcada"),COD_PACIENTE(
				"id.pacCodigo"), IND_PADRAO("indPadrao"), TIPO_ENDERECO(
				"tipoEndereco"), BCL_CLO_LGR_CODIGO("bclCloLgrCodigo"), NRO_LOGRADOURO(
				"nroLogradouro"), LOGRADOURO("logradouro"), CDD_CODIGO(
				"aipCidade.codigo"), CIDADE("aipCidade"), BAIRROS_CEP_LOGRADOURO(
				"aipBairrosCepLogradouro"),
				BCL_BAI_COD("aipBairrosCepLogradouro.id.baiCodigo"), BCL_CLO_CEP("aipBairrosCepLogradouro.id.cloCep"), 
				BCL_CLO_LGR_COD("aipBairrosCepLogradouro.id.cloLgrCodigo"), 
				AIP_LOGRADOURO("aipLogradouro"), END_CIDADE(
				"cidade"),ID("id"), UF("aipUf"),COMPLEMENTO_LOGRADOURO("complLogradouro"),BAIRRO("bairro"),CEP("cep");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}

	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}
	
	@Transient 
	public boolean isLogradouroCadastrado() {
		return this.getAipBairrosCepLogradouro() != null;
	}

	@Transient
	public String getLogradouroEndereco() {
		if (this.aipLogradouro == null) {
			return this.logradouro;
		} else {
			StringBuffer sb = new StringBuffer();
			if (this.aipLogradouro != null) {
				if (this.aipLogradouro.getAipTipoLogradouro() != null) {
					sb.append(this.aipLogradouro.getAipTipoLogradouro()
							.getAbreviatura());
					sb.append(' ');
				}

				AipTituloLogradouros titulo = this.aipLogradouro
						.getAipTituloLogradouro();
				if (titulo != null
						&& StringUtils.isNotBlank(titulo.getDescricao())) {
					sb.append(titulo.getDescricao());
					sb.append(' ');
				}

				sb.append(this.aipLogradouro.getNome());
			}

			return sb.toString();
		}
	}

	@Transient
	public String getBairroEndereco() {
		if (this.aipLogradouro == null) {
			return this.bairro;
		} else if (this.aipBairrosCepLogradouro != null
				&& this.aipBairrosCepLogradouro.getAipBairro() != null) {
			return this.aipBairrosCepLogradouro.getAipBairro().getDescricao();
		} else {
			return null;
		}
	}

	@Transient
	public String getCidadeEndereco() {
		if (this.aipCidade != null) {
			return this.aipCidade.getNome();
		} else if (this.aipLogradouro != null
				&& this.aipLogradouro.getAipCidade() != null) {
			return this.aipLogradouro.getAipCidade().getNome();
		} else {
			return this.cidade;
		}
	}

	@Transient
	public Integer getCepEndereco() {
		if (this.aipLogradouro == null) {
			if (this.cep != null) {
				return this.cep;
			} else {
				if (this.aipCidade != null) {
					return this.aipCidade.getCep();
				} else {
					return null;
				}
			}
		} else if (this.aipBairrosCepLogradouro != null) {
			return this.aipBairrosCepLogradouro.getId().getCloCep();
		} else if (this.aipLogradouro.getAipCidade() != null) {
			return this.aipLogradouro.getAipCidade().getCep();
		} else {
			return null;
		}
	}

	@Transient
	public String getUfEndereco() {
		if (this.aipCidade != null) {
			return this.aipCidade.getAipUf().getSigla();
		} else if (this.aipUf != null) {
			return this.aipUf.getSigla();
		} else if (this.aipLogradouro != null
				&& this.aipLogradouro.getAipCidade() != null) {
			return this.aipLogradouro.getAipCidade().getAipUf().getSigla();
		}else if (this.aipBairrosCepLogradouro != null) {
			return this.getAipBairrosCepLogradouro().getCepLogradouro().getLogradouro().getAipCidade().getAipUf().getSigla();
		}
		else {
			return null;
		}
	}

	@PrePersist
	@PreUpdate
	@SuppressWarnings("unused")
	private void validacoes() {

		// FIXME Geraldo Corrigir problema descrito na issue #4106 (O problema foi apenas contornado na issue). 
		
		/*
		 * Se informado o BCL (Bairro/Cep/Logradouro) não informar os demais
		 * campos avulsos de endereço, e vice-versa. OBS: esta restrição apesar
		 * de negocial, não existe em banco
		 */
		if (this.aipBairrosCepLogradouro != null
				&& (this.aipUf != null || this.aipCidade != null
						|| this.logradouro != null || this.bairro != null
						|| this.cidade != null || this.cep != null)) {

			throw new BaseRuntimeException(
					AipEnderecosPacientesExceptionCode.ENDERECO_DUPLAMENTE_INFORMADO);
		}

		/*
		 * Implementação da CHECK CONSTRAINT AIP_ENP_CK4
		 */

		if (this.aipCidade != null && !StringUtils.isBlank(this.cidade)) {

			throw new BaseRuntimeException(
					AipEnderecosPacientesExceptionCode.CIDADE_DUPLAMENTE_INFORMADA);
		}
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof AipEnderecosPacientes)) {
			return false;
		}
		AipEnderecosPacientes other = (AipEnderecosPacientes) obj;
		if (this.id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!this.id.equals(other.getId())) {
			return false;
		}
		return true;
	}

	//pedro.silva: Este campo foi mapeado apenas para tornar possível obtê-lo através de
	//criteria com projection na impressão do boletim de internação do paciente
	//Como está definido com insertable=false e updatable=false não deverá 
	//causar problemas
	@Column(name = "CDD_CODIGO", insertable = false, updatable = false)
	public Integer getCddCodigo() {
		return cddCodigo;
	}

	public void setCddCodigo(Integer cddCodigo) {
		this.cddCodigo = cddCodigo;
	}

}
