package br.gov.mec.aghu.model;

// Generated 28/08/2009 17:17:19 by Hibernate Tools 3.2.5.Beta

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.Version;

import org.hibernate.annotations.Cascade;

import br.gov.mec.aghu.dominio.DominioCaracEspecialidade;
import br.gov.mec.aghu.dominio.DominioEspecialidadeInterna;
import br.gov.mec.aghu.dominio.DominioSimNao;
import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.persistence.BaseEntitySeq;


/**
 * AghEspecialidades generated by hbm2java
 * 
 * Armazena as especialidades de atuação no Hospital.
 */
@Entity
@Table(name = "AGH_ESPECIALIDADES", schema = "AGH")
@SequenceGenerator(name = "aghEspSq1", sequenceName = "AGH.AGH_ESP_SQ1", allocationSize = 1)
@SuppressWarnings({"PMD.ExcessiveClassLength", "PMD.AghuUsoIndevidoDaEnumDominioSimNaoEntity"})
public class AghEspecialidades extends BaseEntitySeq<Short> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8007523875261345769L;

	/**
	 * Chave primária na base de dados.
	 */
	private Short seq;
	
	/**
	 * Sigla da especialidade.
	 */
	private String sigla;
	/**
	 * Nome da especialidade.
	 */
	private String nomeEspecialidade;
	/**
	 * Nome reduzido da especialidade.
	 */
	private String nomeReduzido;
	/**
	 * Idade mínima do paciente ambulatorial para atendimento na especialidade.
	 */
	private Short idadeMinPacAmbulatorio;
	/**
	 * Idade máxima do paciente ambulatorial para atendimento na especialidade.
	 */
	private Short idadeMaxPacAmbulatorio;
	/**
	 * Idade mínima do paciente para internação na especialidade.
	 */
	private Short idadeMinPacInternacao;
	/**
	 * Idade máxima do paciente para internação na especialidade.
	 */
	private Short idadeMaxPacInternacao;
	/**
	 * Indica se a especialidade interna
	 */
	private DominioEspecialidadeInterna indEspInterna;
	/**
	 * Indica se a especialidade realiza consultoria.
	 */
	private DominioSimNao indConsultoria;
	/**
	 * Clínica.
	 */
	private AghClinicas clinica;
	private Byte greSeq;
	/**
	 * Servidor.
	 */
	private RapServidores servidor;
	/**
	 * 
	 */
	private AghEspecialidades especialidade;
	/**
	 * Centro de custo.
	 */
	private FccCentroCustos centroCusto;
	/**
	 * Servidor Chefe.
	 */
	private RapServidores servidorChefe;
	/**
	 * Situacao da Especialidade
	 */
	private DominioSituacao indSituacao;
	/**
	 * Contém a capacidade referecial da especialidade na internação.
	 */
	private Short capacReferencial;
	/**
	 * Indica se a especialidade é para atendimento de hospital dia.
	 */
	private DominioSimNao indAtendHospDia;
	/**
	 * Especialidade agrupa lote exames.
	 */
	private AghEspecialidades especialidadeAgrupaLoteExame;
	/**
	 * Indica se a especialidade deve sugerir profissional na internação.
	 */
	private DominioSimNao indSugereProfInternacao;
	/**
	 * Indica se gera horário disponível na grade agendamento para feriado.
	 */
	private DominioSimNao indHoraDispFeriado;
	/**
	 * Chave estrangeira p/ tabela AGH_ESPECIFICACOES. Ainda não gerada.
	 */
	private Short epcSeq;
	/**
	 * Indica se deve ser impressa agenda para esta especialidade.
	 */
	private DominioSimNao indImprimeAgenda;
	/**
	 * Indica se deve ser emitido Boletim de Atendimento
	 */
	private DominioSimNao indEmiteBoletimAtendimento;
	/**
	 * Indica se deve ser emitido ticket de consulta
	 */
	private DominioSimNao indEmiteTicket;
	/**
	 * Indica se deve emitir mensagem no SAMIS para consulta marcada / solic. prontuário .
	 */
	private DominioSimNao indEnviaMensagem;
	/**
	 * 
	 */
	private DominioSimNao indAcompPosTransplante;
	/**
	 * Média de permanencia da especialidade.
	 */
	private Integer mediaPermanencia;
	/**
	 * Indica se a especialidade possui pronto-atendimento.
	 */
	private DominioSimNao indProntoAtendimento;
	/**
	 * Indica se a especialidade imprime só serviço no sumário de alta.
	 */
	private DominioSimNao indImpSoServico;
	/**
	 * Indica se imprimiu solic consultoria.
	 */
	private Boolean indImpSolicConsultoria;
	/**
	 * Induca se a especialidade é pediátrica.
	 */
	private Boolean indEspPediatrica;
	private Byte maxQuantFaltas;
	private Date tempo;
	private Short percInterconsultaConsultor;
	
	private Integer version;

	private Set<MptTratamentoTerapeutico> tratamentosTerapeuticos;

	private Set<AghAtendimentos> atendimentos;

	private Set<AinIndicadoresHospitalares> indicadoresHospitalares;
	
	private Set<AinInternacao> internacoes;
	
	private Set<AelEspecialidadeCampoLaudo> especCampoLaudo;
	
	private Set<AghCaractEspecialidades> caracteristicas;
	private Set<AghProfEspecialidades> profEspecialidades;
	private Set<FatEspecialidadeTratamento> fatEspecialidadeTratamentos;
	private Set<AacGradeAgendamenConsultas> gradeAgendamentoConsultas;
	private Set<FatProcedAmbRealizado> fatProcedAmbRealizados;
	private Set<MbcEspecialidadeProcCirgs> especialidadesProcCirgs;
	private Set<FatTransplanteEspecialidade> fatTransplanteEspecialidades;
	private Set<AacProcedHospEspecialidades> procedHospEspecialidades;
	
	private String labelSeqSiglaNomeEspecialidade;
	
	private Set<MpaPopAgendas> mpaPopAgendas;
	
	public AghEspecialidades() {
	}
	
	public AghEspecialidades(Short seq) {
		this.seq = seq;
	}
	
	public AghEspecialidades(Short seq, String sigla) {
		this.seq = seq;
		this.sigla = sigla;
	}
	
	@SuppressWarnings({"PMD.ExcessiveParameterList"})
	public AghEspecialidades(Short seq, String sigla, String nomeEspecialidade,
			String nomeReduzido, Short idadeMinPacAmbulatorio,
			Short idadeMaxPacAmbulatorio, Short idadeMinPacInternacao,
			Short idadeMaxPacInternacao,
			DominioEspecialidadeInterna indEspInterna,
			DominioSimNao indConsultoria, AghClinicas clinica,
			RapServidores servidor, FccCentroCustos cctCodigo,
			DominioSituacao indSituacao, DominioSimNao indAtendHospDia,
			DominioSimNao indSugereProfInternacao,
			DominioSimNao indHoraDispFeriado, DominioSimNao indImprimeAgenda,
			DominioSimNao indEmiteBa, DominioSimNao indEmiteTicket,
			DominioSimNao indEnviaMsg, DominioSimNao indAcompPosTransplante,
			DominioSimNao indProntoAtendimento, DominioSimNao indImpSoServico,
			Boolean indImpSolicConsultoria, Boolean indEspPediatrica) {
		this.seq = seq;
		this.sigla = sigla;
		this.nomeEspecialidade = nomeEspecialidade;
		this.nomeReduzido = nomeReduzido;
		this.idadeMinPacAmbulatorio = idadeMinPacAmbulatorio;
		this.idadeMaxPacAmbulatorio = idadeMaxPacAmbulatorio;
		this.idadeMinPacInternacao = idadeMinPacInternacao;
		this.idadeMaxPacInternacao = idadeMaxPacInternacao;
		this.indEspInterna = indEspInterna;
		this.indConsultoria = indConsultoria;
		this.clinica = clinica;
		this.servidor = servidor;
		this.centroCusto = cctCodigo;
		this.indSituacao = indSituacao;
		this.indAtendHospDia = indAtendHospDia;
		this.indSugereProfInternacao = indSugereProfInternacao;
		this.indHoraDispFeriado = indHoraDispFeriado;
		this.indImprimeAgenda = indImprimeAgenda;
		this.indEmiteBoletimAtendimento = indEmiteBa;
		this.indEmiteTicket = indEmiteTicket;
		this.indEnviaMensagem = indEnviaMsg;
		this.indAcompPosTransplante = indAcompPosTransplante;
		this.indProntoAtendimento = indProntoAtendimento;
		this.indImpSoServico = indImpSoServico;
		this.indImpSolicConsultoria = indImpSolicConsultoria;
		this.indEspPediatrica = indEspPediatrica;
	}

	@SuppressWarnings({"PMD.ExcessiveParameterList"})
	public AghEspecialidades(Short seq, String sigla, String nomeEspecialidade,
			String nomeReduzido, Short idadeMinPacAmbulatorio,
			Short idadeMaxPacAmbulatorio, Short idadeMinPacInternacao,
			Short idadeMaxPacInternacao,
			DominioEspecialidadeInterna indEspInterna,
			DominioSimNao indConsultoria, AghClinicas clinica,
			Byte greSeq, RapServidores servidor,
			AghEspecialidades espSeq, FccCentroCustos cctCodigo,
			RapServidores servidorchefe, DominioSituacao indSituacao,
			Short capacReferencial, DominioSimNao indAtendHospDia,
			AghEspecialidades espSeqAgrupaLoteExame,
			DominioSimNao indSugereProfInternacao,
			DominioSimNao indHoraDispFeriado, Short epcSeq,
			DominioSimNao indImprimeAgenda, DominioSimNao indEmiteBa,
			DominioSimNao indEmiteTicket, DominioSimNao indEnviaMsg,
			DominioSimNao indAcompPosTransplante, Integer mediaPermanencia,
			DominioSimNao indProntoAtendimento, DominioSimNao indImpSoServico,
			Boolean indImpSolicConsultoria,
			Boolean indEspPediatrica, Byte maxQuantFaltas, Date tempo,
			Short percInterconsultaConsultor) {
		this.seq = seq;
		this.sigla = sigla;
		this.nomeEspecialidade = nomeEspecialidade;
		this.nomeReduzido = nomeReduzido;
		this.idadeMinPacAmbulatorio = idadeMinPacAmbulatorio;
		this.idadeMaxPacAmbulatorio = idadeMaxPacAmbulatorio;
		this.idadeMinPacInternacao = idadeMinPacInternacao;
		this.idadeMaxPacInternacao = idadeMaxPacInternacao;
		this.indEspInterna = indEspInterna;
		this.indConsultoria = indConsultoria;
		this.clinica = clinica;
		this.greSeq = greSeq;
		this.servidor = servidor;
		this.especialidade = espSeq;
		this.centroCusto = cctCodigo;
		this.servidorChefe = servidorchefe;
		this.indSituacao = indSituacao;
		this.capacReferencial = capacReferencial;
		this.indAtendHospDia = indAtendHospDia;
		this.especialidadeAgrupaLoteExame = espSeqAgrupaLoteExame;
		this.indSugereProfInternacao = indSugereProfInternacao;
		this.indHoraDispFeriado = indHoraDispFeriado;
		this.epcSeq = epcSeq;
		this.indImprimeAgenda = indImprimeAgenda;
		this.indEmiteBoletimAtendimento = indEmiteBa;
		this.indEmiteTicket = indEmiteTicket;
		this.indEnviaMensagem = indEnviaMsg;
		this.indAcompPosTransplante = indAcompPosTransplante;
		this.mediaPermanencia = mediaPermanencia;
		this.indProntoAtendimento = indProntoAtendimento;
		this.indImpSoServico = indImpSoServico;
		this.indImpSolicConsultoria = indImpSolicConsultoria;
		this.indEspPediatrica = indEspPediatrica;
		this.maxQuantFaltas = maxQuantFaltas;
		this.tempo = tempo;
		this.percInterconsultaConsultor = percInterconsultaConsultor;
	}

	@Id
	@Column(name = "SEQ", nullable = false, precision = 4, scale = 0)
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "aghEspSq1")
	public Short getSeq() {
		return this.seq;
	}

	public void setSeq(Short seq) {
		this.seq = seq;
	}

	@Column(name = "SIGLA", nullable = false, length = 3)
	public String getSigla() {
		return this.sigla;
	}

	public void setSigla(String sigla) {
		this.sigla = sigla;
	}

	@Column(name = "NOME_ESPECIALIDADE", nullable = false, length = 45)
	public String getNomeEspecialidade() {
		return this.nomeEspecialidade;
	}
	
	public void setNomeEspecialidade(String nomeEspecialidade) {
		this.nomeEspecialidade = nomeEspecialidade;
	}

	@Column(name = "NOME_REDUZIDO", nullable = false, length = 14)
	public String getNomeReduzido() {
		return this.nomeReduzido;
	}

	public void setNomeReduzido(String nomeReduzido) {
		this.nomeReduzido = nomeReduzido;
	}

	@Column(name = "IDADE_MIN_PAC_AMBULATORIO", nullable = false, precision = 3, scale = 0)
	public Short getIdadeMinPacAmbulatorio() {
		return this.idadeMinPacAmbulatorio;
	}

	public void setIdadeMinPacAmbulatorio(Short idadeMinPacAmbulatorio) {
		this.idadeMinPacAmbulatorio = idadeMinPacAmbulatorio;
	}

	@Column(name = "IDADE_MAX_PAC_AMBULATORIO", nullable = false, precision = 3, scale = 0)
	public Short getIdadeMaxPacAmbulatorio() {
		return this.idadeMaxPacAmbulatorio;
	}

	public void setIdadeMaxPacAmbulatorio(Short idadeMaxPacAmbulatorio) {
		this.idadeMaxPacAmbulatorio = idadeMaxPacAmbulatorio;
	}

	@Column(name = "IDADE_MIN_PAC_INTERNACAO", nullable = false, precision = 3, scale = 0)
	public Short getIdadeMinPacInternacao() {
		return this.idadeMinPacInternacao;
	}

	public void setIdadeMinPacInternacao(Short idadeMinPacInternacao) {
		this.idadeMinPacInternacao = idadeMinPacInternacao;
	}

	@Column(name = "IDADE_MAX_PAC_INTERNACAO", nullable = false, precision = 3, scale = 0)
	public Short getIdadeMaxPacInternacao() {
		return this.idadeMaxPacInternacao;
	}

	public void setIdadeMaxPacInternacao(Short idadeMaxPacInternacao) {
		this.idadeMaxPacInternacao = idadeMaxPacInternacao;
	}

	@Column(name = "IND_ESP_INTERNA", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioEspecialidadeInterna getIndEspInterna() {
		return this.indEspInterna;
	}

	public void setIndEspInterna(DominioEspecialidadeInterna indEspInterna) {
		this.indEspInterna = indEspInterna;
	}
	
	
//	
//	@Transient
//	public String isIndicDominioEspecialidadeInterna() {
//		if (getIndEspInterna() != null || getIndEspInterna().equals(DominioEspecialidadeInterna.I)) {
//			return getIndEspInterna() == DominioEspecialidadeInterna.I;
//		} else {
//			return getIndEspInterna() == DominioEspecialidadeInterna.U;
//		}
//	}
//
//	public String setIndicDominioEspecialidadeInterna(String valor) {
//		setIndEspInterna(DominioEspecialidadeInterna.I);
//	}
	
	
	@Column(name = "IND_CONSULTORIA", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndConsultoria() {
		return this.indConsultoria;
	}

	//IndConsultoria
	@Transient
	public boolean isIndicConsultoria() {
		if (getIndConsultoria() != null) {
			return getIndConsultoria() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}

	public void setIndicConsultoria(boolean valor) {
		setIndConsultoria(DominioSimNao.getInstance(valor));
	}
	
	
	public void setIndConsultoria(DominioSimNao indConsultoria) {
		this.indConsultoria = indConsultoria;
	}

	/**
	 * @return the clinica
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CLC_CODIGO", nullable = false)
	public AghClinicas getClinica() {
		return this.clinica;
	}

	/**
	 * @param clinica
	 *            the clinica to set
	 */
	public void setClinica(AghClinicas clinica) {
		this.clinica = clinica;
	}

	@Column(name = "GRE_SEQ", precision = 2, scale = 0)
	public Byte getGreSeq() {
		return greSeq;
	}

	public void setGreSeq(Byte greSeq) {
		this.greSeq = greSeq;
	}
	
	/**
	 * @return the servidorResponsavel
	 */
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO") })
	@ManyToOne(fetch = FetchType.LAZY)
	public RapServidores getServidor() {
		return this.servidor;
	}

	/**
	 * @param servidorResponsavel
	 *            the servidorResponsavel to set
	 */
	public void setServidor(RapServidores servidorResponsavel) {
		this.servidor = servidorResponsavel;
	}

	/**
	 * @return the especialidade
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ESP_SEQ")
	public AghEspecialidades getEspecialidade() {
		return this.especialidade;
	}

	/**
	 * @param especialidade
	 *            the especialidade to set
	 */
	public void setEspecialidade(AghEspecialidades especialidade) {
		this.especialidade = especialidade;
	}

	/**
	 * @return the centroCusto
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CCT_CODIGO", nullable = false)
	public FccCentroCustos getCentroCusto() {
		return this.centroCusto;
	}

	/**
	 * @param centroCusto
	 *            the centroCusto to set
	 */
	public void setCentroCusto(FccCentroCustos centroCusto) {
		this.centroCusto = centroCusto;
	}

	/**
	 * @return the servidorChefe
	 */
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA_CHEFE", referencedColumnName = "MATRICULA"),
			@JoinColumn(name = "SER_VIN_CODIGO_CHEFE", referencedColumnName = "VIN_CODIGO") })
	@ManyToOne(fetch = FetchType.LAZY)
	public RapServidores getServidorChefe() {
		return this.servidorChefe;
	}

	/**
	 * @param servidorChefe
	 *            the servidorChefe to set
	 */
	public void setServidorChefe(RapServidores servidorChefe) {
		this.servidorChefe = servidorChefe;
	}

	@Column(name = "IND_SITUACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getIndSituacao() {
		return this.indSituacao;
	}

	public void setIndSituacao(DominioSituacao indSituacao) {
		this.indSituacao = indSituacao;
	}	
	
	//IndConsultoria
	@Transient
	public boolean isIndicSituacao() {
		if (getIndSituacao().equals("A")) {
			return getIndSituacao() == DominioSituacao.A;
		} else {
			return getIndSituacao() == DominioSituacao.I;
		}
	}

	public void setIndicSituacao(boolean valor) {
		setIndSituacao(DominioSituacao.getInstance(valor));
	}
	
	
	@Column(name = "CAPAC_REFERENCIAL", precision = 3, scale = 0)
	public Short getCapacReferencial() {
		return this.capacReferencial;
	}

	public void setCapacReferencial(Short capacReferencial) {
		this.capacReferencial = capacReferencial;
	}

	@Column(name = "IND_ATEND_HOSP_DIA", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndAtendHospDia() {
		return this.indAtendHospDia;
	}

	public void setIndAtendHospDia(DominioSimNao indAtendHospDia) {
		this.indAtendHospDia = indAtendHospDia;
	}
	
	
	//IndAtendHospDia
	@Transient
	public boolean isIndicAtendHospDia() {
		if (getIndAtendHospDia() != null) {
			return getIndAtendHospDia() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}

	public void setIndicAtendHospDia(boolean valor) {
		setIndAtendHospDia(DominioSimNao.getInstance(valor));
	}
	

	/**
	 * @return the especialidadeAgrupaLoteExame
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ESP_SEQ_AGRUPA_LOTE_EXAME")
	public AghEspecialidades getEspecialidadeAgrupaLoteExame() {
		return this.especialidadeAgrupaLoteExame;
	}

	/**
	 * @param especialidadeAgrupaLoteExame
	 *            the especialidadeAgrupaLoteExame to set
	 */
	public void setEspecialidadeAgrupaLoteExame(
			AghEspecialidades especialidadeAgrupaLoteExame) {
		this.especialidadeAgrupaLoteExame = especialidadeAgrupaLoteExame;
	}

	@Column(name = "IND_SUGERE_PROF_INTERNACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndSugereProfInternacao() {
		return this.indSugereProfInternacao;
	}

	public void setIndSugereProfInternacao(DominioSimNao indSugereProfInternacao) {
		this.indSugereProfInternacao = indSugereProfInternacao;
	}

	
	//IndSugereProfInternacao
	@Transient
	public boolean isIndicSugereProfInternacao() {
		if (getIndSugereProfInternacao() != null) {
			return getIndSugereProfInternacao() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}

	public void setIndicSugereProfInternacao(boolean valor) {
		setIndSugereProfInternacao(DominioSimNao.getInstance(valor));
	}
	
	@Column(name = "IND_HORA_DISP_FERIADO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndHoraDispFeriado() {
		return this.indHoraDispFeriado;
	}

	public void setIndHoraDispFeriado(DominioSimNao indHoraDispFeriado) {
		this.indHoraDispFeriado = indHoraDispFeriado;
	}
	
	//IndHoraDispFeriado
	@Transient
	public boolean isIndicHoraDispFeriado() {
		if (getIndHoraDispFeriado() != null) {
			return getIndHoraDispFeriado() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}

	public void setIndicHoraDispFeriado(boolean valor) {
		setIndHoraDispFeriado(DominioSimNao.getInstance(valor));
	}

	@Column(name = "EPC_SEQ", precision = 3, scale = 0)
	public Short getEpcSeq() {
		return this.epcSeq;
	}

	public void setEpcSeq(Short epcSeq) {
		this.epcSeq = epcSeq;
	}

	@Column(name = "IND_IMPRIME_AGENDA", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndImprimeAgenda() {
		return this.indImprimeAgenda;
	}

	public void setIndImprimeAgenda(DominioSimNao indImprimeAgenda) {
		this.indImprimeAgenda = indImprimeAgenda;
	}
	
	//IndImprimeAgenda
	@Transient
	public boolean isIndicImprimeAgenda() {
		if (getIndImprimeAgenda() != null) {
			return getIndImprimeAgenda() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}

	public void setIndicImprimeAgenda(boolean valor) {
		setIndImprimeAgenda(DominioSimNao.getInstance(valor));
	}

	@Column(name = "IND_EMITE_BA", nullable = false, length=1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndEmiteBoletimAtendimento() {
		return this.indEmiteBoletimAtendimento;
	}

	public void setIndEmiteBoletimAtendimento(DominioSimNao indEmiteBa) {
		this.indEmiteBoletimAtendimento = indEmiteBa;
	}
	
	//IndImprimeAgenda
	@Transient
	public boolean isIndicEmiteBoletimAtendimento() {
		if (getIndEmiteBoletimAtendimento() != null) {
			return getIndEmiteBoletimAtendimento() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}
	
	public void setIndicEmiteBoletimAtendimento(boolean valor) {
		setIndEmiteBoletimAtendimento(DominioSimNao.getInstance(valor));
	}
	
	@Column(name = "IND_EMITE_TICKET", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndEmiteTicket() {
		return this.indEmiteTicket;
	}

	public void setIndEmiteTicket(DominioSimNao indEmiteTicket) {
		this.indEmiteTicket = indEmiteTicket;
	}

	//IndIndEmiteTicket
	@Transient
	public boolean isIndicEmiteTicket() {
		if (getIndEmiteTicket() != null) {
			return getIndEmiteTicket() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}
	
	public void setIndicEmiteTicket(boolean valor) {
		setIndEmiteTicket(DominioSimNao.getInstance(valor));
	}
	
	@Column(name = "IND_ENVIA_MSG", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndEnviaMensagem() {
		return this.indEnviaMensagem;
	}

	public void setIndEnviaMensagem(DominioSimNao indEnviaMsg) {
		this.indEnviaMensagem = indEnviaMsg;
	}
	
	//IndIndEmiteTicket
	@Transient
	public boolean isIndicEnviaMensagem() {
		if (getIndEnviaMensagem() != null) {
			return getIndEnviaMensagem() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}
	
	public void setIndicEnviaMensagem(boolean valor) {
		setIndEnviaMensagem(DominioSimNao.getInstance(valor));
	}

	@Column(name = "IND_ACOMP_POS_TRANSPLANTE", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndAcompPosTransplante() {
		return this.indAcompPosTransplante;
	}

	public void setIndAcompPosTransplante(DominioSimNao indAcompPosTransplante) {
		this.indAcompPosTransplante = indAcompPosTransplante;
	}
	
	//IndAcompPosTransplante
	@Transient
	public boolean isIndicAcompPosTransplante() {
		if (getIndAcompPosTransplante() != null) {
			return getIndAcompPosTransplante() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}
	
	public void setIndicAcompPosTransplante(boolean valor) {
		setIndAcompPosTransplante(DominioSimNao.getInstance(valor));
	}

	@Column(name = "MEDIA_PERMANENCIA", precision = 5, scale = 0)
	public Integer getMediaPermanencia() {
		return this.mediaPermanencia;
	}

	public void setMediaPermanencia(Integer mediaPermanencia) {
		this.mediaPermanencia = mediaPermanencia;
	}

	@Column(name = "IND_PRONTO_ATENDIMENTO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndProntoAtendimento() {
		return this.indProntoAtendimento;
	}

	public void setIndProntoAtendimento(DominioSimNao indProntoAtendimento) {
		this.indProntoAtendimento = indProntoAtendimento;
	}
	
	//IndProntoAtendimento
	@Transient
	public boolean isIndicProntoAtendimento() {
		if (getIndProntoAtendimento() != null) {
			return getIndProntoAtendimento() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}
	
	public void setIndicProntoAtendimento(boolean valor) {
		setIndProntoAtendimento(DominioSimNao.getInstance(valor));
	}

	@Column(name = "IND_IMP_SO_SERVICO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSimNao getIndImpSoServico() {
		return this.indImpSoServico;
	}

	public void setIndImpSoServico(DominioSimNao indImpSoServico) {
		this.indImpSoServico = indImpSoServico;
	}

	//IndImpSoServico
	@Transient
	public boolean isIndicImpSoServico() {
		if (getIndImpSoServico() != null) {
			return getIndImpSoServico() == DominioSimNao.S;
		} else {
			return Boolean.FALSE;
		}
	}
	
	public void setIndicImpSoServico(boolean valor) {
		setIndImpSoServico(DominioSimNao.getInstance(valor));
	}
	
    @Column(name = "IND_IMP_SOLIC_CONSULTORIA", nullable = false)
    @org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndImpSolicConsultoria() {
		return this.indImpSolicConsultoria;
	}

	public void setIndImpSolicConsultoria(Boolean indImpSolicConsultoria) {
		this.indImpSolicConsultoria = indImpSolicConsultoria;
	}

    @Column(name = "IND_ESP_PEDIATRICA", nullable = false)
    @org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndEspPediatrica() {
		return this.indEspPediatrica;
	}

	public void setIndEspPediatrica(Boolean indEspPediatrica) {
		this.indEspPediatrica = indEspPediatrica;
	}

	@Column(name = "MAX_QUANT_FALTAS", precision = 2, scale = 0)
	public Byte getMaxQuantFaltas() {
		return this.maxQuantFaltas;
	}

	public void setMaxQuantFaltas(Byte maxQuantFaltas) {
		this.maxQuantFaltas = maxQuantFaltas;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "TEMPO")
	public Date getTempo() {
		return this.tempo;
	}

	public void setTempo(Date tempo) {
		this.tempo = tempo;
	}

	@Column(name = "PERC_INTERCONSULTA_CONSULTOR", precision = 3, scale = 0)
	public Short getPercInterconsultaConsultor() {
		return this.percInterconsultaConsultor;
	}
	
	public void setPercInterconsultaConsultor(Short percInterconsultaConsultor) {
		this.percInterconsultaConsultor = percInterconsultaConsultor;
	}
	
	@Version
	@Column(name = "VERSION", nullable = false)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "especialidade")
	public Set<MptTratamentoTerapeutico> getTratamentosTerapeuticos() {
		return this.tratamentosTerapeuticos;
	}

	public void setTratamentosTerapeuticos(
			Set<MptTratamentoTerapeutico> tratamentosTerapeuticos) {
		this.tratamentosTerapeuticos = tratamentosTerapeuticos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "especialidade")
	public Set<MpaPopAgendas> getMpaPopAgendas() {
		return this.mpaPopAgendas;
	}

	public void setMpaPopAgendas(
			Set<MpaPopAgendas> mpaPopAgendas) {
		this.mpaPopAgendas = mpaPopAgendas;
	}
	
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "especialidade")
	public Set<AghAtendimentos> getAtendimentos() {
		return this.atendimentos;
	}

	public void setAtendimentos(Set<AghAtendimentos> atendimentos) {
		this.atendimentos = atendimentos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "especialidade")
	public Set<AinIndicadoresHospitalares> getIndicadoresHospitalares() {
		return this.indicadoresHospitalares;
	}

	public void setIndicadoresHospitalares(Set<AinIndicadoresHospitalares> indicadoresHospitalares) {
		this.indicadoresHospitalares = indicadoresHospitalares;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "especialidade")
	public Set<AinInternacao> getInternacoes() {
		return this.internacoes;
	}

	public void setInternacoes(Set<AinInternacao> internacoes) {
		this.internacoes = internacoes;
	}

	/**
	 * @return the caracteristicas
	 */
	@OneToMany(mappedBy = "especialidade", fetch = FetchType.LAZY, orphanRemoval=true)
	@Cascade({
		org.hibernate.annotations.CascadeType.ALL
	})
	public Set<AghCaractEspecialidades> getCaracteristicas() {
		return this.caracteristicas;
	}

	/**
	 * @param caracteristicas the caracteristicas to set
	 */
	public void setCaracteristicas(Set<AghCaractEspecialidades> caracteristicas) {
		this.caracteristicas = caracteristicas;
	}
	
	
	@OneToMany(mappedBy = "aghEspecialidade", fetch = FetchType.LAZY)
	public Set<AghProfEspecialidades> getProfEspecialidades() {
		return profEspecialidades;
	}

	public void setProfEspecialidades(Set<AghProfEspecialidades> profEspecialidades) {
		this.profEspecialidades = profEspecialidades;
	}

	@OneToMany(mappedBy = "especialidade", fetch = FetchType.LAZY)
	public Set<FatProcedAmbRealizado> getFatProcedAmbRealizados() {
		return fatProcedAmbRealizados;
	}

	public void setFatProcedAmbRealizados(
			Set<FatProcedAmbRealizado> fatProcedAmbRealizados) {
		this.fatProcedAmbRealizados = fatProcedAmbRealizados;
	}
	
	@OneToMany(mappedBy = "especialidade", fetch = FetchType.LAZY)
	public Set<MbcEspecialidadeProcCirgs> getEspecialidadesProcCirgs() {
		return especialidadesProcCirgs;
	}

	public void setEspecialidadesProcCirgs(
			Set<MbcEspecialidadeProcCirgs> especialidadesProcCirgs) {
		this.especialidadesProcCirgs = especialidadesProcCirgs;
	}
	
	public enum Fields {
		SEQ("seq"),
		INDCONSULTORIA("indConsultoria"),
		INDSITUACAO("indSituacao"),
		NOME("nomeEspecialidade"),
		SIGLA("sigla"),
		CENTRO_CUSTO("centroCusto"),
		CENTRO_CUSTO_CODIGO("centroCusto.codigo"),
		CENTRO_CUSTO_DESCRICAO("centroCusto.descricao"),
		CLINICA_CODIGO("clinica.codigo"),
		CLINICA("clinica"),
		MATRICULA_CHEFIA("servidorChefe.id.matricula"),
		VINCULO_CHEFIA("servidorChefe.id.vinCodigo"),
		SERVIDOR_CHEFIA("servidorChefe"),
		SERVIDOR_CHEFIA_PESSOA_FISICA("servidorChefe.pessoaFisica"),
		NOME_CHEFIA("servidor.pessoaFisica.nome"),
		ESPECIALIDADE_GENERICA_SEQ("especialidade.seq"),
		ESP_SEQ("especialidade.seq"),
		ESPECIALIDADE_GENERICA("especialidade"),
		NOME_ESPECIALIDADE_GENERICA("especialidade.nomeEspecialidade"),
		NOME_ESPECIALIDADE("nomeEspecialidade"),
		INDINTERNA("indEspInterna"),
		NOME_REDUZIDO("nomeReduzido"),
		IDADE_MIN_PAC_INTERNACAO("idadeMinPacInternacao"),
		IDADE_MAX_PAC_INTERNACAO("idadeMaxPacInternacao"),
		INTERNACOES("internacoes"),
		ESPECIALIDADE_AGRUPA_LOTE_EXAME("especialidadeAgrupaLoteExame"),
		PROF_ESPECIALIDADES("profEspecialidades"),
		IND_HORA_DISP_FERIADO("indHoraDispFeriado"),
		GRE_SEQ("greSeq"),
		PROCEDIMENTO_AMB_REALIZADO("fatProcedAmbRealizados"),
		ESPEC_CAMPO_LAUDO("especCampoLaudo"),
		SERVIDOR("servidor"),
		SERVIDOR_PESSOA_FISICA("servidor.pessoaFisica"),
		SER_MATRICULA("servidor.id.matricula"),
		SER_VIN_CODIGO("servidor.id.vinCodigo"),
		ESPECIALIDADE_PROC_CIRG("especialidadesProcCirgs"),
		CARACTERISTICAS("caracteristicas"),
		ATENDIMENTOS("atendimentos"),
		MPA_POP_AGENDAS("mpaPopAgendas"), 
		IND_IMPRIME_AGENDA("indImprimeAgenda"),
		TRANSPLANTE_ESPECIALIDADES("fatTransplanteEspecialidades"),
		GRADE_AGENDAMENTO("gradeAgendamentoConsultas"),
		IND_IMP_SO_SERVICO("indImpSoServico"),
		ESPECIALIDADE_TRATAMENTO("fatEspecialidadeTratamentos"),
		PROCED_HOSP_ESPECIALIDADES("procedHospEspecialidades"),
		IND_ESP_PEDIATRICA("indEspPediatrica"),
		;
		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}

	@Transient
	public boolean isAtivo() {
		if (this.indSituacao != null && this.indSituacao.isAtivo()) {
			return Boolean.TRUE;
		} else {
			return Boolean.FALSE;
		}
	}
	
	@Transient
	public void setAtivo(boolean ativo) {
		if (ativo) {
			this.indSituacao = DominioSituacao.A;
		} else {
			this.indSituacao = DominioSituacao.I;
		}
	}
	
	@Transient 
	public boolean possuiCaracteristica(DominioCaracEspecialidade caracteristica) {
		if (this.getCaracteristicas() != null) {
			for (AghCaractEspecialidades ace : this.getCaracteristicas()) {
				if (ace.getId().getCaracteristica().equals(caracteristica)) {
					return true;
				}
			}
		}
		return false;
	}
	
	@Transient
	public void associaCaracteristica(DominioCaracEspecialidade caracteristica) {
		// Evita associar se já está associado
		if (!this.possuiCaracteristica(caracteristica)) {
			if (this.getCaracteristicas() == null) {
				this.setCaracteristicas(new HashSet<AghCaractEspecialidades>());
			}
			AghCaractEspecialidades ace = new AghCaractEspecialidades(
				new AghCaractEspecialidadesId()
			);
			ace.getId().setCaracteristica(caracteristica);
			ace.setEspecialidade(this);
			this.getCaracteristicas().add(ace);
		}
	}
	
	@Transient
	public void removeCaracteristica(DominioCaracEspecialidade caracteristica) {
		// Evita associar se já está associado
		if (this.getCaracteristicas() != null) {
			for (AghCaractEspecialidades ace : this.getCaracteristicas()) {
				if (ace.getId().getCaracteristica().equals(caracteristica)) {
					this.getCaracteristicas().remove(ace);
					break;
				}
			}
		}
	}

	public void setFatEspecialidadeTratamentos(Set<FatEspecialidadeTratamento> fatEspecialidadeTratamentos) {
		this.fatEspecialidadeTratamentos = fatEspecialidadeTratamentos;
	}

	@OneToMany(mappedBy = "aghEspecialidades", fetch = FetchType.LAZY)
	public Set<FatEspecialidadeTratamento> getFatEspecialidadeTratamentos() {
		return fatEspecialidadeTratamentos;
	}

	@OneToMany(mappedBy = "especialidade", fetch = FetchType.LAZY)
	public Set<AelEspecialidadeCampoLaudo> getEspecCampoLaudo() {
		return especCampoLaudo;
	}

	public void setEspecCampoLaudo(Set<AelEspecialidadeCampoLaudo> especCampoLaudo) {
		this.especCampoLaudo = especCampoLaudo;
	}

//	@Transient
//	public String getNomeEspecialidadeTrunc(Long size){
//		return StringUtil.trunc(this.getNomeEspecialidade(), Boolean.TRUE, size);
//	}
	
	@Transient
	public String getLabelSeqSiglaNomeEspecialidade() {
		if (seq != null) {
			this.labelSeqSiglaNomeEspecialidade = this.seq + " - " + this.sigla + " - " + this.nomeEspecialidade;
		}
		return labelSeqSiglaNomeEspecialidade;
	}
	
	@OneToMany(mappedBy = "aghEspecialidades", fetch = FetchType.LAZY)
	public Set<FatTransplanteEspecialidade> getFatTransplanteEspecialidades() {
		return fatTransplanteEspecialidades;
	}

	public void setFatTransplanteEspecialidades(
			Set<FatTransplanteEspecialidade> fatTransplanteEspecialidades) {
		this.fatTransplanteEspecialidades = fatTransplanteEspecialidades;
	}
	
	@OneToMany(mappedBy = "especialidade", fetch = FetchType.LAZY)
	public Set<AacGradeAgendamenConsultas> getGradeAgendamentoConsultas() {
		return gradeAgendamentoConsultas;
	}

	public void setGradeAgendamentoConsultas(
			Set<AacGradeAgendamenConsultas> gradeAgendamentoConsultas) {
		this.gradeAgendamentoConsultas = gradeAgendamentoConsultas;
	}

	@OneToMany(mappedBy = "especialidade", fetch = FetchType.LAZY)
	public Set<AacProcedHospEspecialidades> getProcedHospEspecialidades() {
		return procedHospEspecialidades;
	}

	public void setProcedHospEspecialidades(Set<AacProcedHospEspecialidades> procedHospEspecialidades) {
		this.procedHospEspecialidades = procedHospEspecialidades;
	}
	
	@Transient
	public String getSiglaNomeEspecialidade() {
		return this.sigla + " - " + this.nomeEspecialidade;
	}
}
